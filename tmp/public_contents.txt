
# Directory: /home/vhost15998ssh/htdocs/digiplayer/public

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/assets

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/assets/css

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/components

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/assets/images

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/media

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/playlist-media

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/analytics

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/test

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/groups

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/auth

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/settings

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/monitoring

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/offline

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/group-management

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/endpoints

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/remote

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/playlists

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/playlists/action

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/network-stats

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/reports

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/device-stats

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/users

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/device-group

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/locations

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/devices

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/bulk-control

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/live-monitoring

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/group-stats

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/mass-update

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/device

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/diagnostics

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/schedules

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/queue

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/notifications

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/api/sync

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/template

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/uploads

# Directory: /home/vhost15998ssh/htdocs/digiplayer/public/uploads/media

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/schedule.php ===

<?php
session_start();
if (!isset($_SESSION['user'])) {
    header('Location: index.php');
    exit;
}
$pageTitle = 'Schedule Management';
$currentPage = 'schedule';
require_once 'template/header.php';
require_once 'template/sidebar.php';
?>

<div class="main-content">
    <div class="content-header">
        <h1>Schedule Management</h1>
        <div class="header-actions">
            <button class="btn btn-primary" onclick="showAddScheduleModal()">
                <i class="icon-plus"></i> Add Schedule
            </button>
        </div>
    </div>

    <div class="schedule-container">
        <div class="schedule-grid">
            <div class="schedule-table">
                <table>
                    <thead>
                        <tr>
                            <th>Playlist</th>
                            <th>Device/Group</th>
                            <th>Start</th>
                            <th>End</th>
                            <th>Repeat</th>
                            <th>Priority</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="scheduleData"></tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Add Schedule Modal -->
    <div id="scheduleModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Add Schedule</h2>
                <button class="close-modal" onclick="closeModal('scheduleModal')">&times;</button>
            </div>
            <form id="scheduleForm">
                <!-- Schedule form content -->
            </form>
        </div>
    </div>
</div>

<script src="/digiplayer/public/assets/js/schedule.js"></script>
<?php require_once 'template/footer.php'; ?>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/template.php ===

<?php if (!isset($_SESSION)) { session_start(); } ?>
<div class="sidebar">
    <div class="sidebar-header">
        <h2>DigiPlayer</h2>
    </div>
    <div class="sidebar-menu">
        <a href="dashboard.php" class="menu-item">Dashboard</a>
        <a href="devices.php" class="menu-item">Devices</a>
        <a href="playlists.php" class="menu-item">Playlists</a>
        <a href="media.php" class="menu-item">Media</a>
        <a href="monitoring.php" class="menu-item">Monitoring</a>
        <a href="schedule.php" class="menu-item">Schedule</a>
    </div>
</div>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/diagnostics.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Diagnostics</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <div class="diagnostics-container">
       <div class="filters">
           <select id="deviceSelect" onchange="loadLogs()">
               <option value="">All Devices</option>
           </select>
           <select id="periodSelect" onchange="loadLogs()">
               <option value="24h">Last 24 Hours</option>
               <option value="7d">Last 7 Days</option>
               <option value="30d">Last 30 Days</option>
           </select>
           <select id="typeSelect" onchange="filterLogs()">
               <option value="">All Types</option>
               <option value="error">Errors</option>
               <option value="warning">Warnings</option>
               <option value="info">Info</option>
           </select>
       </div>
       
       <div id="logList" class="log-list"></div>
       
       <div id="systemStatus" class="status-panel"></div>
   </div>

   <script>
   async function loadLogs() {
       const deviceId = document.getElementById("deviceSelect").value;
       const period = document.getElementById("periodSelect").value;
       const response = await fetch(`/api/diagnostics?device_id=${deviceId}&period=${period}`);
       const data = await response.json();
       renderLogs(data.logs);
   }

   function renderLogs(logs) {
       const logList = document.getElementById("logList");
       logList.innerHTML = logs.map(log => `
           <div class="log-entry ${log.type}">
               <div class="log-header">
                   <span>${log.device_name}</span>
                   <span>${new Date(log.created_at).toLocaleString()}</span>
               </div>
               <div class="log-message">${log.message}</div>
               ${log.details ? `<div class="log-details">${JSON.stringify(log.details)}</div>` : ""}
           </div>
       `).join("");
   }

   loadLogs();
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/analytics.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
    <title>DigiPlayer - Analytics</title>
    <link rel="stylesheet" href="/assets/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="analytics-container">
        <div class="filters">
            <select id="deviceSelect">
                <option value="">All Devices</option>
            </select>
            <select id="periodSelect">
                <option value="day">Last 24 Hours</option>
                <option value="week">Last Week</option>
                <option value="month">Last Month</option>
            </select>
        </div>

        <div class="charts-grid">
            <div class="chart-card">
                <h3>Content Views</h3>
                <canvas id="viewsChart"></canvas>
            </div>
            <div class="chart-card">
                <h3>Playback Time</h3>
                <canvas id="durationChart"></canvas>
            </div>
            <div class="chart-card">
                <h3>Error Rate</h3>
                <canvas id="errorChart"></canvas>
            </div>
        </div>

        <div class="stats-table">
            <table>
                <thead>
                    <tr>
                        <th>Content</th>
                        <th>Views</th>
                        <th>Duration</th>
                        <th>Completion Rate</th>
                        <th>Errors</th>
                    </tr>
                </thead>
                <tbody id="statsBody"></tbody>
            </table>
        </div>
    </div>

    <script>
    async function loadAnalytics() {
        const deviceId = document.getElementById("deviceSelect").value;
        const period = document.getElementById("periodSelect").value;
        const response = await fetch(`/api/analytics?device_id=${deviceId}&period=${period}`);
        const data = await response.json();
        
        updateCharts(data.analytics);
        updateTable(data.analytics);
    }

    loadAnalytics();
    </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/bulk_control.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Bulk Control</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <div class="bulk-container">
       <div class="selection-panel">
           <h2>Select Devices</h2>
           <label><input type="checkbox" onchange="toggleAll(this)"> Select All</label>
           <div id="deviceList"></div>
       </div>
       
       <div class="control-panel">
           <h2>Bulk Actions</h2>
           <div class="action-buttons">
               <button onclick="bulkAction('restart')">Restart All</button>
               <button onclick="bulkAction('update')">Update All</button>
               <button onclick="bulkAction('reboot')">Reboot All</button>
           </div>
           
           <div class="volume-control">
               <h3>Set Volume All</h3>
               <input type="range" min="0" max="100" onchange="setVolume(this.value)">
           </div>
       </div>
   </div>

   <script>
   let selectedDevices = new Set();

   async function loadDevices() {
       const response = await fetch("/api/devices");
       const data = await response.json();
       document.getElementById("deviceList").innerHTML = data.devices.map(d => `
           <div class="device-item">
               <label>
                   <input type="checkbox" onchange="toggleDevice(${d.id})" ${selectedDevices.has(d.id) ? "checked" : ""}>
                   ${d.name}
               </label>
           </div>
       `).join("");
   }

   function toggleDevice(id) {
       if (selectedDevices.has(id)) {
           selectedDevices.delete(id);
       } else {
           selectedDevices.add(id);
       }
   }

   function toggleAll(checkbox) {
       const checkboxes = document.querySelectorAll(".device-item input[type=checkbox]");
       checkboxes.forEach(box => box.checked = checkbox.checked);
   }

   async function bulkAction(command) {
       if (selectedDevices.size === 0) {
           alert("Please select devices first");
           return;
       }
       
       await fetch("/api/bulk-control", {
           method: "POST",
           headers: {"Content-Type": "application/json"},
           body: JSON.stringify({
               command,
               device_ids: Array.from(selectedDevices),
               params: {}
           })
       });
   }

   loadDevices();
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/css/style.css ===

/* Base Styles and Variables */
:root {
    --primary: #002850;
    --secondary: #ec255a;
    --bg-light: #ebf0eb;
    --text-primary: #004178;
    --text-secondary: #9bafb9;
    --white: #ffffff;
    --error: #dc3545;
    --success: #28a745;
    --warning: #ffc107;
    --sidebar-width: 250px;
}

@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Montserrat', sans-serif;
    background: var(--bg-light);
    color: var(--text-primary);
    line-height: 1.6;
}

/* Layout Structure */
.admin-container {
    display: flex;
    min-height: 100vh;
}

/* Sidebar Styling */
.sidebar {
    width: var(--sidebar-width);
    background: var(--primary);
    min-height: 100vh;
    position: fixed;
    left: 0;
    top: 0;
    color: var(--white);
    padding-top: 1rem;
}

.sidebar-header {
    padding: 1.5rem 2rem;
    border-bottom: 1px solid rgba(255,255,255,0.1);
}

.sidebar-header h2 {
    color: var(--white);
    font-size: 1.5rem;
    font-weight: 600;
}

.nav-item {
    display: flex;
    align-items: center;
    padding: 1rem 2rem;
    color: var(--white);
    text-decoration: none;
    transition: all 0.3s ease;
}

.nav-item:hover {
    background: rgba(255,255,255,0.1);
}

.nav-item.active {
    background: var(--secondary);
    border-right: 3px solid var(--white);
}

.nav-item i {
    margin-right: 1rem;
    font-size: 1.2rem;
}

/* Main Content Area */
.main-content {
    margin-left: var(--sidebar-width);
    padding: 2rem;
    width: calc(100% - var(--sidebar-width));
}

/* Header Components */
.content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding: 1rem;
    background: var(--white);
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.content-header h1 {
    color: var(--primary);
    font-size: 1.5rem;
    font-weight: 600;
}

/* Cards and Containers */
.card {
    background: var(--white);
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

/* Grid Layouts */
.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

/* Tables */
.table-container {
    background: var(--white);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid var(--bg-light);
}

th {
    background: var(--primary);
    color: var(--white);
    font-weight: 500;
}

tr:hover {
    background: rgba(0,0,0,0.02);
}

/* Status Indicators */
.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 50px;
    font-size: 0.875rem;
    font-weight: 500;
}

.status-online {
    background: #e8f5e9;
    color: #2e7d32;
}

.status-offline {
    background: #ffebee;
    color: #c62828;
}

.status-pending {
    background: #fff3e0;
    color: #ef6c00;
}

/* Buttons */
.btn {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    border: none;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-primary {
    background: var(--primary);
    color: var(--white);
}

.btn-secondary {
    background: var(--secondary);
    color: var(--white);
}

.btn-outline {
    border: 1px solid var(--primary);
    color: var(--primary);
    background: transparent;
}

/* Forms */
.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
}

.form-group input,
.form-group select {
    width: 100%;
    padding: 8px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

.form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
}

/* Modals */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: var(--white);
    border-radius: 8px;
    padding: 2rem;
    width: 90%;
    max-width: 500px;
    position: relative;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.close-modal {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
}

/* Notifications */
.notification {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    padding: 1rem 2rem;
    border-radius: 4px;
    background: var(--white);
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    animation: slideIn 0.3s ease;
}

@keyframes slideIn {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
}

/* Responsive Design */
@media (max-width: 1024px) {
    .sidebar {
        width: 60px;
    }
    
    .main-content {
        margin-left: 60px;
        width: calc(100% - 60px);
    }
    
    .nav-item span {
        display: none;
    }
}

@media (max-width: 768px) {
    .grid-container {
        grid-template-columns: 1fr;
    }
    
    .table-container {
        overflow-x: auto;
    }
}

/* Page Specific Styles */
/* Dashboard */
.dashboard-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.stat-card {
    background: var(--white);
    border-radius: 8px;
    padding: 1.5rem;
    display: flex;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

/* Media Manager */
.media-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1.5rem;
}

.media-item {
    background: var(--white);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

/* Playlists */
.playlist-container {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 2rem;
}

/* Monitoring */
.monitor-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
}

.progress-bar {
    height: 8px;
    background: var(--bg-light);
    border-radius: 4px;
    overflow: hidden;
}

.progress {
    height: 100%;
    background: var(--primary);
    transition: width 0.3s ease;
}
/* Additional Utility Classes */
.content-area {
    margin-left: var(--sidebar-width);
    padding: 20px;
    width: calc(100% - var(--sidebar-width));
}

/* List Views */
.list-row {
    display: flex;
    align-items: center;
    padding: 1rem;
    background: var(--white);
    border-radius: 4px;
    margin-bottom: 0.5rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
}

/* Search and Filter Controls */
.filters-bar {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.search-box {
    flex: 1;
}

.search-box input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

/* Device Card Specific */
.device-card {
    background: var(--white);
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1rem;
}

.device-info {
    margin-top: 1rem;
}

.device-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-top: 1rem;
}

/* Table Improvements */
.table-responsive {
    overflow-x: auto;
    width: 100%;
}

/* Icon Positioning */
.icon-left {
    margin-right: 0.5rem;
}

.icon-right {
    margin-left: 0.5rem;
}

/* Additional Button Styles */
.btn-group {
    display: flex;
    gap: 0.5rem;
}

.btn-icon {
    padding: 0.5rem;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    background: transparent;
}

.btn-icon:hover {
    background: var(--bg-light);
}

/* Loading States */
.loading {
    opacity: 0.5;
    pointer-events: none;
}

.loading-spinner {
    display: inline-block;
    width: 1rem;
    height: 1rem;
    border: 2px solid var(--bg-light);
    border-top-color: var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}
/* Modern UI Elements */
.dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.stat-card {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.top-bar {
    position: fixed;
    top: 0;
    right: 0;
    left: var(--sidebar-width);
    height: 60px;
    background: white;
    padding: 0 20px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    z-index: 100;
}

.breadcrumb {
    font-size: 14px;
    color: var(--text-secondary);
}

.breadcrumb a {
    color: var(--primary);
    text-decoration: none;
}

.user-nav {
    display: flex;
    align-items: center;
    gap: 20px;
}

.notifications {
    position: relative;
    cursor: pointer;
}

.notifications .badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background: var(--secondary);
    color: white;
    font-size: 10px;
    padding: 2px 5px;
    border-radius: 10px;
}

.user-menu {
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
}

.avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
}

/* Content Panels with Better Organization */
.content-panel {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin: 20px 0;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.content-panel h2 {
    color: var(--primary);
    margin-bottom: 20px;
    font-size: 18px;
}

/* Quick Action Buttons */
.quick-actions {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.action-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    border-radius: 4px;
    background: white;
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    cursor: pointer;
    transition: all 0.2s;
}

.action-btn:hover {
    background: var(--bg-light);
    border-color: var(--primary);
}

/* Better Table Styling */
.data-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin: 20px 0;
}

.data-table th {
    background: var(--bg-light);
    color: var(--text-primary);
    font-weight: 500;
    text-align: left;
    padding: 12px;
}

.data-table td {
    padding: 12px;
    border-bottom: 1px solid var(--border-color);
}

.data-table tr:hover td {
    background: var(--bg-light);
}

/* Search and Filter Improvements */
.filter-bar {
    display: flex;
    gap: 15px;
    margin: 20px 0;
    padding: 15px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.search-field {
    flex: 1;
    position: relative;
}

.search-field input {
    width: 100%;
    padding: 8px 12px 8px 35px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

.search-field i {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
}

/* Responsive Improvements */
@media (max-width: 768px) {
    .filter-bar {
        flex-direction: column;
    }
    
    .quick-actions {
        flex-wrap: wrap;
    }
    
    .content-panel {
        padding: 15px;
    }
}
/* Page Title Styling */
.page-title {
    font-size: 24px;
    color: var(--primary);
    font-weight: 600;
    margin-bottom: 2rem;
}

.page-title span {
    color: var(--text-secondary);
    font-weight: normal;
}

/* Title separator */
.title-separator {
    display: inline-block;
    margin: 0 10px;
    color: var(--text-secondary);
}
/* Dashboard Specific Styles */
.dashboard-stats {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 24px;
    margin-bottom: 24px;
}

.stat-card {
    background: var(--white);
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    gap: 16px;
}

.stat-icon {
    width: 48px;
    height: 48px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--bg-light);
}

.stat-icon.devices { background-color: #E3F2FD; }
.stat-icon.media { background-color: #E8F5E9; }
.stat-icon.playlists { background-color: #FFF3E0; }
.stat-icon.storage { background-color: #F3E5F5; }

.stat-info {
    flex: 1;
}

.stat-label {
    color: var(--text-secondary);
    font-size: 14px;
    display: block;
    margin-bottom: 4px;
}

.stat-value {
    color: var(--text-primary);
    font-size: 24px;
    font-weight: 600;
}

.dashboard-charts {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 24px;
    margin-bottom: 24px;
}

.chart-card {
    background: var(--white);
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.chart-card h3 {
    color: var(--text-primary);
    font-size: 16px;
    margin-bottom: 16px;
}

.activity-list {
    margin-top: 16px;
}

.activity-item {
    display: flex;
    align-items: center;
    padding: 12px 0;
    border-bottom: 1px solid var(--bg-light);
}

.activity-item:last-child {
    border-bottom: none;
}

.activity-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: var(--bg-light);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
}

.activity-details {
    flex: 1;
}

.activity-text {
    color: var(--text-primary);
    font-size: 14px;
    margin-bottom: 4px;
}

.activity-time {
    color: var(--text-secondary);
    font-size: 12px;
}

/* Responsive adjustments */
@media (max-width: 1200px) {
    .dashboard-stats {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .dashboard-charts {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 768px) {
    .dashboard-stats {
        grid-template-columns: 1fr;
    }
}
/* Device List Styles */
.devices-list {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.list-header {
    display: flex;
    background: #f8f9fa;
    padding: 12px;
    border-radius: 4px;
    font-weight: 500;
    color: #666;
}

.list-row {
    display: flex;
    padding: 12px;
    border-bottom: 1px solid #eee;
    align-items: center;
}

.list-row:last-child {
    border-bottom: none;
}

.list-row:hover {
    background: #f8f9fa;
}

.col {
    padding: 0 8px;
}

.device-name {
    font-weight: 500;
    color: #333;
}

.device-ip {
    font-size: 12px;
    color: #666;
}

.status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
}

.status-badge.online {
    background: #e8f5e9;
    color: #2e7d32;
}

.status-badge.offline {
    background: #ffebee;
    color: #c62828;
}

.status-badge.pending {
    background: #fff3e0;
    color: #ef6c00;
}

.filter-bar {
    display: flex;
    gap: 12px;
    margin-bottom: 20px;
}

.search-input {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.filter-select {
    min-width: 150px;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.btn-icon {
    padding: 6px;
    border: none;
    background: none;
    cursor: pointer;
    color: #666;
    border-radius: 4px;
}

.btn-icon:hover {
    background: #f0f0f0;
    color: #333;
}

.actions {
    display: flex;
    gap: 8px;
}

.time-inputs {
    display: flex;
    align-items: center;
    gap: 8px;
}

.time-inputs input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}
/* Device List Styles */
.devices-list {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    margin-top: 20px;
}

.list-header {
    display: flex;
    padding: 15px;
    background: var(--primary);
    color: white;
    font-weight: 500;
    border-radius: 8px 8px 0 0;
}

.list-body {
    max-height: calc(100vh - 300px);
    overflow-y: auto;
}

.list-row {
    display: flex;
    padding: 15px;
    border-bottom: 1px solid var(--border-color);
    align-items: center;
}

.list-row:last-child {
    border-bottom: none;
}

.list-row:hover {
    background: var(--bg-light);
}

/* Column Widths */
.col-checkbox { width: 40px; }
.col-name { width: 20%; }
.col-status { width: 10%; }
.col-ip { width: 15%; }
.col-location { width: 15%; }
.col-group { width: 15%; }
.col-playlist { width: 15%; }
.col-actions { width: 10%; display: flex; gap: 5px; }

/* Status Badge Styles */
.status-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
    display: inline-block;
}

.status-badge.online {
    background: #e8f5e9;
    color: #2e7d32;
}

.status-badge.offline {
    background: #ffebee;
    color: #c62828;
}

.status-badge.pending {
    background: #fff3e0;
    color: #ef6c00;
}

/* Button Styles */
.btn-icon {
    padding: 6px;
    border: none;
    background: none;
    cursor: pointer;
    color: #666;
    border-radius: 4px;
    transition: all 0.2s;
}

.btn-icon:hover {
    background: var(--bg-light);
    color: var(--primary);
}

/* No Data State */
.no-data {
    padding: 40px;
    text-align: center;
    color: #666;
}

.no-data a {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
}

.no-data a:hover {
    text-decoration: underline;
}

/* Device Description */
.device-description {
    font-size: 12px;
    color: #666;
    margin-top: 4px;
}

/* Device Management Specific Styles */
.devices-list {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    margin-top: 20px;
}

.list-header {
    display: flex;
    padding: 15px;
    background: #002850;
    color: white;
    font-weight: 500;
    border-radius: 8px 8px 0 0;
}

.list-row {
    display: flex;
    padding: 15px;
    border-bottom: 1px solid #ebf0eb;
    align-items: center;
}

.list-row:last-child {
    border-bottom: none;
}

.list-row:hover {
    background: #f8f9fa;
}

.col-actions {
    display: flex;
    gap: 8px;
    justify-content: flex-end;
}

.status-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
}

.status-badge.online {
    background: #e8f5e9;
    color: #2e7d32;
}

.status-badge.offline {
    background: #ffebee;
    color: #c62828;
}

.status-badge.pending {
    background: #fff3e0;
    color: #ef6c00;
}

.filter-bar {
    display: flex;
    gap: 12px;
    margin-bottom: 20px;
}

.search-box {
    flex: 1;
}

.filter-bar input,
.filter-bar select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.bulk-actions {
    padding: 10px;
    background: #f8f9fa;
    border-radius: 4px;
    margin-bottom: 20px;
    display: flex;
    gap: 10px;
}

.no-data {
    padding: 40px;
    text-align: center;
    color: #666;
}

/* Device List Styles */
.devices-list {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-top: 20px;
}

.list-header {
    display: grid;
    grid-template-columns: 40px 20% 15% 15% 15% 15% auto;
    padding: 15px;
    background: var(--primary);
    color: white;
    font-weight: 500;
    border-radius: 8px 8px 0 0;
}

.list-row {
    display: grid;
    grid-template-columns: 40px 20% 15% 15% 15% 15% auto;
    padding: 15px;
    border-bottom: 1px solid var(--border-color);
    align-items: center;
}

.list-row:hover {
    background: var(--bg-light);
}

.status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
}

.status-badge.online {
    background: #e8f5e9;
    color: #2e7d32;
}

.status-badge.offline {
    background: #ffebee;
    color: #c62828;
}

.status-badge.pending {
    background: #fff3e0;
    color: #ef6c00;
}

/* Groups Page Styles */
.groups-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    padding: 20px 0;
}

.groups-panel, .devices-panel {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    padding: 20px;
}

.group-card {
    background: var(--bg-light);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
}

.group-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.group-devices {
    min-height: 100px;
    border: 2px dashed var(--border-color);
    border-radius: 4px;
    padding: 10px;
    margin-top: 10px;
}

.group-devices.dragover {
    background: rgba(0,40,80,0.05);
    border-color: var(--primary);
}

.device-item {
    background: white;
    border-radius: 4px;
    padding: 8px 12px;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: move;
}

.device-item .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin-right: 8px;
}

.devices-pool {
    min-height: 200px;
    border: 2px dashed var(--border-color);
    border-radius: 4px;
    padding: 10px;
}
/* Groups Page Styles */
.groups-container {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 20px;
    padding: 20px;
}

.groups-panel {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.devices-panel {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.group-card {
    background: white;
    border-radius: 8px;
    margin-bottom: 15px;
    padding: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.group-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.group-devices {
    min-height: 50px;
    border: 2px dashed #e1e1e1;
    border-radius: 4px;
    padding: 10px;
    margin-top: 10px;
}

.device-item {
    background: #f8f9fa;
    border-radius: 4px;
    padding: 8px 12px;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: move;
}

.device-item .status-badge {
    font-size: 12px;
    padding: 2px 8px;
    border-radius: 12px;
}

.status-badge.online {
    background: #e8f5e9;
    color: #2e7d32;
}

.status-badge.offline {
    background: #ffebee;
    color: #c62828;
}

.status-badge.pending {
    background: #fff3e0;
    color: #ef6c00;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/css/style.css.bak ===

@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&display=swap');

body {
   font-family: 'Montserrat', sans-serif;
   margin: 0;
   padding: 0;
   display: flex;
   background: #ebf0eb;
}

.sidebar {
   width: 250px;
   background: #002850;
   min-height: 100vh;
   color: #ebf0eb;
   position: fixed;
}

.sidebar-header {
   padding: 20px;
   background: #002850;
}

.sidebar-header h2 {
   color: #ebf0eb;
   font-weight: 600;
   margin: 0;
}

.menu-item {
   display: block;
   padding: 15px 20px;
   color: #ebf0eb;
   font-weight: 600;
   text-decoration: none;
}

.menu-item:hover {
   background: rgba(255,255,255,0.1);
}

.content-area {
   margin-left: 250px;
   padding: 20px;
   width: calc(100% - 290px);
}

.page-header {
   background: #002850;
   padding: 20px;
   margin: -20px -20px 20px -20px;
   display: flex;
   justify-content: space-between;
   align-items: center;
}

.page-header h1 {
   color: #ebf0eb;
   font-weight: 600;
   margin: 0;
}

.add-button {
   background: #ec255a;
   color: #ebf0eb;
   border: none;
   padding: 12px 24px;
   border-radius: 4px;
   cursor: pointer;
   font-weight: 600;
   font-size: 14px;
}

.card {
   background: white;
   border-radius: 8px;
   padding: 20px;
   margin-bottom: 15px;
   box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.card h3 {
   color: #002850;
   margin: 0 0 10px 0;
}

.media-grid, .device-grid, .playlist-grid {
   display: grid;
   grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
   gap: 20px;
   padding: 20px 0;
}

.badge {
   padding: 4px 12px;
   border-radius: 12px;
   font-size: 12px;
   font-weight: 600;
}

.status-online { background: #4CAF50; color: white; }
.status-offline { background: #ec255a; color: white; }
.status-pending { background: #9bafb9; color: white; }

.btn {
   padding: 8px 16px;
   border: none;
   border-radius: 4px;
   cursor: pointer;
   font-weight: 600;
}

.btn-edit { background: #002850; color: white; }
.btn-delete { background: #ec255a; color: white; }
.btn-duplicate { background: #9bafb9; color: white; }

.media-preview {
   width: 100%;
   height: 200px;
   display: flex;
   align-items: center;
   justify-content: center;
   background: #f5f5f5;
   border-radius: 4px;
   overflow: hidden;
}

.preview-media {
   max-width: 100%;
   max-height: 100%;
   object-fit: contain;
}

.modal {
   position: fixed;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
   background: rgba(0,0,0,0.5);
   display: none;
   align-items: center;
   justify-content: center;
}

.modal-content {
   background: white;
   padding: 25px;
   border-radius: 8px;
   width: 90%;
   max-width: 500px;
}

.form-group {
   margin-bottom: 15px;
}

.form-group input {
   width: 100%;
   padding: 10px;
   border: 1px solid #9bafb9;
   border-radius: 4px;
}

/* Drop area styles */
.drop-zone {
   border: 2px dashed #9bafb9;
   border-radius: 8px;
   padding: 40px;
   text-align: center;
   cursor: pointer;
}

.drop-zone.drag-over {
   border-color: #002850;
   background: rgba(0,40,80,0.05);
}
/* List View Styles */
.list-view {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-top: 20px;
}

.list-header {
    display: grid;
    grid-template-columns: 40px 2fr 1fr 1fr 1fr 1fr;
    padding: 15px 20px;
    background: #002850;
    color: #ebf0eb;
    font-weight: 500;
    border-radius: 8px 8px 0 0;
}

.list-row {
    display: grid;
    grid-template-columns: 40px 2fr 1fr 1fr 1fr 1fr;
    padding: 15px 20px;
    border-bottom: 1px solid #ebf0eb;
    align-items: center;
}

.list-row:hover {
    background: #f8f9fa;
}

.checkbox-col {
    display: flex;
    align-items: center;
}

.col-actions {
    display: flex;
    gap: 8px;
}

.status-badge {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    display: inline-flex;
    align-items: center;
}
.list-view .list-row {
   border-bottom: 1px solid #ebf0eb;
}

.list-view .list-row:last-child {
   border-bottom: none;
}

.list-header .col-name,
.list-header .col-status,
.list-header .col-group,
.list-header .col-playlist,
.list-header .col-actions {
   font-weight: 600;
   color: #ebf0eb;
}
/* List adaptations for different pages */
.list-view .col-preview {
    width: 120px;
}

.list-view .col-preview img,
.list-view .col-preview video {
    width: 100px;
    height: 56px;
    object-fit: cover;
    border-radius: 4px;
}

.list-header.playlist-header {
    grid-template-columns: 2fr 1fr 1fr 1fr 1fr 1fr;
}

.list-header.media-header {
    grid-template-columns: 120px 2fr 1fr 1fr 1fr 1fr;
}

/* Row adaptations */
.list-row.playlist-row {
    grid-template-columns: 2fr 1fr 1fr 1fr 1fr 1fr;
}

.list-row.media-row {
    grid-template-columns: 120px 2fr 1fr 1fr 1fr 1fr;
}
.list-playlists .list-row {
   display: flex;
   padding: 15px 20px;
   border-bottom: 1px solid #ebf0eb;
   align-items: center;
}

.list-playlists .list-header {
   display: flex;
   padding: 15px 20px;
   background: #002850;
   color: #ebf0eb;
   font-weight: 500;
}
/* Device List Specific Styles */
.device-list {
   margin-top: 20px;
}

.device-list .list-header {
   border-radius: 8px 8px 0 0;
}

.list-row {
   border-bottom: 1px solid #ebf0eb;
   transition: background 0.2s;
}

.list-row:last-child {
   border-bottom: none;
   border-radius: 0 0 8px 8px;
}

.badge {
   padding: 6px 12px;
   border-radius: 4px;
   font-size: 12px;
   font-weight: 500;
   display: inline-block;
}

.col-actions {
   display: flex;
   gap: 8px;
   justify-content: flex-end;
}

.col-actions .btn {
   padding: 6px 12px;
   font-size: 13px;
}

.checkbox-col {
   display: flex;
   align-items: center;
   justify-content: center;
}

.checkbox-col input {
   width: 16px;
   height: 16px;
   cursor: pointer;
}
.list-playlists .list-row {
   display: flex;
   padding: 15px 20px;
   border-bottom: 1px solid #ebf0eb;
   align-items: center;
}

.list-playlists .list-header {
   display: flex;
   padding: 15px 20px;
   background: #002850;
   color: #ebf0eb;
   font-weight: 500;
}

.list-playlists .col-name {
   font-weight: 500;
}

.list-playlists .description {
   font-size: 13px;
   color: #666;
   margin-top: 4px;
}

.list-playlists .badge {
   font-size: 12px;
   padding: 4px 8px;
}

.list-playlists .col-duration,
.list-playlists .col-items {
   text-align: center;
}

.list-playlists .col-actions {
   display: flex;
   gap: 8px;
   justify-content: flex-end;
}
.list-playlists .list-row {
   display: flex;
   padding: 15px 20px;
   border-bottom: 1px solid #ebf0eb;
   align-items: center;
}

.list-playlists .list-header {
   display: flex;
   padding: 15px 20px;
   background: #002850;
   color: #ebf0eb;
   font-weight: 500;
}

.list-playlists .col-name {
   font-weight: 500;
}

.list-playlists .description {
   font-size: 13px;
   color: #666;
   margin-top: 4px;
}

.list-playlists .badge {
   font-size: 12px;
   padding: 4px 8px;
}

.list-playlists .col-duration,
.list-playlists .col-items {
   text-align: center;
}

.list-playlists .col-actions {
   display: flex;
   gap: 8px;
   justify-content: flex-end;
}
/* Media List Styles */
.list-media .col-preview {
   width: 120px;
   padding-right: 20px;
}

.list-media .preview-thumb {
   width: 100px;
   height: 56px;
   object-fit: cover;
   border-radius: 4px;
}

.list-media .col-name {
   display: flex;
   flex-direction: column;
}

.list-media .meta {
   font-size: 13px;
   color: #666;
   margin-top: 4px;
}

.list-media .type-badge {
   padding: 4px 8px;
   border-radius: 4px;
   font-size: 12px;
}

.type-image { background: #4CAF50; color: white; }
.type-video { background: #2196F3; color: white; }

.list-media .col-size,
.list-media .col-duration {
   text-align: center;
   color: #666;
}

.list-media .list-row {
   display: grid;
   grid-template-columns: 120px 2fr 1fr 1fr 1fr 1fr;
   padding: 15px 20px;
}

.list-media .list-header {
   display: grid;
   grid-template-columns: 120px 2fr 1fr 1fr 1fr 1fr;
}
/* Modern UI Elements */
.dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.stat-card {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.stat-card .title {
    color: #002850;
    font-size: 14px;
    font-weight: 500;
    margin-bottom: 8px;
}

.stat-card .value {
    font-size: 24px;
    font-weight: 600;
}

.system-status {
    display: flex;
    gap: 20px;
    padding: 10px 20px;
    background: white;
    border-radius: 8px;
    margin-bottom: 20px;
}

.status-item {
    display: flex;
    align-items: center;
    gap: 8px;
}

.status-item .label {
    font-size: 13px;
    color: #666;
}

.status-item .value {
    font-weight: 500;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.list-row {
    animation: fadeIn 0.2s ease-out;
}

.btn {
    transition: transform 0.1s;
}

.btn:active {
    transform: scale(0.98);
}

/* Dashboard Styles */
.dashboard-container {
    padding: 20px;
    background: #ebf0eb;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.stat-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.stat-value {
    font-size: 24px;
    font-weight: 600;
    color: #002850;
    margin: 10px 0;
}

.chart-container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

/* Monitor Styles */
.monitor-container {
    padding: 20px;
}

.monitor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.device-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
}

.device-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.device-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.device-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
    margin-bottom: 15px;
}

.stat-item {
    text-align: center;
}

.stat-label {
    font-size: 12px;
    color: #666;
}

.device-info {
    font-size: 14px;
    color: #666;
    border-top: 1px solid #eee;
    padding-top: 15px;
}

.status-badge {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
}

.status-online {
    background: #4CAF50;
    color: white;
}

.status-offline {
    background: #ec255a;
    color: white;
}

.status-error {
    background: #f44336;
    color: white;
}

.filter-select {
    padding: 8px 16px;
    border: 1px solid #9bafb9;
    border-radius: 4px;
    font-size: 14px;
}
/* Playlist Manager Styles */
.playlist-manager {
    display: flex;
    gap: 20px;
    padding: 20px;
    height: calc(100vh - 80px);
}

.playlists-panel {
    width: 250px;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.playlist-list {
    margin-top: 15px;
}

.playlist-item {
    padding: 10px;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.playlist-item:hover {
    background: #f5f5f5;
}

.playlist-item.selected {
    background: #002850;
    color: white;
}

.content-panel {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
    overflow: hidden;
}

.media-pool {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    height: 40%;
    overflow-y: auto;
}

.media-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

.media-item {
    cursor: pointer;
    border-radius: 4px;
    overflow: hidden;
    transition: transform 0.2s;
}

.media-item:hover {
    transform: scale(1.02);
}

.media-preview {
    height: 100px;
    background: #f5f5f5;
    display: flex;
    align-items: center;
    justify-content: center;
}

.media-preview img,
.media-preview video {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
}

.media-info {
    padding: 8px;
}

.media-name {
    font-size: 14px;
    font-weight: 500;
}

.media-type {
    font-size: 12px;
    color: #666;
}

.playlist-items {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    flex: 1;
    overflow-y: auto;
}

.item-preview {
    width: 120px;
    height: 68px;
    background: #f5f5f5;
    display: flex;
    align-items: center;
    justify-content: center;
}

.item-preview img,
.item-preview video {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
}

.item-info {
    flex: 1;
    padding: 0 15px;
}

.item-duration {
    font-size: 12px;
    color: #666;
}
/* Media Manager Styles */
.media-manager {
    padding: 20px;
}

.media-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.media-filter {
    padding: 8px 16px;
    border: 1px solid #9bafb9;
    border-radius: 4px;
    font-size: 14px;
}

.upload-zone {
    border: 2px dashed #9bafb9;
    border-radius: 8px;
    padding: 40px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 30px;
}

.upload-zone.active {
    border-color: #002850;
    background: rgba(0,40,80,0.05);
}

.upload-zone.uploading {
    border-style: solid;
    cursor: default;
}

.upload-message {
    font-size: 16px;
    color: #666;
}

.upload-info {
    font-size: 14px;
    color: #9bafb9;
    margin-top: 10px;
}

.upload-progress {
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
}

.progress-item {
    margin-bottom: 15px;
}

.progress-bar {
    height: 6px;
    background: #f0f0f0;
    border-radius: 3px;
    overflow: hidden;
    margin-top: 5px;
}

.progress-fill {
    height: 100%;
    background: #002850;
    transition: width 0.3s ease;
}

.media-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
}

.media-card {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.media-preview {
    height: 150px;
    background: #f5f5f5;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.media-preview img,
.media-preview video {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
}

.media-info {
    padding: 15px;
}

.media-name {
    font-weight: 500;
    margin-bottom: 10px;
}

.media-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.type-badge {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
}

.type-image {
    background: #4CAF50;
    color: white;
}

.type-video {
    background: #2196F3;
    color: white;
}

.media-size {
    font-size: 12px;
    color: #666;
}

.media-resolution {
    font-size: 12px;
    color: #666;
}

.media-actions {
    padding: 15px;
    border-top: 1px solid #f0f0f0;
    display: flex;
    justify-content: flex-end;
}

.btn-delete {
    padding: 6px 12px;
    background: #ec255a;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.btn-delete:hover {
    background: #d61e4c;
}

/* Group Management Styles */
.groups-container {
    padding: 20px;
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 20px;
}

.group-list {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.group-card {
    background: white;
    border-radius: 8px;
    margin-bottom: 15px;
    padding: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.group-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.group-devices {
    min-height: 50px;
    border: 2px dashed #e1e1e1;
    border-radius: 4px;
    padding: 10px;
    margin-top: 10px;
}

.group-devices.dragover {
    background: rgba(0,40,80,0.05);
    border-color: #002850;
}

.device-item {
    background: #f8f9fa;
    border-radius: 4px;
    padding: 8px 12px;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    cursor: move;
}

.device-item .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin-right: 8px;
}

.device-item .status-online {
    background: #4CAF50;
}

.device-item .status-offline {
    background: #dc3545;
}

.device-pool {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.group-actions {
    display: flex;
    gap: 8px;
}

.group-form {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
}

.group-form input,
.group-form textarea {
    width: 100%;
    margin-bottom: 10px;
    padding: 8px;
    border: 1px solid #e1e1e1;
    border-radius: 4px;
}

/* Group Management Modal Styles */
.group-actions-panel {
    margin-bottom: 20px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 4px;
}

.group-actions-panel select {
    width: 100%;
    margin-bottom: 10px;
    padding: 8px;
    border: 1px solid #e1e1e1;
    border-radius: 4px;
}

.selected-devices {
    max-height: 300px;
    overflow-y: auto;
}

.device-item.selected {
    background: #e3f2fd;
    border: 1px solid #90caf9;
}

/* Group Statistics */
.group-stats {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
}

.group-stats .stat-row {
    display: flex;
    justify-content: space-between;
    padding: 10px 0;
    border-bottom: 1px solid #e1e1e1;
}

.group-stats .stat-label {
    color: #666;
}

.group-stats .stat-value {
    font-weight: 500;
}
/* Group Hierarchy Styles */
.hierarchy-tree {
    padding: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.tree-item {
    margin: 5px 0;
    padding-left: 20px;
}

.tree-item-header {
    display: flex;
    align-items: center;
    padding: 8px;
    border-radius: 4px;
    cursor: pointer;
}

.tree-item-header:hover {
    background: rgba(0,40,80,0.05);
}

.tree-icon {
    margin-right: 8px;
    font-size: 12px;
}

.tree-label {
    flex: 1;
}

.tree-count {
    color: #666;
    font-size: 12px;
}

.tree-children {
    margin-left: 20px;
    border-left: 1px solid #e1e1e1;
    padding-left: 10px;
}

/* Group Permissions Styles */
.permissions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
    padding: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.permission-item {
    padding: 10px;
    border: 1px solid #e1e1e1;
    border-radius: 4px;
}

.permission-item label {
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
}

.permission-item input[type="checkbox"] {
    width: 16px;
    height: 16px;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/css/login.css ===

.login-page {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background: #002850;
}

.login-container {
    width: 100%;
    max-width: 400px;
    padding: 20px;
}

.login-box {
    background: white;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.login-header {
    text-align: center;
    margin-bottom: 30px;
}

.login-header h2 {
    color: #002850;
    font-size: 24px;
    margin-bottom: 10px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

.btn-login {
    width: 100%;
    padding: 12px;
    background: #ec255a;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
}

.login-message {
    margin-top: 15px;
    text-align: center;
    color: #dc3545;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/css/main.css.bak ===

/* Base Styles */
:root {
    --primary-color: #002850;
    --secondary-color: #ec255a;
    --background-color: #ebf0eb;
    --text-color: #333333;
    --border-color: #e1e1e1;
    --sidebar-width: 250px;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Montserrat', sans-serif;
    background-color: var(--background-color);
    color: var(--text-color);
    line-height: 1.6;
}

/* Login Page */
.login-page {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background: var(--primary-color);
}

.login-container {
    width: 100%;
    max-width: 400px;
    padding: 20px;
}

.login-box {
    background: white;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.login-header {
    text-align: center;
    margin-bottom: 30px;
}

.login-header h2 {
    color: var(--primary-color);
    font-size: 24px;
    margin-bottom: 10px;
}

/* Admin Layout */
.admin-container {
    display: flex;
    min-height: 100vh;
}

.sidebar {
    width: var(--sidebar-width);
    background: var(--primary-color);
    color: white;
    position: fixed;
    height: 100vh;
    overflow-y: auto;
}

.sidebar-header {
    padding: 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.sidebar-nav {
    padding: 20px 0;
}

.nav-item {
    display: flex;
    align-items: center;
    padding: 12px 20px;
    color: white;
    text-decoration: none;
    transition: background-color 0.3s;
}

.nav-item:hover {
    background: rgba(255, 255, 255, 0.1);
}

.nav-item.active {
    background: var(--secondary-color);
}

.nav-item i {
    margin-right: 12px;
}

.nav-divider {
    height: 1px;
    background: rgba(255, 255, 255, 0.1);
    margin: 10px 0;
}

.main-content {
    flex: 1;
    margin-left: var(--sidebar-width);
    padding: 20px;
}

/* Content Header */
.content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

/* Stats Grid */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.stat-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    display: flex;
    align-items: center;
}

.stat-icon {
    width: 48px;
    height: 48px;
    border-radius: 8px;
    margin-right: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.stat-info h3 {
    font-size: 14px;
    color: #666;
    margin-bottom: 5px;
}

.stat-value {
    font-size: 24px;
    font-weight: 600;
    color: var(--primary-color);
}

/* Charts Grid */
.charts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.chart-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.chart-card h3 {
    margin-bottom: 15px;
    color: var(--primary-color);
}

/* Activity List */
.recent-activity {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.activity-list {
    margin-top: 15px;
}

.activity-item {
    padding: 12px 0;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    align-items: center;
}

.activity-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    margin-right: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Forms */
.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    color: #666;
}

.form-group input,
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 14px;
}

/* Buttons */
.btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.3s;
}

.btn-primary {
    background: var(--primary-color);
    color: white;
}

.btn-secondary {
    background: var(--secondary-color);
    color: white;
}

.btn-outline {
    border: 1px solid var(--primary-color);
    color: var(--primary-color);
    background: transparent;
}

/* Utilities */
.mb-20 {
    margin-bottom: 20px;
}

.text-right {
    text-align: right;
}

/* Responsive Design */
@media (max-width: 768px) {
    .sidebar {
        width: 60px;
    }

    .main-content {
        margin-left: 60px;
    }

    .nav-item span {
        display: none;
    }

    .stats-grid {
        grid-template-columns: 1fr;
    }

    .charts-grid {
        grid-template-columns: 1fr;
    }
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/alert-manager.js ===

class AlertManager {
    constructor() {
        this.checkInterval = 10000;
        this.activeAlerts = new Map();
        this.init();
    }

    async init() {
        await this.checkAlerts();
        setInterval(() => this.checkAlerts(), this.checkInterval);
    }

    async checkAlerts() {
        try {
            const response = await fetch('/digiplayer/public/api/monitoring/alerts');
            const alerts = await response.json();
            this.processAlerts(alerts);
        } catch (error) {
            console.error('Failed to check alerts:', error);
        }
    }

    processAlerts(alerts) {
        alerts.forEach(alert => this.handleAlert(alert));
    }

    handleAlert(alert) {
        if (!this.activeAlerts.has(alert.id)) {
            this.showNotification(alert);
            this.activeAlerts.set(alert.id, alert);
        }
    }

    showNotification(alert) {
        // Notification implementation
    }
}

new AlertManager();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/media-uploader.js ===

class MediaUploader {
    constructor() {
        this.uploadQueue = new Map();
        this.maxConcurrentUploads = 3;
        this.chunkSize = 1024 * 1024; // 1MB chunks
        this.init();
    }

    init() {
        this.dropZone = document.getElementById('dropZone');
        this.setupEventListeners();
    }

    setupEventListeners() {
        this.dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            this.dropZone.classList.add('dragover');
        });

        this.dropZone.addEventListener('dragleave', () => {
            this.dropZone.classList.remove('dragover');
        });

        this.dropZone.addEventListener('drop', async (e) => {
            e.preventDefault();
            this.dropZone.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            await this.addToQueue(files);
        });

        document.getElementById('fileInput').addEventListener('change', async (e) => {
            const files = Array.from(e.target.files);
            await this.addToQueue(files);
        });
    }

    async addToQueue(files) {
        for (const file of files) {
            if (this.validateFile(file)) {
                this.uploadQueue.set(file.name, {
                    file,
                    status: 'pending',
                    progress: 0
                });
                this.updateUploadPreview();
            }
        }
        this.processQueue();
    }

    validateFile(file) {
        const allowedTypes = ['image/jpeg', 'image/png', 'video/mp4'];
        if (!allowedTypes.includes(file.type)) {
            this.showError(`Invalid file type: ${file.type}`);
            return false;
        }
        if (file.size > 100 * 1024 * 1024) { // 100MB limit
            this.showError(`File too large: ${file.name}`);
            return false;
        }
        return true;
    }

    async processQueue() {
        const pending = Array.from(this.uploadQueue.entries())
            .filter(([_, item]) => item.status === 'pending');

        const uploading = Array.from(this.uploadQueue.entries())
            .filter(([_, item]) => item.status === 'uploading');

        while (uploading.length < this.maxConcurrentUploads && pending.length > 0) {
            const [filename, item] = pending.shift();
            item.status = 'uploading';
            this.uploadFile(filename, item.file);
        }
    }

    async uploadFile(filename, file) {
        try {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('name', filename);

            const response = await fetch('/digiplayer/public/api/media/index.php', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) throw new Error(`Upload failed: ${response.statusText}`);

            this.uploadQueue.get(filename).status = 'completed';
            this.uploadQueue.get(filename).progress = 100;
            this.updateUploadPreview();
            this.processQueue();

        } catch (error) {
            this.uploadQueue.get(filename).status = 'failed';
            this.showError(`Upload failed for ${filename}: ${error.message}`);
        }
    }

    updateUploadPreview() {
        const preview = document.getElementById('uploadPreview');
        preview.innerHTML = Array.from(this.uploadQueue.entries())
            .map(([filename, item]) => `
                <div class="upload-item ${item.status}">
                    <span class="filename">${filename}</span>
                    <div class="progress-bar">
                        <div class="progress" style="width: ${item.progress}%"></div>
                    </div>
                    <span class="status">${item.status}</span>
                </div>
            `).join('');
    }

    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'upload-error';
        errorDiv.textContent = message;
        document.getElementById('uploadPreview').appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 5000);
    }
}

// Initialize uploader when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    window.mediaUploader = new MediaUploader();
});

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/group-hierarchy.js ===

class GroupHierarchy {
    constructor() {
        this.init();
    }

    async init() {
        await this.loadHierarchy();
        this.initializeTreeView();
    }

    async loadHierarchy() {
        const response = await fetch('/digiplayer/public/api/groups/hierarchy');
        const data = await response.json();
        this.renderHierarchy(data.hierarchy);
    }

    renderHierarchy(hierarchy) {
        document.getElementById('groupHierarchy').innerHTML = this.buildTreeHTML(hierarchy);
    }

    buildTreeHTML(items) {
        return `
            <div class="hierarchy-tree">
                ${this.renderTreeItems(items)}
            </div>
        `;
    }

    renderTreeItems(items) {
        return items.map(item => `
            <div class="tree-item" data-id="${item.id}">
                <div class="tree-item-header">
                    <span class="tree-icon">${item.children ? '▼' : '•'}</span>
                    <span class="tree-label">${item.name}</span>
                    <span class="tree-count">(${item.device_count})</span>
                </div>
                ${item.children ? `
                    <div class="tree-children">
                        ${this.renderTreeItems(item.children)}
                    </div>
                ` : ''}
            </div>
        `).join('');
    }
}

const groupHierarchy = new GroupHierarchy();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/network-stats.js ===

async function loadStats() {
    const deviceId = document.getElementById("deviceSelect").value;
    const response = await fetch(`/digiplayer/public/api/network-stats?device_id=${deviceId}`);
    const data = await response.json();
    
    updateCharts(data.stats);
    updateTable(data.stats);
}

function updateCharts(stats) {
    const ctx = document.getElementById("bandwidthChart").getContext("2d");
    new Chart(ctx, {
        type: "line",
        data: {
            labels: stats.map(s => new Date(s.recorded_at).toLocaleTimeString()),
            datasets: [{
                label: "Upload",
                data: stats.map(s => s.bandwidth_up),
                borderColor: "#007bff"
            }, {
                label: "Download",
                data: stats.map(s => s.bandwidth_down),
                borderColor: "#28a745"
            }]
        }
    });

    const latencyCtx = document.getElementById("latencyChart").getContext("2d");
    new Chart(latencyCtx, {
        type: "line",
        data: {
            labels: stats.map(s => new Date(s.recorded_at).toLocaleTimeString()),
            datasets: [{
                label: "Latency",
                data: stats.map(s => s.latency),
                borderColor: "#dc3545"
            }]
        }
    });
}

function updateTable(stats) {
    document.getElementById("statsBody").innerHTML = stats.map(s => `
        <tr>
            <td>${new Date(s.recorded_at).toLocaleString()}</td>
            <td>${s.bandwidth_up.toFixed(2)}</td>
            <td>${s.bandwidth_down.toFixed(2)}</td>
            <td>${s.latency}</td>
            <td>${s.packet_loss.toFixed(2)}</td>
        </tr>
    `).join("");
}

loadStats();
setInterval(loadStats, 30000);

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/report-generator.js ===

class ReportGenerator {
    constructor() {
        this.init();
    }

    async init() {
        this.setupReportTypes();
        this.bindEvents();
    }

    async generateReport(type, params) {
        try {
            const response = await fetch('/digiplayer/public/api/reports/generate.php', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ type, ...params })
            });
            const blob = await response.blob();
            this.downloadReport(blob, `${type}_report_${new Date().toISOString()}.pdf`);
        } catch (error) {
            console.error('Report generation failed:', error);
        }
    }

    downloadReport(blob, filename) {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    }

    setupReportTypes() {
        const types = [
            { id: 'device', name: 'Device Status Report' },
            { id: 'playback', name: 'Playback Statistics' },
            { id: 'performance', name: 'System Performance' }
        ];
        // Implement report type setup
    }
}

new ReportGenerator();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/playlist-schedule.js ===

class PlaylistScheduler {
    constructor() {
        this.scheduleGrid = document.getElementById('scheduleGrid');
        this.init();
    }

    init() {
        this.loadSchedules();
        this.setupEventListeners();
    }

    async loadSchedules() {
        const response = await fetch('/digiplayer/public/api/schedules');
        const data = await response.json();
        this.renderSchedules(data.schedules);
    }

    // Rest of implementation
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/devices.js ===

// Global variables
let selectedDevices = new Set();

// Core Functions
function loadDevices() {
    const searchTerm = document.getElementById('searchInput')?.value || '';
    const status = document.getElementById('statusFilter')?.value || '';
    const groupId = document.getElementById('groupFilter')?.value || '';

    const queryParams = new URLSearchParams({
        search: searchTerm,
        status: status,
        group_id: groupId
    });

    fetch(`/digiplayer/public/api/devices/index.php?${queryParams}`)
        .then(response => response.json())
        .then(data => {
            renderDevices(data.devices);
        })
        .catch(error => {
            console.error('Error loading devices:', error);
        });
}

function loadGroups() {
    fetch('/digiplayer/public/api/groups/index.php')
        .then(response => response.json())
        .then(data => {
            const groupSelect = document.getElementById('groupFilter');
            const deviceGroupSelect = document.getElementById('deviceGroup');
            
            const groupOptions = data.groups.map(group => 
                `<option value="${group.id}">${group.name}</option>`
            ).join('');
            
            if (groupSelect) groupSelect.innerHTML = '<option value="">All Groups</option>' + groupOptions;
            if (deviceGroupSelect) deviceGroupSelect.innerHTML = '<option value="">Select Group</option>' + groupOptions;
        })
        .catch(error => {
            console.error('Error loading groups:', error);
        });
}

function renderDevices(devices) {
    const devicesList = document.getElementById('devicesList');
    
    if (!devices || devices.length === 0) {
        devicesList.innerHTML = '<div class="no-data">No devices found</div>';
        return;
    }

    devicesList.innerHTML = `
        <div class="list-header">
            <div class="col"><input type="checkbox" onchange="toggleAllDevices(this)"></div>
            <div class="col">Name</div>
            <div class="col">Status</div>
            <div class="col">IP Address</div>
            <div class="col">Group</div>
            <div class="col">Current Playlist</div>
            <div class="col">Actions</div>
        </div>
        ${devices.map(device => `
            <div class="list-row" data-device-id="${device.id}">
                <div class="col">
                    <input type="checkbox" onchange="toggleDevice(${device.id})" 
                           ${selectedDevices.has(device.id) ? 'checked' : ''}>
                </div>
                <div class="col">${device.name}</div>
                <div class="col">
                    <span class="status-badge ${device.status}">${device.status}</span>
                </div>
                <div class="col">${device.ip_address || '-'}</div>
                <div class="col">${device.group_names || '-'}</div>
                <div class="col">${device.playlist_name || '-'}</div>
                <div class="col">
                    <button onclick="editDevice(${device.id})" class="btn-icon">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button onclick="deleteDevice(${device.id})" class="btn-icon">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `).join('')}`;
}

function toggleDevice(id) {
    if (selectedDevices.has(id)) {
        selectedDevices.delete(id);
    } else {
        selectedDevices.add(id);
    }
    updateBulkActionsVisibility();
}

function toggleAllDevices(checkbox) {
    const deviceCheckboxes = document.querySelectorAll('.list-row input[type="checkbox"]');
    deviceCheckboxes.forEach(cb => {
        const deviceId = parseInt(cb.closest('.list-row').dataset.deviceId);
        cb.checked = checkbox.checked;
        if (checkbox.checked) {
            selectedDevices.add(deviceId);
        } else {
            selectedDevices.delete(deviceId);
        }
    });
    updateBulkActionsVisibility();
}

function updateBulkActionsVisibility() {
    const bulkActions = document.getElementById('bulkActions');
    if (bulkActions) {
        bulkActions.style.display = selectedDevices.size > 0 ? 'block' : 'none';
    }
}

function showAddDeviceModal() {
    const form = document.getElementById('deviceForm');
    if (form) form.reset();
    document.getElementById('modalTitle').textContent = 'Add New Device';
    document.getElementById('deviceId').value = '';
    document.getElementById('deviceModal').style.display = 'flex';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

function editDevice(id) {
    fetch(`/digiplayer/public/api/devices/index.php?id=${id}`)
        .then(response => response.json())
        .then(data => {
            const device = data.device;
            document.getElementById('deviceId').value = device.id;
            document.getElementById('deviceName').value = device.name;
            document.getElementById('deviceIP').value = device.ip_address;
            document.getElementById('deviceLocation').value = device.location || '';
            document.getElementById('deviceGroup').value = device.group_id || '';
            document.getElementById('devicePlaylist').value = device.playlist_id || '';
            document.getElementById('modalTitle').textContent = 'Edit Device';
            document.getElementById('deviceModal').style.display = 'flex';
        })
        .catch(error => console.error('Error:', error));
}

function deleteDevice(id) {
    if (!confirm('Are you sure you want to delete this device?')) return;
    
    fetch('/digiplayer/public/api/devices/index.php', {
        method: 'DELETE',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({id: id})
    })
    .then(response => response.json())
    .then(() => loadDevices())
    .catch(error => console.error('Error:', error));
}

// Initialize when document is ready
document.addEventListener('DOMContentLoaded', () => {
    loadDevices();
    loadGroups();
    
    // Setup form submission
    const deviceForm = document.getElementById('deviceForm');
    if (deviceForm) {
        deviceForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            
            const method = data.id ? 'PUT' : 'POST';
            
            fetch('/digiplayer/public/api/devices/index.php', {
                method: method,
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(() => {
                closeModal('deviceModal');
                loadDevices();
            })
            .catch(error => console.error('Error:', error));
        });
    }
    
    // Setup filters
    const searchInput = document.getElementById('searchInput');
    const statusFilter = document.getElementById('statusFilter');
    const groupFilter = document.getElementById('groupFilter');
    
    if (searchInput) searchInput.addEventListener('input', () => loadDevices());
    if (statusFilter) statusFilter.addEventListener('change', () => loadDevices());
    if (groupFilter) groupFilter.addEventListener('change', () => loadDevices());
});

// Make functions globally available
window.loadDevices = loadDevices;
window.loadGroups = loadGroups;
window.toggleDevice = toggleDevice;
window.toggleAllDevices = toggleAllDevices;
window.editDevice = editDevice;
window.deleteDevice = deleteDevice;
window.showAddDeviceModal = showAddDeviceModal;
window.closeModal = closeModal;
=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/diagnostics.js ===

async function loadLogs() {
    const deviceId = document.getElementById("deviceSelect").value;
    const period = document.getElementById("periodSelect").value;
    const type = document.getElementById("typeSelect").value;

    try {
        const response = await fetch(`/digiplayer/public/api/diagnostics?device_id=${deviceId}&period=${period}`);
        const data = await response.json();
        renderLogs(data.logs.filter(log => !type || log.type === type));
    } catch (error) {
        console.error('Failed to load logs:', error);
    }
}

function renderLogs(logs) {
    document.getElementById("logList").innerHTML = logs.map(log => `
        <div class="log-entry ${log.type}">
            <div class="log-header">
                <span class="device">${log.device_name}</span>
                <span class="timestamp">${new Date(log.created_at).toLocaleString()}</span>
            </div>
            <div class="log-message">${log.message}</div>
            ${log.details ? `<pre class="log-details">${JSON.stringify(log.details, null, 2)}</pre>` : ''}
        </div>
    `).join("");
}

function updateSystemStatus() {
    fetch("/digiplayer/public/api/diagnostics/system")
        .then(r => r.json())
        .then(data => {
            document.getElementById("systemStatus").innerHTML = `
                <div class="status-grid">
                    <div class="status-item">
                        <label>CPU Usage</label>
                        <div class="progress-bar">
                            <div class="progress" style="width: ${data.cpu_usage}%"></div>
                        </div>
                    </div>
                    <div class="status-item">
                        <label>Memory Usage</label>
                        <div class="progress-bar">
                            <div class="progress" style="width: ${data.memory_usage}%"></div>
                        </div>
                    </div>
                    <div class="status-item">
                        <label>Disk Usage</label>
                        <div class="progress-bar">
                            <div class="progress" style="width: ${data.disk_usage}%"></div>
                        </div>
                    </div>
                </div>
            `;
        });
}

loadLogs();
updateSystemStatus();
setInterval(updateSystemStatus, 60000);

document.getElementById("deviceSelect").addEventListener("change", loadLogs);
document.getElementById("periodSelect").addEventListener("change", loadLogs);
document.getElementById("typeSelect").addEventListener("change", loadLogs);

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/device-sync.js ===

class DeviceSyncManager {
    constructor() {
        this.syncInterval = 30000;
        this.syncQueue = new Map();
        this.init();
    }

    async init() {
        this.startSync();
    }
    // Rest of implementation
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/playlists.js ===

let currentPlaylist = null;
let selectedMedia = new Set();
let playlists = [];
let mediaItems = [];

document.addEventListener('DOMContentLoaded', function() {
    initializePage();
    setupEventListeners();
});

function initializePage() {
    loadPlaylists();
    initializeSortable();
}

function setupEventListeners() {
    // Search functionality
    document.getElementById('playlistSearch').addEventListener('input', filterPlaylists);
    document.getElementById('contentSearch').addEventListener('input', filterMedia);
    document.getElementById('contentTypeFilter').addEventListener('change', filterMedia);
    
    // Form submissions
    document.getElementById('addPlaylistForm').addEventListener('submit', handleAddPlaylist);
}

function initializeSortable() {
    const contentList = document.getElementById('playlistContent');
    Sortable.create(contentList, {
        animation: 150,
        ghostClass: 'sortable-ghost',
        onEnd: function() {
            updatePlaylistOrder();
        }
    });
}

async function loadPlaylists() {
    try {
        const response = await fetch('/api/playlists/index.php');
        const data = await response.json();
        playlists = data.playlists;
        renderPlaylists(playlists);
    } catch (error) {
        showNotification('Error loading playlists', 'error');
    }
}

async function loadPlaylistContent(playlistId) {
    try {
        const response = await fetch(`/api/playlists/index.php?id=${playlistId}&items=1`);
        const data = await response.json();
        currentPlaylist = data.playlist;
        renderPlaylistContent(data.items);
        updatePlaylistInfo(data.items);
    } catch (error) {
        showNotification('Error loading playlist content', 'error');
    }
}

function renderPlaylists(playlists) {
    const playlistsList = document.getElementById('playlistsList');
    playlistsList.innerHTML = playlists.map(playlist => `
        <div class="playlist-item ${currentPlaylist?.id === playlist.id ? 'active' : ''}"
             onclick="selectPlaylist(${playlist.id})">
            <div class="playlist-info">
                <h4>${playlist.name}</h4>
                <span class="item-count">${playlist.items_count} items</span>
            </div>
            <div class="playlist-duration">${formatDuration(playlist.total_duration)}</div>
            <div class="playlist-actions">
                <button class="btn-icon" onclick="duplicatePlaylist(${playlist.id})">
                    <i class="icon-copy"></i>
                </button>
                <button class="btn-icon" onclick="deletePlaylist(${playlist.id})">
                    <i class="icon-trash"></i>
                </button>
            </div>
        </div>
    `).join('');
}

function renderPlaylistContent(items) {
    const contentList = document.getElementById('playlistContent');
    contentList.innerHTML = items.map((item, index) => `
        <div class="content-item" data-id="${item.id}">
            <div class="drag-handle">
                <i class="icon-drag"></i>
            </div>
            <div class="content-preview">
                ${item.type === 'video' 
                    ? `<video src="${item.file_path}"></video>`
                    : `<img src="${item.file_path}" alt="${item.name}">`
                }
            </div>
            <div class="content-info">
                <h4>${item.name}</h4>
                <span class="duration">${formatDuration(item.duration)}</span>
            </div>
            <div class="content-actions">
                <input type="number" 
                       class="duration-input" 
                       value="${item.duration}"
                       onchange="updateItemDuration(${item.id}, this.value)">
                <button class="btn-icon" onclick="removeContent(${item.id})">
                    <i class="icon-trash"></i>
                </button>
            </div>
        </div>
    `).join('');
}

async function handleAddPlaylist(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const playlistData = Object.fromEntries(formData.entries());
    
    try {
        const response = await fetch('/api/playlists/index.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(playlistData)
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            showNotification('Playlist created successfully', 'success');
            closeModal('addPlaylistModal');
            loadPlaylists();
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

async function loadAvailableMedia() {
    try {
        const response = await fetch('/api/media/index.php');
        const data = await response.json();
        mediaItems = data.media;
        renderMediaGrid(mediaItems);
    } catch (error) {
        showNotification('Error loading media', 'error');
    }
}

function renderMediaGrid(media) {
    const mediaGrid = document.getElementById('mediaGrid');
    mediaGrid.innerHTML = media.map(item => `
        <div class="media-item ${selectedMedia.has(item.id) ? 'selected' : ''}"
             onclick="toggleMediaSelection(${item.id})">
            <div class="media-preview">
                ${item.type === 'video'
                    ? `<video src="${item.file_path}"></video>`
                    : `<img src="${item.file_path}" alt="${item.name}">`
                }
            </div>
            <div class="media-info">
                <span class="media-name">${item.name}</span>
                <span class="media-duration">${formatDuration(item.duration)}</span>
            </div>
        </div>
    `).join('');
}

function toggleMediaSelection(mediaId) {
    if (selectedMedia.has(mediaId)) {
        selectedMedia.delete(mediaId);
    } else {
        selectedMedia.add(mediaId);
    }
    
    // Update UI to show selection
    const mediaElement = document.querySelector(`.media-item[data-id="${mediaId}"]`);
    if (mediaElement) {
        mediaElement.classList.toggle('selected');
    }
}

async function addSelectedContent() {
    if (!currentPlaylist || selectedMedia.size === 0) return;
    
    try {
        const response = await fetch('/api/playlists/media.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                playlist_id: currentPlaylist.id,
                media_ids: Array.from(selectedMedia)
            })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            showNotification('Content added successfully', 'success');
            closeModal('addContentModal');
            loadPlaylistContent(currentPlaylist.id);
            selectedMedia.clear();
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        showNotification('Failed to add content', 'error');
    }
}

// Utility functions
function formatDuration(seconds) {
    if (!seconds) return '0:00';
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    const remainingSeconds = Math.floor(seconds % 60);
    
    if (hours > 0) {
        return `${hours}:${padZero(remainingMinutes)}:${padZero(remainingSeconds)}`;
    }
    return `${remainingMinutes}:${padZero(remainingSeconds)}`;
}

function padZero(num) {
    return num.toString().padStart(2, '0');
}

function showNotification(message, type = 'info') {
    // Implementation depends on your notification system
    console.log(`${type}: ${message}`);
}

function showModal(modalId) {
    document.getElementById(modalId).style.display = 'flex';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/playlist-manager.js ===

class PlaylistManager {
    constructor() {
        this.selectedPlaylist = null;
        this.mediaItems = new Set();
        this.init();
    }

    async init() {
        await this.loadPlaylists();
        this.setupEventListeners();
        this.initSortable();
    }

    async loadPlaylists() {
        const response = await fetch('/digiplayer/public/api/playlists');
        const data = await response.json();
        this.renderPlaylists(data.playlists);
    }

    initSortable() {
        new Sortable(document.getElementById('playlistContent'), {
            animation: 150,
            onEnd: () => this.updatePlaylistOrder()
        });
    }

    renderPlaylists(playlists) {
        document.getElementById('playlistsList').innerHTML = playlists.map(p => `
            <div class="playlist-item" onclick="playlistManager.selectPlaylist(${p.id})">
                <div class="playlist-info">
                    <h3>${p.name}</h3>
                    <span>${p.items_count} items · ${this.formatDuration(p.total_duration)}</span>
                </div>
                <div class="playlist-actions">
                    <button onclick="playlistManager.editPlaylist(${p.id})">Edit</button>
                    <button onclick="playlistManager.deletePlaylist(${p.id})">Delete</button>
                </div>
            </div>
        `).join('');
    }

    formatDuration(seconds) {
        return new Date(seconds * 1000).toISOString().substr(11, 8);
    }

    setupEventListeners() {
        // Event listeners setup
    }
}

const playlistManager = new PlaylistManager();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/system-settings.js ===

class SystemSettings {
    constructor() {
        this.init();
    }

    async init() {
        await this.loadSettings();
        this.setupEventListeners();
    }

    async loadSettings() {
        const response = await fetch('/digiplayer/public/api/settings');
        this.settings = await response.json();
        this.renderSettings();
    }

    renderSettings() {
        const container = document.getElementById('settingsContainer');
        container.innerHTML = `
            <div class="settings-group">
                <h3>General Settings</h3>
                ${this.renderGeneralSettings()}
            </div>
            <div class="settings-group">
                <h3>Network Settings</h3>
                ${this.renderNetworkSettings()}
            </div>
            <div class="settings-group">
                <h3>Storage Settings</h3>
                ${this.renderStorageSettings()}
            </div>
        `;
    }

    async saveSettings(section, data) {
        await fetch('/digiplayer/public/api/settings', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ section, data })
        });
    }
}

new SystemSettings();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/device.js ===

let selectedDevice = null;

function showAddDeviceModal() {
    const modal = document.getElementById('deviceModal');
    const form = document.getElementById('deviceForm');
    if (!modal || !form) {
        console.error('Modal or form not found');
        return;
    }

    form.reset();
    
    const modalTitle = document.getElementById('modalTitle');
    if (modalTitle) {
        modalTitle.textContent = 'Add New Device';
    }

    const deviceId = document.getElementById('deviceId');
    if (deviceId) {
        deviceId.value = '';
    }

    modal.style.display = 'flex';
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

function deviceAction(id, action) {
    fetch('/digiplayer/public/api/devices/action', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({id, action})
    });
}

function deleteDevice(id) {
    if (!confirm('Are you sure you want to delete this device?')) return;
    
    fetch(`/digiplayer/public/api/devices/index.php`, {
        method: 'DELETE',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ id })
    })
    .then(() => window.location.href = 'devices.php');
}

function generateKey(deviceId) {
    fetch('/digiplayer/public/api/devices/key.php', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ id: deviceId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.key) {
            alert('Device key: ' + data.key);
        }
    });
}

function editDevice(id) {
    fetch(`/digiplayer/public/api/devices/index.php?id=${id}`)
        .then(response => response.json())
        .then(data => {
            const device = data.device;
            const modal = document.getElementById('deviceModal');
            if (!modal) {
                console.error('Device modal not found');
                return;
            }

            // Safely set values checking if elements exist
            const elements = {
                'deviceId': device.id,
                'deviceName': device.name,
                'deviceIP': device.ip_address,
                'deviceLocation': device.location || '',
                'deviceGroup': device.group_id || '',
                'devicePlaylist': device.playlist_id || ''
            };

            Object.entries(elements).forEach(([id, value]) => {
                const element = document.getElementById(id);
                if (element) {
                    element.value = value;
                }
            });

            const modalTitle = document.getElementById('modalTitle');
            if (modalTitle) {
                modalTitle.textContent = 'Edit Device';
            }

            modal.style.display = 'flex';
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to load device data');
        });
}
=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/bulk-control.js ===

let selectedDevices = new Set();

async function loadDevices() {
    const response = await fetch("/digiplayer/public/api/devices");
    const data = await response.json();
    document.getElementById("deviceList").innerHTML = data.devices.map(d => `
        <div class="device-item">
            <label>
                <input type="checkbox" onchange="toggleDevice(${d.id})" ${selectedDevices.has(d.id) ? "checked" : ""}>
                <span class="device-name">${d.name}</span>
                <span class="status-badge ${d.status}">${d.status}</span>
            </label>
        </div>
    `).join("");
}

function toggleDevice(id) {
    selectedDevices.has(id) ? selectedDevices.delete(id) : selectedDevices.add(id);
}

function toggleAll(checkbox) {
    const checkboxes = document.querySelectorAll(".device-item input[type=checkbox]");
    checkboxes.forEach(box => {
        box.checked = checkbox.checked;
        toggleDevice(parseInt(box.closest('.device-item').dataset.id));
    });
}

async function bulkAction(command) {
    if (selectedDevices.size === 0) {
        showNotification('Please select devices first', 'warning');
        return;
    }
    
    try {
        await fetch("/digiplayer/public/api/bulk-control", {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify({
                command,
                device_ids: Array.from(selectedDevices)
            })
        });
        showNotification(`${command} command sent to selected devices`, 'success');
    } catch (error) {
        showNotification('Failed to execute command', 'error');
    }
}

function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
}

loadDevices();
setInterval(loadDevices, 30000);

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/monitoring.js ===

document.addEventListener('DOMContentLoaded', function() {
    initializeMonitoring();
    startMonitoringUpdates();
});

function initializeMonitoring() {
    updateSystemStatus();
    updateDeviceStats();
}

function startMonitoringUpdates() {
    // Update every 30 seconds
    setInterval(updateSystemStatus, 30000);
    setInterval(updateDeviceStats, 30000);
}

function updateSystemStatus() {
    fetch('/digiplayer/public/api/monitoring/system-status')
        .then(response => response.json())
        .then(data => {
            updateOverviewPanel(data);
        })
        .catch(error => console.error('Error updating system status:', error));
}

function updateDeviceStats() {
    fetch('/digiplayer/public/api/monitoring/device-metrics')
        .then(response => response.json())
        .then(data => {
            updateDeviceTable(data.devices);
        })
        .catch(error => console.error('Error updating device stats:', error));
}

function updateOverviewPanel(data) {
    const overview = document.getElementById('statusOverview');
    overview.innerHTML = `
        <div class="status-grid">
            <div class="status-item">
                <label>Online Devices</label>
                <span class="value">${data.online_devices}/${data.total_devices}</span>
            </div>
            <div class="status-item">
                <label>System Load</label>
                <span class="value">${data.system_load.toFixed(2)}</span>
            </div>
            <div class="status-item">
                <label>Memory Usage</label>
                <span class="value">${data.memory_usage}%</span>
            </div>
            <div class="status-item">
                <label>Storage Usage</label>
                <span class="value">${data.storage_usage}%</span>
            </div>
        </div>
        <div class="alerts-section">
            <h4>Active Alerts</h4>
            <div class="alert-list">
                ${formatAlerts(data.alerts)}
            </div>
        </div>
    `;
}

function updateDeviceTable(devices) {
    const tbody = document.getElementById('monitorData');
    tbody.innerHTML = devices.map(device => `
        <tr>
            <td>
                <div class="device-name">${device.name}</div>
                <div class="device-ip">${device.ip_address}</div>
            </td>
            <td>
                <span class="status-badge ${device.status}">${device.status}</span>
            </td>
            <td>
                <div class="network-stats">
                    <div>↑ ${formatNetworkSpeed(device.network_up)}</div>
                    <div>↓ ${formatNetworkSpeed(device.network_down)}</div>
                </div>
            </td>
            <td>
                <div class="progress-bar">
                    <div class="progress" style="width: ${device.cpu_usage}%"></div>
                </div>
                <div class="value">${device.cpu_usage}%</div>
            </td>
            <td>
                <div class="progress-bar">
                    <div class="progress" style="width: ${device.memory_usage}%"></div>
                </div>
                <div class="value">${device.memory_usage}%</div>
            </td>
            <td>${formatLastUpdate(device.last_update)}</td>
        </tr>
    `).join('');
}

function formatAlerts(alerts) {
    if (!alerts || alerts.length === 0) {
        return '<div class="no-alerts">No active alerts</div>';
    }
    
    return alerts.map(alert => `
        <div class="alert-item ${alert.severity}">
            <div class="alert-header">
                <span class="alert-type">${alert.type}</span>
                <span class="alert-time">${formatTime(alert.created_at)}</span>
            </div>
            <div class="alert-message">${alert.message}</div>
        </div>
    `).join('');
}

function formatNetworkSpeed(speed) {
    if (speed < 1024) return `${speed.toFixed(1)} KB/s`;
    return `${(speed/1024).toFixed(1)} MB/s`;
}

function formatLastUpdate(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diff = Math.floor((now - date) / 1000); // seconds

    if (diff < 60) return 'Just now';
    if (diff < 3600) return `${Math.floor(diff/60)}m ago`;
    if (diff < 86400) return `${Math.floor(diff/3600)}h ago`;
    return date.toLocaleDateString();
}

function formatTime(timestamp) {
    return new Date(timestamp).toLocaleTimeString();
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/group-operations.js ===

class GroupOperations {
    constructor() {
        this.init();
    }

    init() {
        this.initDragAndDrop();
        this.loadGroupSettings();
    }

    async loadGroupSettings() {
        try {
            const response = await fetch('/digiplayer/public/api/groups/settings');
            const data = await response.json();
            this.applyGroupSettings(data.settings);
        } catch (error) {
            console.error('Failed to load group settings:', error);
        }
    }

    initDragAndDrop() {
        const containers = document.querySelectorAll('.group-devices');
        containers.forEach(container => {
            new Sortable(container, {
                group: 'shared',
                animation: 150,
                onEnd: (evt) => this.handleDeviceMove(evt)
            });
        });
    }

    async handleDeviceMove(evt) {
        const deviceId = evt.item.dataset.deviceId;
        const targetGroupId = evt.to.dataset.groupId;
        const sourceGroupId = evt.from.dataset.groupId;

        try {
            await fetch('/digiplayer/public/api/groups/move-device', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    device_id: deviceId,
                    target_group_id: targetGroupId,
                    source_group_id: sourceGroupId
                })
            });
        } catch (error) {
            console.error('Failed to move device:', error);
            // Revert the move
            evt.from.appendChild(evt.item);
        }
    }

    // Schedule Management for Groups
    async scheduleGroupContent() {
        const groupId = this.selectedGroup;
        const schedule = {
            playlist_id: document.getElementById('playlistSelect').value,
            start_time: document.getElementById('startTime').value,
            end_time: document.getElementById('endTime').value,
            days: Array.from(document.querySelectorAll('.day-select:checked')).map(cb => cb.value)
        };

        try {
            await fetch('/digiplayer/public/api/groups/schedule', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    group_id: groupId,
                    schedule: schedule
                })
            });
            showNotification('Schedule updated successfully', 'success');
        } catch (error) {
            console.error('Failed to schedule group content:', error);
            showNotification('Failed to update schedule', 'error');
        }
    }

    // Group Monitoring
    async updateGroupStatus() {
        try {
            const response = await fetch('/digiplayer/public/api/groups/status');
            const data = await response.json();
            this.updateGroupStatusUI(data);
        } catch (error) {
            console.error('Failed to update group status:', error);
        }
    }

    updateGroupStatusUI(data) {
        document.getElementById('groupStatusContainer').innerHTML = data.groups.map(group => `
            <div class="group-status-card">
                <h3>${group.name}</h3>
                <div class="status-grid">
                    <div class="status-item">
                        <label>Online Devices</label>
                        <span>${group.online_devices}/${group.total_devices}</span>
                    </div>
                    <div class="status-item">
                        <label>Current Playlist</label>
                        <span>${group.current_playlist || 'None'}</span>
                    </div>
                    <div class="status-item">
                        <label>Last Update</label>
                        <span>${new Date(group.last_update).toLocaleString()}</span>
                    </div>
                </div>
            </div>
        `).join('');
    }
}

// Initialize group operations
const groupOps = new GroupOperations();
setInterval(() => groupOps.updateGroupStatus(), 30000);

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/device-operations.js ===

class DeviceOperations {
    constructor() {
        this.selectedDevices = new Set();
        this.refreshInterval = null;
        this.init();
    }

    init() {
        this.startAutoRefresh();
        this.setupBulkOperations();
        this.setupEventListeners();
        this.loadPlaylists();
    }

    async loadPlaylists() {
        try {
            const response = await fetch('/digiplayer/public/api/playlists/index.php');
            const data = await response.json();
            const playlistSelect = document.getElementById('defaultPlaylist');
            
            if (playlistSelect) {
                const options = data.playlists.map(playlist => 
                    `<option value="${playlist.id}">${playlist.name}</option>`
                ).join('');
                playlistSelect.innerHTML += options;
            }
        } catch (error) {
            console.error('Error loading playlists:', error);
        }
    }

    startAutoRefresh() {
        this.refreshInterval = setInterval(() => {
            if (document.getElementById('devicesList')) {
                this.refreshDeviceStatuses();
            }
        }, 30000);
    }

    async refreshDeviceStatuses() {
        try {
            const response = await fetch('/digiplayer/public/api/devices/status.php');
            if (!response.ok) throw new Error('Failed to fetch device statuses');
            const data = await response.json();
            this.updateDeviceStatuses(data.statuses);
        } catch (error) {
            console.error('Failed to refresh device statuses:', error);
        }
    }

    updateDeviceStatuses(statuses) {
        if (!statuses) return;
        
        statuses.forEach(status => {
            const statusElement = document.querySelector(`[data-id="${status.device_id}"] .status-badge`);
            if (statusElement) {
                statusElement.className = `status-badge ${status.status}`;
                statusElement.textContent = status.status;
            }
        });
    }

    async executeBulkAction(action, params = {}) {
        if (this.selectedDevices.size === 0) {
            showNotification('Please select devices first', 'warning');
            return;
        }

        try {
            let endpoint = '/digiplayer/public/api/devices/bulk-action.php';
            let data = {
                devices: Array.from(this.selectedDevices),
                action: action,
                ...params
            };

            if (action === 'assignGroup') {
                const groupId = await this.promptGroupSelection();
                if (!groupId) return;
                data.group_id = groupId;
            }

            const response = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (!response.ok) throw new Error('Bulk action failed');

            showNotification('Bulk action completed successfully', 'success');
            loadDevices();
            this.selectedDevices.clear();
            this.updateBulkActionsVisibility();
        } catch (error) {
            showNotification('Error executing bulk action: ' + error.message, 'error');
        }
    }

    async promptGroupSelection() {
        return new Promise((resolve) => {
            // You could create a modal for group selection here
            const groupId = prompt('Enter group ID:');
            resolve(groupId);
        });
    }

    updateBulkActionsVisibility() {
        const bulkActions = document.getElementById('bulkActions');
        if (bulkActions) {
            bulkActions.style.display = this.selectedDevices.size > 0 ? 'block' : 'none';
        }
    }
}

// Initialize Device Operations
window.addEventListener('DOMContentLoaded', () => {
    window.deviceOps = new DeviceOperations();
});

// Device Settings Management
async function openDeviceSettings(deviceId) {
    try {
        const response = await fetch(`/digiplayer/public/api/devices/settings.php?device_id=${deviceId}`);
        if (!response.ok) throw new Error('Failed to fetch device settings');
        
        const data = await response.json();
        const settings = data.settings;

        // Populate settings form
        const form = document.getElementById('deviceSettingsForm');
        form.innerHTML = `
            <div class="settings-group">
                <h3>Network Settings</h3>
                <div class="form-group">
                    <label>Network Mode</label>
                    <select name="network_mode">
                        <option value="dhcp" ${settings.network_mode === 'dhcp' ? 'selected' : ''}>DHCP</option>
                        <option value="static" ${settings.network_mode === 'static' ? 'selected' : ''}>Static IP</option>
                    </select>
                </div>
                <div class="form-group" id="staticIpSettings" style="display: ${settings.network_mode === 'static' ? 'block' : 'none'}">
                    <label>Static IP</label>
                    <input type="text" name="static_ip" value="${settings.static_ip || ''}">
                    <label>Subnet Mask</label>
                    <input type="text" name="subnet_mask" value="${settings.subnet_mask || ''}">
                    <label>Gateway</label>
                    <input type="text" name="gateway" value="${settings.gateway || ''}">
                </div>
            </div>
            
            <div class="settings-group">
                <h3>Display Settings</h3>
                <div class="form-group">
                    <label>Screen Orientation</label>
                    <select name="screen_orientation">
                        <option value="landscape" ${settings.screen_orientation === 'landscape' ? 'selected' : ''}>Landscape</option>
                        <option value="portrait" ${settings.screen_orientation === 'portrait' ? 'selected' : ''}>Portrait</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Screen Resolution</label>
                    <select name="screen_resolution">
                        <option value="1920x1080" ${settings.screen_resolution === '1920x1080' ? 'selected' : ''}>1920x1080</option>
                        <option value="1280x720" ${settings.screen_resolution === '1280x720' ? 'selected' : ''}>1280x720</option>
                    </select>
                </div>
            </div>
            
            <div class="settings-group">
                <h3>Content Settings</h3>
                <div class="form-group">
                    <label>Cache Size (MB)</label>
                    <input type="number" name="cache_size" value="${settings.cache_size || 1000}">
                </div>
                <div class="form-group">
                    <label>Content Check Interval (minutes)</label>
                    <input type="number" name="content_check_interval" value="${settings.content_check_interval || 5}">
                </div>
            </div>
            
            <div class="form-actions">
                <button type="submit" class="btn btn-primary">Save Settings</button>
            </div>
        `;

        // Show modal
        document.getElementById('deviceSettingsModal').style.display = 'flex';
        
        // Add event listeners
        form.addEventListener('submit', (e) => saveDeviceSettings(e, deviceId));
        
        // Handle network mode changes
        const networkModeSelect = form.querySelector('[name="network_mode"]');
        networkModeSelect.addEventListener('change', (e) => {
            const staticSettings = document.getElementById('staticIpSettings');
            staticSettings.style.display = e.target.value === 'static' ? 'block' : 'none';
        });

    } catch (error) {
        console.error('Error loading device settings:', error);
        showNotification('Failed to load device settings', 'error');
    }
}

async function saveDeviceSettings(event, deviceId) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const settings = Object.fromEntries(formData.entries());
    
    try {
        const response = await fetch('/digiplayer/public/api/devices/settings.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                device_id: deviceId,
                settings: settings
            })
        });

        if (!response.ok) throw new Error('Failed to save settings');
        
        showNotification('Device settings saved successfully', 'success');
        closeModal('deviceSettingsModal');
        
    } catch (error) {
        console.error('Error saving device settings:', error);
        showNotification('Failed to save device settings', 'error');
    }
}

// Content Synchronization
async function syncDeviceContent(deviceId) {
    try {
        const response = await fetch('/digiplayer/public/api/devices/action.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id: deviceId,
                action: 'updateContent'
            })
        });

        if (!response.ok) throw new Error('Failed to initiate content sync');
        
        showNotification('Content synchronization initiated', 'success');
        
    } catch (error) {
        console.error('Error syncing content:', error);
        showNotification('Failed to sync content', 'error');
    }
}

// Cache Management
async function manageCacheContent(deviceId, action) {
    try {
        const response = await fetch('/digiplayer/public/api/devices/action.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id: deviceId,
                action: action // 'clearCache' or 'validateCache'
            })
        });

        if (!response.ok) throw new Error(`Failed to ${action}`);
        
        showNotification(`Cache ${action} completed`, 'success');
        
    } catch (error) {
        console.error(`Error managing cache:`, error);
        showNotification(`Failed to manage cache`, 'error');
    }
}

// Status Monitoring
class DeviceMonitor {
    constructor(deviceId) {
        this.deviceId = deviceId;
        this.updateInterval = 30000; // 30 seconds
        this.monitoring = false;
    }

    start() {
        if (this.monitoring) return;
        this.monitoring = true;
        this.update();
        this.interval = setInterval(() => this.update(), this.updateInterval);
    }

    stop() {
        if (!this.monitoring) return;
        this.monitoring = false;
        if (this.interval) {
            clearInterval(this.interval);
        }
    }

    async update() {
        try {
            const response = await fetch(`/digiplayer/public/api/devices/status.php?device_id=${this.deviceId}`);
            if (!response.ok) throw new Error('Failed to fetch device status');
            
            const data = await response.json();
            this.updateUI(data);
            
        } catch (error) {
            console.error('Error updating device status:', error);
        }
    }

    updateUI(data) {
        // Update status indicators
        const statusElement = document.querySelector(`[data-id="${this.deviceId}"] .status-badge`);
        if (statusElement) {
            statusElement.className = `status-badge ${data.status}`;
            statusElement.textContent = data.status;
        }

        // Update other metrics if they exist
        if (data.metrics) {
            const cpuElement = document.querySelector(`[data-id="${this.deviceId}"] .cpu-usage`);
            if (cpuElement) {
                cpuElement.textContent = `${data.metrics.cpu_usage}%`;
            }

            const memoryElement = document.querySelector(`[data-id="${this.deviceId}"] .memory-usage`);
            if (memoryElement) {
                memoryElement.textContent = `${data.metrics.memory_usage}%`;
            }
        }
    }
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/auth.js ===

document.getElementById("loginForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch("/api/auth/login", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                email: formData.get("email"),
                password: formData.get("password")
            })
        });
        
        if (response.ok) {
            window.location.href = "/dashboard.php";
        } else {
            alert("Login failed");
        }
    } catch (error) {
        console.error("Login error:", error);
    }
});

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/performance-monitor.js ===

class PerformanceMonitor {
    constructor() {
        this.monitorInterval = 60000;
        this.metrics = {
            cpu: [],
            memory: [],
            network: []
        };
        this.init();
    }

    async init() {
        await this.fetchMetrics();
        setInterval(() => this.fetchMetrics(), this.monitorInterval);
    }

    async fetchMetrics() {
        try {
            const response = await fetch('/digiplayer/public/api/monitoring/system-metrics');
            const data = await response.json();
            this.updateCharts(data);
        } catch (error) {
            console.error('Failed to fetch metrics:', error);
        }
    }

    updateCharts(data) {
        this.updateCPUChart(data.cpu);
        this.updateMemoryChart(data.memory);
        this.updateNetworkChart(data.network);
    }

    updateCPUChart(data) {
        // Chart implementation
    }

    updateMemoryChart(data) {
        // Chart implementation
    }

    updateNetworkChart(data) {
        // Chart implementation
    }
}

new PerformanceMonitor();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/dashboard-widgets.js ===

class DashboardWidgets {
    constructor() {
        this.widgets = new Map();
        this.init();
    }

    init() {
        this.setupWidgets();
        this.loadData();
    }

    setupWidgets() {
        this.addWidget('deviceStatus', {
            title: 'Device Status',
            updateInterval: 30000,
            async getData() {
                const response = await fetch('/digiplayer/public/api/devices/status');
                return await response.json();
            },
            render(data) {
                return `
                    <div class="widget-content">
                        <div class="status-count">
                            <div class="online">${data.online} Online</div>
                            <div class="offline">${data.offline} Offline</div>
                        </div>
                    </div>
                `;
            }
        });

        this.addWidget('storageUsage', {
            title: 'Storage Usage',
            updateInterval: 60000,
            async getData() {
                const response = await fetch('/digiplayer/public/api/storage/status');
                return await response.json();
            },
            render(data) {
                return `
                    <div class="widget-content">
                        <div class="progress-bar">
                            <div class="progress" style="width: ${data.usagePercentage}%"></div>
                        </div>
                        <div class="usage-text">${this.formatBytes(data.used)} / ${this.formatBytes(data.total)}</div>
                    </div>
                `;
            }
        });
    }

    formatBytes(bytes) {
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        if (bytes === 0) return '0 B';
        const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
        return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];
    }
}

new DashboardWidgets();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/device-status.js ===

class DeviceMonitor {
    constructor() {
        this.updateInterval = 30000;
        this.init();
    }

    init() {
        this.loadDeviceStats();
        setInterval(() => this.loadDeviceStats(), this.updateInterval);
    }

    async loadDeviceStats() {
        try {
            const response = await fetch('/digiplayer/public/api/device-stats');
            const stats = await response.json();
            this.updateStats(stats);
        } catch (error) {
            console.error('Failed to load device stats:', error);
        }
    }

    updateStats(stats) {
        this.updateOverview(stats.overview);
        this.updateDetailedStats(stats.details);
    }

    updateOverview(overview) {
        const template = `
            <div class="stat-group">
                <div class="stat-item">
                    <div class="stat-value">${overview.total_devices}</div>
                    <div class="stat-label">Total Devices</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">${overview.online_devices}</div>
                    <div class="stat-label">Online</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">${overview.offline_devices}</div>
                    <div class="stat-label">Offline</div>
                </div>
            </div>
        `;
        document.getElementById('deviceOverview').innerHTML = template;
    }

    updateDetailedStats(details) {
        const template = details.map(device => `
            <div class="device-stat-card">
                <div class="device-header">
                    <h3>${device.name}</h3>
                    <span class="status-badge ${device.status}">${device.status}</span>
                </div>
                <div class="stat-grid">
                    <div class="stat-row">
                        <label>CPU Usage</label>
                        <div class="progress-bar">
                            <div class="progress" style="width: ${device.cpu_usage}%"></div>
                        </div>
                        <span>${device.cpu_usage}%</span>
                    </div>
                    <div class="stat-row">
                        <label>Memory</label>
                        <div class="progress-bar">
                            <div class="progress" style="width: ${device.memory_usage}%"></div>
                        </div>
                        <span>${device.memory_usage}%</span>
                    </div>
                    <div class="stat-row">
                        <label>Storage</label>
                        <div class="progress-bar">
                            <div class="progress" style="width: ${device.storage_usage}%"></div>
                        </div>
                        <span>${device.storage_usage}%</span>
                    </div>
                </div>
                <div class="device-footer">
                    <span>Last Updated: ${new Date(device.last_update).toLocaleString()}</span>
                </div>
            </div>
        `).join('');
        document.getElementById('deviceStats').innerHTML = template;
    }
}

const deviceMonitor = new DeviceMonitor();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/playlist.js ===

let selectedPlaylists = new Set();

function showAddPlaylistModal() {
    document.getElementById('addPlaylistModal').style.display = 'flex';
}

function closeModal() {
    document.getElementById('addPlaylistModal').style.display = 'none';
    document.getElementById('addPlaylistForm').reset();
}

function editPlaylist(id) {
    fetch(`/digiplayer/public/api/playlists/index.php?id=${id}`)
        .then(r => r.json())
        .then(playlist => {
            document.getElementById('playlistName').value = playlist.name;
            document.getElementById('playlistDescription').value = playlist.description || '';
            document.getElementById('addPlaylistForm').dataset.editId = id;
            showAddPlaylistModal();
        });
}

function deletePlaylist(id) {
    if (!confirm('Are you sure you want to delete this playlist?')) return;
    
    fetch('/digiplayer/public/api/playlists/index.php', {
        method: 'DELETE',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({id})
    })
    .then(r => r.json())
    .then(() => loadPlaylists());
}

document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('addPlaylistForm');
    form.onsubmit = async function(e) {
        e.preventDefault();
        
        const data = {
            name: document.getElementById('playlistName').value,
            description: document.getElementById('playlistDescription').value
        };

        try {
            const response = await fetch('/digiplayer/public/api/playlists/index.php', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            });

            if (!response.ok) throw new Error('Server error');

            closeModal();
            loadPlaylists();
        } catch (error) {
            console.error('Error:', error);
        }
    };
});

function loadPlaylists() {
    fetch('/digiplayer/public/api/playlists/index.php')
        .then(r => r.json())
        .then(data => {
            const list = document.getElementById('playlistsList');
            if (!list) return;
            list.innerHTML = data.playlists.map(p => `
                <div class="list-row">
                    <div class="col-name" style="width: 30%;">${p.name}</div>
                    <div class="col-items" style="width: 15%;">0</div>
                    <div class="col-duration" style="width: 15%;">0:00</div>
                    <div class="col-schedule" style="width: 15%;">${p.schedule_type || '-'}</div>
                    <div class="col-status" style="width: 10%;">
                        <span class="badge status-${p.status}">${p.status}</span>
                    </div>
                    <div class="col-actions" style="width: 15%;">
                        <button onclick="editPlaylist(${p.id})" class="btn btn-edit">Edit</button>
                        <button onclick="deletePlaylist(${p.id})" class="btn btn-delete">Delete</button>
                    </div>
                </div>
            `).join('');
        });
}

loadPlaylists();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/main.js ===

document.addEventListener('DOMContentLoaded', function() {
    // Initialize based on current page
    const currentPage = document.body.dataset.page;
    
    switch(currentPage) {
        case 'dashboard':
            loadDashboardData();
            break;
        case 'devices':
            // Devices page is handled by devices.js
            break;
        case 'playlists':
            // Playlists page is handled by playlists.js
            break;
        // Add other page initializations as needed
    }
});

// Dashboard functions
function loadDashboardData() {
    // This will only run on the dashboard page
    console.log('Loading dashboard data...');
    // Add dashboard initialization code here
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/group-permissions.js ===

class GroupPermissions {
    constructor() {
        this.init();
    }

    async init() {
        this.loadPermissions();
        this.setupEventListeners();
    }

    async loadPermissions() {
        const response = await fetch('/digiplayer/public/api/groups/permissions');
        const data = await response.json();
        this.renderPermissions(data.permissions);
    }

    renderPermissions(permissions) {
        const container = document.getElementById('groupPermissions');
        container.innerHTML = `
            <div class="permissions-grid">
                ${this.renderPermissionItems(permissions)}
            </div>
        `;
    }

    renderPermissionItems(permissions) {
        return Object.entries(permissions).map(([key, value]) => `
            <div class="permission-item">
                <label>
                    <input type="checkbox" 
                           value="${key}" 
                           ${value ? 'checked' : ''}
                           onchange="groupPermissions.updatePermission('${key}', this.checked)">
                    ${this.formatPermissionLabel(key)}
                </label>
            </div>
        `).join('');
    }

    async updatePermission(key, value) {
        try {
            await fetch('/digiplayer/public/api/groups/permissions', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    permission: key,
                    value: value
                })
            });
            showNotification('Permission updated successfully', 'success');
        } catch (error) {
            console.error('Failed to update permission:', error);
            showNotification('Failed to update permission', 'error');
        }
    }
}

const groupPermissions = new GroupPermissions();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/alerts.js ===

function updateAlerts() {
    fetch("/digiplayer/public/api/notifications")
        .then(r => r.json())
        .then(data => {
            document.getElementById("activeAlerts").innerHTML = data.notifications
                .map(n => `
                    <div class="alert-card severity-${n.severity}">
                        <div class="alert-header">
                            <span class="device-name">${n.device_name}</span>
                            <span class="alert-time">${formatTime(n.created_at)}</span>
                        </div>
                        <div class="alert-message">${n.message}</div>
                        <div class="alert-actions">
                            ${n.status === 'active' ? 
                                `<button onclick="acknowledgeAlert(${n.id})" class="btn-ack">Acknowledge</button>` : 
                                `<span class="ack-by">Acknowledged by: ${n.acknowledged_by_name}</span>`
                            }
                        </div>
                    </div>
                `).join("");
        });
}

async function acknowledgeAlert(id) {
    try {
        await fetch("/digiplayer/public/api/notifications", {
            method: "PUT",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify({
                action: "acknowledge",
                alert_id: id
            })
        });
        updateAlerts();
    } catch (error) {
        console.error('Failed to acknowledge alert:', error);
    }
}

function formatTime(timestamp) {
    return new Date(timestamp).toLocaleString();
}

updateAlerts();
setInterval(updateAlerts, 30000);

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/login.js ===

document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('loginForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const loginMessage = document.getElementById('loginMessage');

        try {
            const response = await fetch('/digiplayer/public/api/auth/login.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    username: formData.get('username'),
                    password: formData.get('password')
                })
            });

            const data = await response.json();
            
            if (response.ok) {
                window.location.href = 'dashboard.php';
            } else {
                loginMessage.textContent = data.error || 'Login failed';
                loginMessage.className = 'login-message error';
            }
        } catch (error) {
            console.error('Login error:', error);
            loginMessage.textContent = 'Connection error';
            loginMessage.className = 'login-message error';
        }
    });
});

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/groups.js ===

// Group Management Core Functionality
class GroupManager {
    constructor() {
        this.selectedGroups = new Set();
        this.init();
    }

    async init() {
        await this.loadGroups();
        await this.loadAvailableDevices();
        this.setupEventListeners();
        this.initializeDragAndDrop();
    }

    setupEventListeners() {
        // Form submissions
        const groupForm = document.getElementById('groupForm');
        if (groupForm) {
            groupForm.addEventListener('submit', (e) => this.handleGroupSubmit(e));
        }

        const permissionsForm = document.getElementById('permissionsForm');
        if (permissionsForm) {
            permissionsForm.addEventListener('submit', (e) => this.handlePermissionsSubmit(e));
        }
    }

    async loadGroups() {
        try {
            const response = await fetch('/digiplayer/public/api/groups/index.php');
            if (!response.ok) throw new Error('Failed to fetch groups');
            const data = await response.json();
            this.renderGroups(data.groups || []);
        } catch (error) {
            console.error('Error loading groups:', error);
            this.showNotification('Failed to load groups', 'error');
        }
    }

    async loadAvailableDevices() {
        try {
            const response = await fetch('/digiplayer/public/api/devices/index.php');
            if (!response.ok) throw new Error('Failed to fetch devices');
            const data = await response.json();
            this.renderAvailableDevices(data.devices || []);
        } catch (error) {
            console.error('Error loading devices:', error);
            this.showNotification('Failed to load devices', 'error');
        }
    }

    renderGroups(groups) {
        const groupList = document.getElementById('groupList');
        if (!groupList) return;

        groupList.innerHTML = groups.map(group => `
            <div class="group-card" data-group-id="${group.id}">
                <div class="group-header">
                    <h3>${this.escapeHtml(group.name)}</h3>
                    <div class="group-actions">
                        <button onclick="groupManager.editGroup(${group.id})" class="btn-icon" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button onclick="groupManager.manageGroupPermissions(${group.id})" class="btn-icon" title="Permissions">
                            <i class="fas fa-key"></i>
                        </button>
                        <button onclick="groupManager.deleteGroup(${group.id})" class="btn-icon" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="group-description">${this.escapeHtml(group.description || '')}</div>
                <div class="group-devices" ondrop="groupManager.handleDrop(event)" ondragover="groupManager.handleDragOver(event)">
                    ${this.renderGroupDevices(group.devices || [])}
                </div>
            </div>
        `).join('');
    }

    renderAvailableDevices(devices) {
        const devicesList = document.getElementById('availableDevices');
        if (!devicesList) return;

        devicesList.innerHTML = devices.map(device => `
            <div class="device-item" draggable="true" 
                ondragstart="groupManager.handleDragStart(event)" 
                data-device-id="${device.id}">
                <span class="device-name">${this.escapeHtml(device.name)}</span>
                <span class="status-badge ${device.status}">${device.status}</span>
            </div>
        `).join('');
    }

    renderGroupDevices(devices) {
        return devices.map(device => `
            <div class="device-item" draggable="true" 
                ondragstart="groupManager.handleDragStart(event)" 
                data-device-id="${device.id}">
                <span class="device-name">${this.escapeHtml(device.name)}</span>
                <span class="status-badge ${device.status}">${device.status}</span>
            </div>
        `).join('');
    }

    async editGroup(groupId) {
        try {
            const response = await fetch(`/digiplayer/public/api/groups/index.php?id=${groupId}`);
            const data = await response.json();
            
            if (!data || !data.status === 'success') {
                throw new Error('Failed to load group data');
            }
            
            const modalTitle = document.querySelector('#groupModal .modal-header h2');
            if (modalTitle) {
                modalTitle.textContent = 'Edit Group';
            }
            
            // Set form values
            document.getElementById('groupId').value = groupId;
            document.getElementById('groupName').value = data.group?.name || '';
            document.getElementById('groupDescription').value = data.group?.description || '';
            
            document.getElementById('groupModal').style.display = 'flex';
        } catch (error) {
            console.error('Error loading group details:', error);
            this.showNotification('Failed to load group details', 'error');
        }
    }

    async manageGroupPermissions(groupId) {
        try {
            const form = document.getElementById('permissionsForm');
            if (!form) {
                throw new Error('Permissions form not found');
            }
            
            const response = await fetch(`/digiplayer/public/api/groups/index.php?id=${groupId}&permissions=true`);
            const data = await response.json();
            
            if (!data || !data.status === 'success') {
                throw new Error('Failed to load permissions data');
            }
            
            // Set group ID in hidden field
            document.getElementById('permissionsGroupId').value = groupId;
            
            // Reset all checkboxes
            const checkboxes = form.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(checkbox => checkbox.checked = false);
            
            // Set current permissions
            if (data.permissions && Array.isArray(data.permissions)) {
                data.permissions.forEach(permission => {
                    const checkbox = form.querySelector(`input[value="${permission}"]`);
                    if (checkbox) {
                        checkbox.checked = true;
                    }
                });
            }
            
            document.getElementById('permissionsModal').style.display = 'flex';
        } catch (error) {
            console.error('Error loading group permissions:', error);
            this.showNotification('Failed to load group permissions', 'error');
        }
    }

    async deleteGroup(groupId) {
        if (!confirm('Are you sure you want to delete this group?')) return;
        
        try {
            const response = await fetch('/digiplayer/public/api/groups/index.php', {
                method: 'DELETE',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ id: groupId })
            });

            if (!response.ok) throw new Error('Failed to delete group');

            await this.loadGroups();
            this.showNotification('Group deleted successfully', 'success');
        } catch (error) {
            console.error('Error deleting group:', error);
            this.showNotification('Failed to delete group', 'error');
        }
    }

    // Drag and Drop Handlers
    handleDragStart(event) {
        event.dataTransfer.setData('deviceId', event.target.dataset.deviceId);
    }

    handleDragOver(event) {
        event.preventDefault();
        event.currentTarget.classList.add('dragover');
    }

    handleDragLeave(event) {
        event.currentTarget.classList.remove('dragover');
    }

    async handleDrop(event) {
        event.preventDefault();
        const deviceId = event.dataTransfer.getData('deviceId');
        const groupId = event.currentTarget.closest('.group-card').dataset.groupId;
        
        try {
            const response = await fetch('/digiplayer/public/api/device-group/index.php', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    device_id: deviceId,
                    group_id: groupId
                })
            });

            if (!response.ok) throw new Error('Failed to update device group');

            await Promise.all([
                this.loadGroups(),
                this.loadAvailableDevices()
            ]);

            this.showNotification('Device assigned successfully', 'success');
        } catch (error) {
            console.error('Error updating device group:', error);
            this.showNotification('Failed to assign device to group', 'error');
        }
    }

    // Form Handlers
    async handleGroupSubmit(event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        const groupId = document.getElementById('groupId')?.value;

        try {
            const response = await fetch('/digiplayer/public/api/groups/index.php', {
                method: groupId ? 'PUT' : 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    id: groupId || undefined,
                    name: formData.get('name'),
                    description: formData.get('description')
                })
            });

            if (!response.ok) throw new Error('Failed to save group');

            await this.loadGroups();
            this.closeModal('groupModal');
            this.showNotification(
                groupId ? 'Group updated successfully' : 'Group created successfully',
                'success'
            );
            event.target.reset();
        } catch (error) {
            console.error('Error saving group:', error);
            this.showNotification('Failed to save group', 'error');
        }
    }

    async handlePermissionsSubmit(event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        const groupId = document.getElementById('permissionsGroupId')?.value;

        try {
            const response = await fetch('/digiplayer/public/api/groups/index.php', {
                method: 'PUT',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    id: groupId,
                    permissions: Array.from(formData.getAll('permissions[]'))
                })
            });

            if (!response.ok) throw new Error('Failed to update permissions');

            this.closeModal('permissionsModal');
            this.showNotification('Permissions updated successfully', 'success');
        } catch (error) {
            console.error('Error updating permissions:', error);
            this.showNotification('Failed to update permissions', 'error');
        }
    }

    // Utility Methods
    showNotification(message, type = 'info') {
        // You can implement your preferred notification system here
        alert(message);
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'none';
        }
    }

    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
}

// Initialize Group Manager
const groupManager = new GroupManager();
=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/media.js ===

let mediaItems = [];
let selectedFiles = [];
let currentView = 'grid';

document.addEventListener('DOMContentLoaded', function() {
    initializeMediaManager();
    setupEventListeners();
});

function initializeMediaManager() {
    loadMedia();
    setupDropZone();
}

function setupEventListeners() {
    // Search and filters
    document.getElementById('mediaSearch').addEventListener('input', filterMedia);
    document.getElementById('typeFilter').addEventListener('change', filterMedia);
    document.getElementById('sortBy').addEventListener('change', sortMedia);
    
    // File input
    const fileInput = document.getElementById('fileInput');
    fileInput.addEventListener('change', handleFileSelect);
    
    // Drop zone
    const dropZone = document.getElementById('dropZone');
    dropZone.addEventListener('click', () => fileInput.click());
    dropZone.addEventListener('dragover', handleDragOver);
    dropZone.addEventListener('dragleave', handleDragLeave);
    dropZone.addEventListener('drop', handleDrop);
}

async function loadMedia() {
    try {
        const response = await fetch('/api/media/index.php');
        const data = await response.json();
        mediaItems = data.media;
        renderMedia(mediaItems);
    } catch (error) {
        showNotification('Error loading media', 'error');
    }
}

function renderMedia(items) {
    const container = document.getElementById('mediaContainer');
    container.className = currentView === 'grid' ? 'media-grid' : 'media-list';
    
    if (currentView === 'grid') {
        container.innerHTML = items.map(item => `
            <div class="media-item" onclick="previewMedia(${item.id})">
                <div class="media-preview">
                    ${item.type === 'video' 
                        ? `<video src="${item.file_path}" preload="metadata"></video>`
                        : `<img src="${item.file_path}" alt="${item.name}">`
                    }
                    <div class="media-overlay">
                        <span class="media-type">${item.type}</span>
                        ${item.duration ? `<span class="media-duration">${formatDuration(item.duration)}</span>` : ''}
                    </div>
                </div>
                <div class="media-info">
                    <h4>${item.name}</h4>
                    <span class="media-size">${formatSize(item.size)}</span>
                </div>
            </div>
        `).join('');
    } else {
        container.innerHTML = `
            <table class="media-table">
                <thead>
                    <tr>
                        <th>Preview</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Size</th>
                        <th>Duration</th>
                        <th>Uploaded</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    ${items.map(item => `
                        <tr>
                            <td>
                                <div class="table-preview" onclick="previewMedia(${item.id})">
                                    ${item.type === 'video' 
                                        ? `<video src="${item.file_path}" preload="metadata"></video>`
                                        : `<img src="${item.file_path}" alt="${item.name}">`
                                    }
                                </div>
                            </td>
                            <td>${item.name}</td>
                            <td>${item.type}</td>
                            <td>${formatSize(item.size)}</td>
                            <td>${item.duration ? formatDuration(item.duration) : '-'}</td>
                            <td>${formatDate(item.created_at)}</td>
                            <td>
                                <button class="btn-icon" onclick="previewMedia(${item.id})">
                                    <i class="icon-eye"></i>
                                </button>
                                <button class="btn-icon" onclick="deleteMedia(${item.id})">
                                    <i class="icon-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }
}

function handleFileSelect(e) {
    const files = Array.from(e.target.files);
    addFilesToUpload(files);
}

function handleDragOver(e) {
    e.preventDefault();
    e.currentTarget.classList.add('dragover');
}

function handleDragLeave(e) {
    e.currentTarget.classList.remove('dragover');
}

function handleDrop(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('dragover');
    
    const files = Array.from(e.dataTransfer.files);
    addFilesToUpload(files);
}

function addFilesToUpload(files) {
    const validFiles = files.filter(file => {
        const isValid = file.type.startsWith('image/') || file.type.startsWith('video/');
        if (!isValid) {
            showNotification(`Invalid file type: ${file.name}`, 'error');
        }
        return isValid;
    });

    selectedFiles = [...selectedFiles, ...validFiles];
    updateUploadPreview();
}

function updateUploadPreview() {
    const preview = document.getElementById('uploadPreview');
    preview.innerHTML = selectedFiles.map((file, index) => `
        <div class="preview-item">
            ${file.type.startsWith('video') 
                ? '<i class="icon-video"></i>'
                : `<img src="${URL.createObjectURL(file)}" alt="${file.name}">`
            }
            <div class="preview-info">
                <span class="preview-name">${file.name}</span>
                <span class="preview-size">${formatSize(file.size)}</span>
            </div>
            <button class="btn-icon" onclick="removeFile(${index})">
                <i class="icon-x"></i>
            </button>
        </div>
    `).join('');
}

async function startUpload() {
    if (selectedFiles.length === 0) return;
    
    const progress = document.getElementById('uploadProgress');
    const progressBar = progress.querySelector('.progress-fill');
    const progressText = document.getElementById('progressPercent');
    
    progress.style.display = 'block';
    let uploaded = 0;
    
    try {
        for (const file of selectedFiles) {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('name', file.name.replace(/\.[^/.]+$/, ''));
            
            const response = await fetch('/api/media/index.php', {
                method: 'POST',
                body: formData
            });
            
            if (!response.ok) throw new Error(`Failed to upload ${file.name}`);
            
            uploaded++;
            const percent = (uploaded / selectedFiles.length) * 100;
            progressBar.style.width = `${percent}%`;
            progressText.textContent = `${Math.round(percent)}%`;
        }
        
        showNotification('Upload completed successfully', 'success');
        closeModal('uploadModal');
        loadMedia();
    } catch (error) {
        showNotification(error.message, 'error');
    }
    
    // Reset upload state
    selectedFiles = [];
    progress.style.display = 'none';
    progressBar.style.width = '0%';
    document.getElementById('uploadPreview').innerHTML = '';
}

function previewMedia(mediaId) {
    const media = mediaItems.find(item => item.id === mediaId);
    if (!media) return;
    
    const preview = document.getElementById('mediaPreview');
    preview.innerHTML = media.type === 'video'
        ? `<video src="${media.file_path}" controls></video>`
        : `<img src="${media.file_path}" alt="${media.name}">`;
        
    document.getElementById('previewName').textContent = media.name;
    document.getElementById('previewType').textContent = media.type;
    document.getElementById('previewSize').textContent = formatSize(media.size);
    document.getElementById('previewDimensions').textContent = media.resolution || 'N/A';
    document.getElementById('previewDate').textContent = formatDate(media.created_at);
    
    showModal('previewModal');
}

async function deleteMedia(mediaId) {
    if (!confirm('Are you sure you want to delete this media?')) return;
    
    try {
        const response = await fetch('/api/media/index.php', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id: mediaId })
        });
        
        if (response.ok) {
            showNotification('Media deleted successfully', 'success');
            loadMedia();
            closeModal('previewModal');
        } else {
            throw new Error('Failed to delete media');
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

// Utility functions
function formatSize(bytes) {
    if (!bytes) return '0 B';
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;
}

function formatDuration(seconds) {
    if (!seconds) return '0:00';
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    const remainingSeconds = Math.floor(seconds % 60);
    
    if (hours > 0) {
        return `${hours}:${padZero(remainingMinutes)}:${padZero(remainingSeconds)}`;
    }
    return `${remainingMinutes}:${padZero(remainingSeconds)}`;
}

function formatDate(date) {
    return new Date(date).toLocaleString();
}

function padZero(num) {
    return num.toString().padStart(2, '0');
}

function showNotification(message, type = 'info') {
    // Implementation depends on your notification system
    console.log(`${type}: ${message}`);
}

function toggleView(view) {
    currentView = view;
    document.getElementById('gridViewBtn').classList.toggle('
cat > public/assets/js/media.js << 'EOL'
[Previous code remains the same until the toggleView function]

function toggleView(view) {
    currentView = view;
    document.getElementById('gridViewBtn').classList.toggle('active', view === 'grid');
    document.getElementById('listViewBtn').classList.toggle('active', view === 'list');
    renderMedia(mediaItems);
}

function filterMedia() {
    const searchTerm = document.getElementById('mediaSearch').value.toLowerCase();
    const typeFilter = document.getElementById('typeFilter').value;
    
    const filtered = mediaItems.filter(item => {
        const matchesSearch = item.name.toLowerCase().includes(searchTerm);
        const matchesType = !typeFilter || item.type === typeFilter;
        return matchesSearch && matchesType;
    });
    
    renderMedia(filtered);
}

function sortMedia() {
    const sortBy = document.getElementById('sortBy').value;
    
    const sorted = [...mediaItems].sort((a, b) => {
        switch(sortBy) {
            case 'name':
                return a.name.localeCompare(b.name);
            case 'size':
                return b.size - a.size;
            case 'type':
                return a.type.localeCompare(b.type);
            case 'date':
            default:
                return new Date(b.created_at) - new Date(a.created_at);
        }
    });
    
    renderMedia(sorted);
}

function removeFile(index) {
    selectedFiles.splice(index, 1);
    updateUploadPreview();
}

function downloadMedia() {
    const preview = document.getElementById('mediaPreview');
    const mediaElement = preview.querySelector('img, video');
    if (!mediaElement) return;
    
    const link = document.createElement('a');
    link.href = mediaElement.src;
    link.download = document.getElementById('previewName').textContent;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

function showModal(modalId) {
    document.getElementById(modalId).style.display = 'flex';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/schedule.js ===

let selectedSchedule = null;

document.addEventListener('DOMContentLoaded', function() {
    initializeSchedule();
    loadSchedules();
    setupEventListeners();
});

function initializeSchedule() {
    // Load playlists and devices for selects
    loadPlaylistOptions();
    loadDeviceOptions();
}

function loadSchedules() {
    fetch('/digiplayer/public/api/schedules')
        .then(response => response.json())
        .then(data => {
            document.getElementById('scheduleData').innerHTML = data.schedules.map(schedule => `
                <tr>
                    <td>${schedule.playlist_name}</td>
                    <td>${schedule.device_name || schedule.group_name}</td>
                    <td>${formatTime(schedule.start_time)}</td>
                    <td>${formatTime(schedule.end_time)}</td>
                    <td>${formatRepeat(schedule.days_of_week)}</td>
                    <td>${schedule.priority}</td>
                    <td>
                        <button class="btn-icon" onclick="editSchedule(${schedule.id})">
                            <i class="icon-edit"></i>
                        </button>
                        <button class="btn-icon" onclick="deleteSchedule(${schedule.id})">
                            <i class="icon-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        })
        .catch(error => console.error('Error loading schedules:', error));
}

function loadPlaylistOptions() {
    fetch('/digiplayer/public/api/playlists')
        .then(response => response.json())
        .then(data => {
            const select = document.getElementById('playlistSelect');
            select.innerHTML = '<option value="">Select Playlist</option>' +
                data.playlists.map(playlist => 
                    `<option value="${playlist.id}">${playlist.name}</option>`
                ).join('');
        });
}

function loadDeviceOptions() {
    fetch('/digiplayer/public/api/devices')
        .then(response => response.json())
        .then(data => {
            const select = document.getElementById('deviceSelect');
            select.innerHTML = '<option value="">Select Device</option>' +
                data.devices.map(device => 
                    `<option value="${device.id}">${device.name}</option>`
                ).join('');
        });
}

function setupEventListeners() {
    document.getElementById('scheduleForm').addEventListener('submit', handleScheduleSubmit);
}

function handleScheduleSubmit(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const scheduleData = {
        playlist_id: formData.get('playlist_id'),
        device_id: formData.get('device_id'),
        start_time: formData.get('start_time'),
        end_time: formData.get('end_time'),
        days_of_week: Array.from(document.querySelectorAll('input[name="days[]"]:checked'))
            .map(cb => cb.value).join(','),
        priority: formData.get('priority')
    };

    const url = '/digiplayer/public/api/schedules';
    const method = selectedSchedule ? 'PUT' : 'POST';
    if (selectedSchedule) {
        scheduleData.id = selectedSchedule;
    }

    fetch(url, {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(scheduleData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            closeModal('scheduleModal');
            loadSchedules();
            showNotification('Schedule saved successfully', 'success');
        }
    })
    .catch(error => {
        showNotification('Error saving schedule', 'error');
        console.error('Error:', error);
    });
}

function showAddScheduleModal() {
    selectedSchedule = null;
    document.getElementById('scheduleForm').reset();
    document.getElementById('scheduleModal').style.display = 'flex';
}

function editSchedule(id) {
    selectedSchedule = id;
    fetch(`/digiplayer/public/api/schedules/${id}`)
        .then(response => response.json())
        .then(data => {
            const schedule = data.schedule;
            document.getElementById('playlistSelect').value = schedule.playlist_id;
            document.getElementById('deviceSelect').value = schedule.device_id;
            document.getElementById('startTime').value = schedule.start_time;
            document.getElementById('endTime').value = schedule.end_time;
            document.getElementById('priority').value = schedule.priority;
            
            // Set days checkboxes
            const days = schedule.days_of_week.split(',');
            days.forEach(day => {
                document.querySelector(`input[value="${day}"]`).checked = true;
            });
            
            document.getElementById('scheduleModal').style.display = 'flex';
        });
}

function deleteSchedule(id) {
    if (confirm('Are you sure you want to delete this schedule?')) {
        fetch(`/digiplayer/public/api/schedules/${id}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                loadSchedules();
                showNotification('Schedule deleted successfully', 'success');
            }
        })
        .catch(error => {
            showNotification('Error deleting schedule', 'error');
            console.error('Error:', error);
        });
    }
}

function formatTime(time) {
    return new Date('2000-01-01 ' + time).toLocaleTimeString([], { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

function formatRepeat(days) {
    if (days === '*') return 'Daily';
    return days.split(',').join(', ');
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

function showNotification(message, type) {
    // Implementation depends on your notification system
    console.log(`${type}: ${message}`);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/utils.js ===

function formatDuration(seconds) {
    if (!seconds) return '0:00';
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    const remainingSeconds = seconds % 60;
    
    if (hours > 0) {
        return `${hours}:${padZero(remainingMinutes)}:${padZero(remainingSeconds)}`;
    }
    return `${remainingMinutes}:${padZero(remainingSeconds)}`;
}

function formatSize(bytes) {
    if (!bytes) return '0 B';
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;
}

function padZero(num) {
    return num.toString().padStart(2, '0');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/assets/js/sync.js ===

class ContentSync {
    constructor() {
        this.syncInterval = 30000;
        this.connections = new Map();
    }

    initDeviceSync(deviceId) {
        if (this.connections.has(deviceId)) return;
        
        const ws = new WebSocket(`ws://${window.location.hostname}/ws`);
        
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            this.handleSyncEvent(data);
        };
        
        this.connections.set(deviceId, ws);
    }

    handleSyncEvent(data) {
        switch(data.type) {
            case 'media_update':
                loadMedia();
                break;
            case 'playlist_update':
                loadPlaylists();
                break;
            case 'device_update':
                loadDevices();
                break;
        }
    }
}

const sync = new ContentSync();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/media/index.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/MediaController.php';

$controller = new Controllers\MediaController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if(isset($_GET['id'])) {
                $controller->getMediaById($_GET['id']);
            } else {
                $controller->getMedia();
            }
            break;
            
        case 'POST':
            $controller->uploadMedia();
            break;
            
        case 'DELETE':
            $data = json_decode(file_get_contents('php://input'), true);
            if (!isset($data['id'])) {
                $controller->errorResponse('Media ID required', 400);
            }
            $controller->deleteMedia($data['id']);
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Media API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/media/debug.log ===

2024-12-15 23:07:10 - Request method: GET
2024-12-15 23:07:10 - Fetched all media, count: 0
2024-12-15 23:07:11 - Request method: GET
2024-12-15 23:07:11 - Fetched all media, count: 0
2024-12-15 23:07:37 - Request method: GET
2024-12-15 23:07:37 - Fetched all media, count: 0
2024-12-15 23:07:38 - Request method: GET
2024-12-15 23:07:38 - Fetched all media, count: 0
2024-12-15 23:07:46 - Request method: POST
2024-12-15 23:07:46 - Received POST request
2024-12-15 23:07:46 - Received file: bodyfence_2.png, type: image/png
2024-12-15 23:07:46 - File uploaded successfully. Type: image, Resolution: 900x557
2024-12-15 23:07:46 - Inserting into database - Name: bodyfence_2, Type: image, Path: /digiplayer/public/uploads/media/1734296866_bodyfence_2.png
2024-12-15 23:07:46 - Media inserted successfully with ID: 1
2024-12-15 23:07:46 - Request method: GET
2024-12-15 23:07:46 - Fetched all media, count: 1
2024-12-15 23:08:02 - Request method: POST
2024-12-15 23:08:02 - Received POST request
2024-12-15 23:08:02 - Received file: jazz_Qkaart_nov24_1.mp4, type: video/mp4
2024-12-15 23:08:02 - File uploaded successfully. Type: video, Resolution: 
2024-12-15 23:08:02 - Inserting into database - Name: jazz_Qkaart_nov24_1, Type: video, Path: /digiplayer/public/uploads/media/1734296882_jazz_Qkaart_nov24_1.mp4
2024-12-15 23:08:02 - Media inserted successfully with ID: 2
2024-12-15 23:08:02 - Request method: GET
2024-12-15 23:08:02 - Fetched all media, count: 2
2024-12-15 23:09:30 - Request method: GET
2024-12-15 23:09:30 - Fetched all media, count: 2
2024-12-15 23:09:31 - Request method: GET
2024-12-15 23:09:31 - Fetched all media, count: 2
2024-12-15 23:09:32 - Request method: GET
2024-12-15 23:09:32 - Fetched all media, count: 2
2024-12-15 23:09:38 - Request method: DELETE
2024-12-15 23:09:38 - Deleting media ID: 2
2024-12-15 23:09:38 - Deleted file: /www/apache/domains/www.digireklaam.ee/htdocs/digiplayer/public/uploads/media/1734296882_jazz_Qkaart_nov24_1.mp4
2024-12-15 23:09:38 - Media deleted successfully
2024-12-15 23:09:38 - Request method: GET
2024-12-15 23:09:38 - Fetched all media, count: 1
2024-12-15 23:09:52 - Request method: POST
2024-12-15 23:09:52 - Received POST request
2024-12-15 23:09:52 - Received file: jazz_Qkaart_nov24_1.mp4, type: video/mp4
2024-12-15 23:09:52 - File uploaded successfully. Type: video, Resolution: 
2024-12-15 23:09:52 - Inserting into database - Name: jazz_Qkaart_nov24_1, Type: video, Path: /digiplayer/public/uploads/media/1734296992_jazz_Qkaart_nov24_1.mp4
2024-12-15 23:09:52 - Media inserted successfully with ID: 3
2024-12-15 23:09:52 - Request method: GET
2024-12-15 23:09:52 - Fetched all media, count: 2
2024-12-15 23:10:17 - Request method: POST
2024-12-15 23:10:17 - Received POST request
2024-12-15 23:10:17 - Received file: bodyfence_2.png, type: image/png
2024-12-15 23:10:17 - File uploaded successfully. Type: image, Resolution: 900x557
2024-12-15 23:10:17 - Inserting into database - Name: bodyfence_21111, Type: image, Path: /digiplayer/public/uploads/media/1734297017_bodyfence_2.png
2024-12-15 23:10:17 - Media inserted successfully with ID: 4
2024-12-15 23:10:17 - Request method: GET
2024-12-15 23:10:17 - Fetched all media, count: 3
2024-12-15 23:11:32 - Request method: GET
2024-12-15 23:11:32 - Fetched all media, count: 3
2024-12-15 23:11:32 - Request method: GET
2024-12-15 23:11:32 - Fetched all media, count: 3
2024-12-15 23:11:55 - Request method: GET
2024-12-15 23:11:55 - Fetched all media, count: 3
2024-12-15 23:16:43 - Request method: POST
2024-12-15 23:16:43 - Received POST request
2024-12-15 23:16:43 - Received file: bodyfence_2.png, type: image/png
2024-12-15 23:16:43 - File uploaded successfully. Type: image, Resolution: 900x557
2024-12-15 23:16:43 - Inserting into database - Name: bodyfence_2, Type: image, Path: /digiplayer/public/uploads/media/1734297403_bodyfence_2.png
2024-12-15 23:16:43 - Media inserted successfully with ID: 5
2024-12-15 23:16:43 - Request method: GET
2024-12-15 23:16:43 - Fetched all media, count: 4
2024-12-15 23:16:51 - Request method: POST
2024-12-15 23:16:51 - Received POST request
2024-12-15 23:16:51 - Received file: bodyfence_2.png, type: image/png
2024-12-15 23:16:51 - File uploaded successfully. Type: image, Resolution: 900x557
2024-12-15 23:16:51 - Inserting into database - Name: bodyfence_2, Type: image, Path: /digiplayer/public/uploads/media/1734297411_bodyfence_2.png
2024-12-15 23:16:51 - Media inserted successfully with ID: 6
2024-12-15 23:16:51 - Request method: GET
2024-12-15 23:16:51 - Fetched all media, count: 5
2024-12-15 23:19:07 - Request method: GET
2024-12-15 23:19:07 - Fetched all media, count: 5
2024-12-15 23:19:09 - Request method: GET
2024-12-15 23:19:09 - Fetched all media, count: 5
2024-12-15 23:21:13 - Request method: GET
2024-12-15 23:21:13 - Fetched all media, count: 5
2024-12-15 23:21:15 - Request method: GET
2024-12-15 23:21:15 - Fetched all media, count: 5
2024-12-15 23:21:16 - Request method: GET
2024-12-15 23:21:16 - Fetched all media, count: 5
2024-12-15 23:21:16 - Request method: GET
2024-12-15 23:21:16 - Fetched all media, count: 5
2024-12-15 23:21:17 - Request method: GET
2024-12-15 23:21:17 - Fetched all media, count: 5
2024-12-15 23:22:09 - Request method: GET
2024-12-15 23:22:09 - Fetched all media, count: 5
2024-12-15 23:39:48 - Request method: GET
2024-12-15 23:39:48 - Fetched all media, count: 5
2024-12-15 23:39:51 - Request method: GET
2024-12-15 23:39:51 - Fetched all media, count: 5
2024-12-16 01:01:04 - Request method: GET
2024-12-16 01:01:04 - Fetched all media, count: 5
2024-12-16 01:01:21 - Request method: GET
2024-12-16 01:01:21 - Fetched all media, count: 5
2024-12-16 09:44:06 - Request method: GET
2024-12-16 09:44:06 - Fetched all media, count: 5
2024-12-16 09:44:09 - Request method: GET
2024-12-16 09:44:09 - Fetched all media, count: 5
2024-12-16 09:44:10 - Request method: GET
2024-12-16 09:44:10 - Fetched all media, count: 5
2024-12-16 09:44:48 - Request method: GET
2024-12-16 09:44:48 - Fetched all media, count: 5
2024-12-16 09:45:43 - Request method: GET
2024-12-16 09:45:43 - Fetched all media, count: 5
2024-12-16 09:45:46 - Request method: GET
2024-12-16 09:45:46 - Fetched all media, count: 5
2024-12-16 10:27:55 - Request method: GET
2024-12-16 10:27:55 - Fetched all media, count: 5
2024-12-16 10:27:56 - Request method: GET
2024-12-16 10:27:56 - Fetched all media, count: 5
2024-12-16 10:28:17 - Request method: GET
2024-12-16 10:28:17 - Fetched all media, count: 5
2024-12-16 10:28:18 - Request method: GET
2024-12-16 10:28:18 - Fetched all media, count: 5
2024-12-16 10:28:20 - Request method: GET
2024-12-16 10:28:20 - Fetched all media, count: 5
2024-12-16 10:28:44 - Request method: GET
2024-12-16 10:28:44 - Fetched all media, count: 5
2024-12-16 10:28:45 - Request method: GET
2024-12-16 10:28:45 - Fetched all media, count: 5
2024-12-16 10:36:58 - Request method: GET
2024-12-16 10:36:58 - Fetched all media, count: 5
2024-12-16 10:37:03 - Request method: GET
2024-12-16 10:37:03 - Fetched all media, count: 5
2024-12-16 10:38:31 - Request method: GET
2024-12-16 10:38:31 - Fetched all media, count: 5
2024-12-16 10:39:44 - Request method: GET
2024-12-16 10:39:44 - Fetched all media, count: 5
2024-12-16 10:39:46 - Request method: GET
2024-12-16 10:39:46 - Fetched all media, count: 5
2024-12-16 10:44:09 - Request method: GET
2024-12-16 10:44:09 - Fetched all media, count: 5
2024-12-16 10:44:20 - Request method: POST
2024-12-16 10:44:20 - Received POST request
2024-12-16 10:44:20 - Received file: bodyfence_2.png, type: image/png
2024-12-16 10:44:20 - File uploaded successfully. Type: image, Resolution: 900x557
2024-12-16 10:44:20 - Inserting into database - Name: bodyfence_2, Type: image, Path: /digiplayer/public/uploads/media/1734338660_bodyfence_2.png
2024-12-16 10:44:20 - Media inserted successfully with ID: 7
2024-12-16 10:44:20 - Request method: GET
2024-12-16 10:44:20 - Fetched all media, count: 6
2024-12-16 10:44:57 - Request method: GET
2024-12-16 10:44:57 - Fetched all media, count: 6
2024-12-16 10:47:51 - Request method: GET
2024-12-16 10:47:51 - Fetched all media, count: 6
2024-12-16 10:54:48 - Request method: GET
2024-12-16 10:54:48 - Fetched all media, count: 6
2024-12-16 10:59:02 - Request method: GET
2024-12-16 10:59:02 - Fetched all media, count: 6
2024-12-16 10:59:09 - Request method: GET
2024-12-16 10:59:09 - Fetched all media, count: 6
2024-12-16 11:03:36 - Request method: GET
2024-12-16 11:03:36 - Fetched all media, count: 6
2024-12-16 11:04:04 - Request method: GET
2024-12-16 11:04:04 - Fetched all media, count: 6
2024-12-16 11:04:05 - Request method: GET
2024-12-16 11:04:05 - Fetched all media, count: 6
2024-12-16 11:04:16 - Request method: GET
2024-12-16 11:04:16 - Fetched all media, count: 6
2024-12-16 11:04:17 - Request method: GET
2024-12-16 11:04:17 - Fetched all media, count: 6
2024-12-16 11:04:18 - Request method: GET
2024-12-16 11:04:18 - Fetched all media, count: 6
2024-12-16 11:05:33 - Request method: GET
2024-12-16 11:05:33 - Fetched all media, count: 6
2024-12-16 13:07:37 - Request method: GET
2024-12-16 13:07:37 - Fetched all media, count: 6
2024-12-16 13:11:28 - Request method: GET
2024-12-16 13:11:28 - Fetched all media, count: 6
2024-12-16 13:11:36 - Request method: GET
2024-12-16 13:11:36 - Fetched all media, count: 6
2024-12-16 14:23:01 - Request method: GET
2024-12-16 14:23:01 - Fetched all media, count: 6
2024-12-16 14:23:02 - Request method: GET
2024-12-16 14:23:02 - Fetched all media, count: 6
2024-12-16 14:23:57 - Request method: GET
2024-12-16 14:23:57 - Fetched all media, count: 6
2024-12-16 14:24:14 - Request method: GET
2024-12-16 14:24:14 - Fetched all media, count: 6
2024-12-16 14:25:08 - Request method: GET
2024-12-16 14:25:08 - Fetched all media, count: 6
2024-12-16 14:25:17 - Request method: GET
2024-12-16 14:25:17 - Fetched all media, count: 6
2024-12-16 14:29:59 - Request method: GET
2024-12-16 14:29:59 - Fetched all media, count: 6
2024-12-16 14:32:09 - Request method: GET
2024-12-16 14:32:09 - Fetched all media, count: 6
2024-12-16 14:32:40 - Request method: GET
2024-12-16 14:32:40 - Fetched all media, count: 6
2024-12-16 14:32:51 - Request method: GET
2024-12-16 14:32:51 - Fetched all media, count: 6
2024-12-16 14:32:52 - Request method: GET
2024-12-16 14:32:52 - Fetched all media, count: 6
2024-12-16 14:33:05 - Request method: GET
2024-12-16 14:33:05 - Fetched all media, count: 6
2024-12-16 14:33:13 - Request method: GET
2024-12-16 14:33:13 - Fetched all media, count: 6
2024-12-16 14:33:14 - Request method: GET
2024-12-16 14:33:14 - Fetched all media, count: 6
2024-12-16 14:33:26 - Request method: GET
2024-12-16 14:33:26 - Fetched all media, count: 6
2024-12-16 14:33:27 - Request method: GET
2024-12-16 14:33:27 - Fetched all media, count: 6
2024-12-16 14:33:35 - Request method: GET
2024-12-16 14:33:35 - Fetched all media, count: 6
2024-12-16 14:33:35 - Request method: GET
2024-12-16 14:33:35 - Fetched all media, count: 6
2024-12-16 14:33:38 - Request method: GET
2024-12-16 14:33:38 - Fetched all media, count: 6
2024-12-16 14:35:50 - Request method: GET
2024-12-16 14:35:50 - Fetched all media, count: 6
2024-12-16 16:36:25 - Request method: GET
2024-12-16 16:36:25 - Fetched all media, count: 6
2024-12-16 16:41:59 - Request method: GET
2024-12-16 16:41:59 - Fetched all media, count: 6
2024-12-16 16:42:01 - Request method: GET
2024-12-16 16:42:01 - Fetched all media, count: 6
2024-12-16 16:42:01 - Request method: GET
2024-12-16 16:42:01 - Fetched all media, count: 6
2024-12-16 16:42:43 - Request method: GET
2024-12-16 16:42:43 - Fetched all media, count: 6
2024-12-16 16:42:44 - Request method: GET
2024-12-16 16:42:44 - Fetched all media, count: 6
2024-12-16 16:42:45 - Request method: GET
2024-12-16 16:42:45 - Fetched all media, count: 6
2024-12-16 16:42:52 - Request method: GET
2024-12-16 16:42:52 - Fetched all media, count: 6
2024-12-16 16:43:47 - Request method: GET
2024-12-16 16:43:47 - Fetched all media, count: 6
2024-12-16 16:48:44 - Request method: GET
2024-12-16 16:48:44 - Fetched all media, count: 6
2024-12-16 16:50:17 - Request method: GET
2024-12-16 16:50:17 - Fetched all media, count: 6
2024-12-16 16:50:19 - Request method: GET
2024-12-16 16:50:19 - Fetched all media, count: 6
2024-12-16 16:51:14 - Request method: GET
2024-12-16 16:51:14 - Fetched all media, count: 6
2024-12-16 16:52:52 - Request method: GET
2024-12-16 16:52:52 - Fetched all media, count: 6
2024-12-16 16:53:21 - Request method: GET
2024-12-16 16:53:21 - Fetched all media, count: 6

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/media/upload.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/MediaController.php';

$controller = new Controllers\MediaController();

try {
    if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
        $controller->errorResponse('Method not allowed', 405);
    }

    if (!isset($_FILES['file'])) {
        $controller->errorResponse('No file uploaded', 400);
    }

    $controller->uploadMedia($_FILES['file'], $_POST);
} catch (Exception $e) {
    error_log("Media Upload Error: " . $e->getMessage());
    $controller->errorResponse('Upload failed: ' . $e->getMessage());
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/playlist-media/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       $stmt = $db->prepare("INSERT INTO playlist_media (playlist_id, media_id, order_number, duration) VALUES (?, ?, ?, ?)");
       $stmt->execute([$data["playlist_id"], $data["media_id"], $data["order_number"], $data["duration"]]);
       echo json_encode(["status" => "success"]);
       break;
       
   case "GET":
       $playlistId = $_GET["playlist_id"] ?? null;
       if ($playlistId) {
           $stmt = $db->prepare("
               SELECT m.*, pm.duration, pm.order_number 
               FROM media m 
               JOIN playlist_media pm ON m.id = pm.media_id 
               WHERE pm.playlist_id = ? 
               ORDER BY pm.order_number
           ");
           $stmt->execute([$playlistId]);
           echo json_encode(["media" => $stmt->fetchAll(PDO::FETCH_ASSOC)]);
       }
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/analytics/reports.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/AnalyticsController.php';

$controller = new Controllers\AnalyticsController();

try {
    if ($_SERVER['REQUEST_METHOD'] !== 'GET') {
        $controller->errorResponse('Method not allowed', 405);
    }

    $period = $_GET['period'] ?? 'day';
    
    if (isset($_GET['device_id'])) {
        $controller->getDeviceAnalytics($_GET['device_id'], $period);
    } else if (isset($_GET['playlist_id'])) {
        $controller->getPlaylistAnalytics($_GET['playlist_id'], $period);
    } else {
        $controller->getSystemAnalytics($period);
    }
} catch (Exception $e) {
    error_log("Analytics Reports API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/analytics/playback.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/AnalyticsController.php';

$controller = new Controllers\AnalyticsController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'POST':
            $controller->logPlayback();
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Playback Analytics API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/analytics/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "GET":
       $period = $_GET["period"] ?? "day";
       $deviceId = $_GET["device_id"] ?? null;
       
       $sql = "SELECT 
                   d.name as device_name,
                   p.name as playlist_name,
                   m.name as media_name,
                   SUM(da.play_duration) as total_duration,
                   SUM(da.play_count) as total_plays,
                   SUM(da.error_count) as total_errors,
                   DATE(da.recorded_at) as date
               FROM device_analytics da
               JOIN devices d ON da.device_id = d.id
               JOIN playlists p ON da.playlist_id = p.id
               JOIN media m ON da.media_id = m.id";
       
       if ($deviceId) {
           $sql .= " WHERE da.device_id = " . intval($deviceId);
       }
       
       $sql .= " GROUP BY DATE(da.recorded_at), da.device_id";
       
       $analytics = $db->query($sql)->fetchAll(PDO::FETCH_ASSOC);
       echo json_encode(["analytics" => $analytics]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/test/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");
$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

// Test andmebaasi ühendust
try {
   $db->query("SELECT 1");
   $dbStatus = "OK";
} catch (Exception $e) {
   $dbStatus = "Error: " . $e->getMessage();
}

// Test failide õigusi
$uploadDir = "../uploads/media";
$writeTest = is_writable($uploadDir);

echo json_encode([
   "database" => $dbStatus,
   "upload_permissions" => $writeTest,
   "php_version" => PHP_VERSION,
   "memory_limit" => ini_get("memory_limit")
]);

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/groups/operations.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/GroupController.php';

$controller = new Controllers\GroupController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            switch($data['operation']) {
                case 'move_device':
                    $controller->moveDevice($data);
                    break;
                case 'schedule':
                    $controller->scheduleGroupContent($data);
                    break;
                case 'status_update':
                    $controller->updateGroupStatus($data);
                    break;
                default:
                    $controller->errorResponse('Invalid operation', 400);
            }
            break;
            
        case 'GET':
            if (isset($_GET['status'])) {
                $controller->getGroupStatus();
            } else if (isset($_GET['settings'])) {
                $controller->getGroupSettings();
            } else {
                $controller->errorResponse('Invalid request', 400);
            }
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Group Operations API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/groups/index.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';

class GroupsController extends \Controllers\BaseController {
    public function getGroups() {
        try {
            $stmt = $this->db->query("SELECT * FROM groups ORDER BY name");
            $groups = $stmt->fetchAll(\PDO::FETCH_ASSOC);
            
            // Ensure we always return an array even if empty
            $this->jsonResponse(['groups' => $groups ?: []]);
        } catch (\Exception $e) {
            $this->errorResponse("Failed to fetch groups: " . $e->getMessage());
        }
    }
}

$controller = new GroupsController();
$controller->getGroups();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/groups/hierarchy.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/GroupController.php';

$controller = new Controllers\GroupController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            $controller->getHierarchy();
            break;
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Group Hierarchy API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/auth/login.php ===

<?php
header('Content-Type: application/json');

try {
    $db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    $data = json_decode(file_get_contents('php://input'), true);
    
    if (!isset($data['username']) || !isset($data['password'])) {
        throw new Exception('Invalid credentials');
    }

    // For testing purposes, accept the default admin credentials
    if ($data['username'] === 'admin@digiplayer.local' && $data['password'] === 'Digiplayer1-401') {
        session_start();
        $_SESSION['user'] = [
            'id' => 1,
            'name' => 'Admin',
            'email' => 'admin@digiplayer.local',
            'role' => 'admin'
        ];
        echo json_encode(['status' => 'success']);
        exit;
    }
    
    echo json_encode(['error' => 'Invalid credentials']);
    
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => 'Server error occurred']);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/auth/session.php ===

<?php
function checkAuth() {
    session_start();
    
    // Check if user is logged in
    if (!isset($_SESSION['user'])) {
        return false;
    }
    
    // Check session timeout (30 minutes)
    if (isset($_SESSION['last_activity']) && (time() - $_SESSION['last_activity'] > 1800)) {
        session_unset();
        session_destroy();
        return false;
    }
    
    // Update last activity time
    $_SESSION['last_activity'] = time();
    return true;
}

function requireAuth() {
    if (!checkAuth()) {
        header('Content-Type: application/json');
        http_response_code(401);
        echo json_encode(['error' => 'Authentication required']);
        exit;
    }
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/settings/system.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/SettingsController.php';

$controller = new Controllers\SettingsController();

switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
        $controller->getSystemSettings();
        break;
    case 'POST':
        $data = json_decode(file_get_contents('php://input'), true);
        $controller->updateSystemSettings($data);
        break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/settings/index.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/SettingsController.php';

$controller = new Controllers\SettingsController();

switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
        $controller->getSettings();
        break;
    case 'POST':
        $data = json_decode(file_get_contents('php://input'), true);
        $controller->updateSettings($data);
        break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/settings/network.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/SettingsController.php';

$controller = new Controllers\SettingsController();

switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
        $controller->getNetworkSettings();
        break;
    case 'POST':
        $data = json_decode(file_get_contents('php://input'), true);
        $controller->updateNetworkSettings($data);
        break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/monitoring/alerts.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/MonitoringController.php';

$controller = new Controllers\MonitoringController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            $controller->getAlerts();
            break;
            
        case 'POST':
            $controller->createAlert();
            break;
            
        case 'PUT':
            $data = json_decode(file_get_contents('php://input'), true);
            if (!isset($data['alert_id'])) {
                $controller->errorResponse('Alert ID required', 400);
            }
            $controller->acknowledgeAlert($data['alert_id']);
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Alerts API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/monitoring/device-stats.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/MonitoringController.php';

$controller = new Controllers\MonitoringController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if (!isset($_GET['device_id'])) {
                $controller->errorResponse('Device ID required', 400);
            }
            $controller->getDeviceStats($_GET['device_id']);
            break;
            
        case 'POST':
            $controller->updateDeviceStats();
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Device Stats API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/monitoring/system-status.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/MonitoringController.php';

$controller = new Controllers\MonitoringController();

switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
        $controller->getSystemStatus();
        break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/monitoring/status.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/MonitoringController.php';

$controller = new Controllers\MonitoringController();

try {
    if ($_SERVER['REQUEST_METHOD'] !== 'GET') {
        $controller->errorResponse('Method not allowed', 405);
    }
    
    $controller->getSystemStatus();
} catch (Exception $e) {
    error_log("Monitoring Status API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/monitoring/device-metrics.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/MonitoringController.php';

$controller = new Controllers\MonitoringController();

switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
        $deviceId = $_GET['device_id'] ?? null;
        if (!$deviceId) {
            $controller->errorResponse('Device ID required', 400);
        }
        $controller->getDeviceMetrics($deviceId);
        break;
    case 'POST':
        $data = json_decode(file_get_contents('php://input'), true);
        $controller->updateDeviceMetrics($data);
        break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/offline/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "GET":
       $deviceId = $_GET["device_id"];
       $stmt = $db->prepare("
           SELECT type, data, last_sync 
           FROM offline_cache 
           WHERE device_id = ?
       ");
       $stmt->execute([$deviceId]);
       echo json_encode(["cache" => $stmt->fetchAll(PDO::FETCH_ASSOC)]);
       break;

   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       $stmt = $db->prepare("
           INSERT INTO offline_cache (device_id, type, data, last_sync)
           VALUES (?, ?, ?, NOW())
           ON DUPLICATE KEY UPDATE 
               data = VALUES(data),
               last_sync = NOW()
       ");
       $stmt->execute([
           $data["device_id"],
           $data["type"],
           json_encode($data["data"])
       ]);
       echo json_encode(["status" => "success"]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/group-management/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       $action = $data["action"];
       
       switch($action) {
           case "create_group":
               $stmt = $db->prepare("INSERT INTO groups (name, description) VALUES (?, ?)");
               $stmt->execute([$data["name"], $data["description"]]);
               echo json_encode(["id" => $db->lastInsertId()]);
               break;
               
           case "add_devices":
               $stmt = $db->prepare("INSERT INTO device_group (device_id, group_id) VALUES (?, ?)");
               foreach ($data["device_ids"] as $deviceId) {
                   $stmt->execute([$deviceId, $data["group_id"]]);
               }
               echo json_encode(["status" => "success"]);
               break;
       }
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/group-management/bulk-actions.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/GroupController.php';

$controller = new Controllers\GroupController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            switch($data['action']) {
                case 'move_devices':
                    $controller->moveDevicesToGroup($data);
                    break;
                case 'copy_devices':
                    $controller->copyDevicesToGroup($data);
                    break;
                case 'remove_devices':
                    $controller->removeDevicesFromGroup($data);
                    break;
                default:
                    $controller->errorResponse('Invalid action', 400);
            }
            break;
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Group Bulk Actions API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/endpoints/playlists.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/PlaylistController.php';

header('Content-Type: application/json');
session_start();

if (!isset($_SESSION['user'])) {
    http_response_code(401);
    echo json_encode(['error' => 'Unauthorized']);
    exit;
}

$controller = new Controllers\PlaylistController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if(isset($_GET['id']) && isset($_GET['items'])) {
                $controller->getPlaylistItems($_GET['id']);
            } elseif(isset($_GET['id'])) {
                $controller->getPlaylist($_GET['id']);
            } else {
                $controller->getAllPlaylists();
            }
            break;
            
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            if (isset($data['duplicate'])) {
                $controller->duplicatePlaylist($data['duplicate']);
            } else {
                $controller->createPlaylist($data);
            }
            break;
            
        case 'PUT':
            $data = json_decode(file_get_contents('php://input'), true);
            if (isset($data['items'])) {
                $controller->updatePlaylistItems($data['id'], $data['items']);
            } else {
                $controller->updatePlaylist($data);
            }
            break;
            
        case 'DELETE':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->deletePlaylist($data['id']);
            break;
            
        default:
            http_response_code(405);
            echo json_encode(['error' => 'Method not allowed']);
            break;
    }
} catch (Exception $e) {
    error_log($e->getMessage());
    http_response_code(500);
    echo json_encode(['error' => 'Internal server error']);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/endpoints/schedules.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/ScheduleController.php';

header('Content-Type: application/json');
session_start();

if (!isset($_SESSION['user'])) {
    http_response_code(401);
    echo json_encode(['error' => 'Unauthorized']);
    exit;
}

$controller = new Controllers\ScheduleController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if(isset($_GET['device_id'])) {
                $controller->getDeviceSchedules($_GET['device_id']);
            } elseif(isset($_GET['playlist_id'])) {
                $controller->getPlaylistSchedules($_GET['playlist_id']);
            } else {
                $controller->getAllSchedules();
            }
            break;
            
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->createSchedule($data);
            break;
            
        case 'PUT':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->updateSchedule($data);
            break;
            
        case 'DELETE':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->deleteSchedule($data['id']);
            break;
            
        default:
            http_response_code(405);
            echo json_encode(['error' => 'Method not allowed']);
            break;
    }
} catch (Exception $e) {
    error_log($e->getMessage());
    http_response_code(500);
    echo json_encode(['error' => 'Internal server error']);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/endpoints/analytics.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/AnalyticsController.php';

header('Content-Type: application/json');
session_start();

if (!isset($_SESSION['user'])) {
    http_response_code(401);
    echo json_encode(['error' => 'Unauthorized']);
    exit;
}

$controller = new Controllers\AnalyticsController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            switch($_GET['type']) {
                case 'overview':
                    $controller->getSystemOverview();
                    break;
                    
                case 'device-stats':
                    $controller->getDeviceStats(
                        $_GET['device_id'],
                        $_GET['start_date'] ?? null,
                        $_GET['end_date'] ?? null
                    );
                    break;
                    
                case 'content-stats':
                    $controller->getContentStats(
                        $_GET['content_id'] ?? null,
                        $_GET['period'] ?? '7d'
                    );
                    break;
                    
                case 'playback-logs':
                    $controller->getPlaybackLogs([
                        'device_id' => $_GET['device_id'] ?? null,
                        'playlist_id' => $_GET['playlist_id'] ?? null,
                        'start_date' => $_GET['start_date'] ?? null,
                        'end_date' => $_GET['end_date'] ?? null,
                        'page' => $_GET['page'] ?? 1,
                        'limit' => $_GET['limit'] ?? 20
                    ]);
                    break;
                    
                default:
                    http_response_code(400);
                    echo json_encode(['error' => 'Invalid analytics type']);
                    break;
            }
            break;
            
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            switch($data['action']) {
                case 'log-playback':
                    $controller->logPlayback($data);
                    break;
                    
                case 'generate-report':
                    $controller->generateReport($data);
                    break;
                    
                default:
                    http_response_code(400);
                    echo json_encode(['error' => 'Invalid action']);
                    break;
            }
            break;
            
        default:
            http_response_code(405);
            echo json_encode(['error' => 'Method not allowed']);
            break;
    }
} catch (Exception $e) {
    error_log($e->getMessage());
    http_response_code(500);
    echo json_encode(['error' => 'Internal server error']);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/endpoints/devices.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/DeviceController.php';

header('Content-Type: application/json');
session_start();

// Check authentication
if (!isset($_SESSION['user'])) {
    http_response_code(401);
    echo json_encode(['error' => 'Unauthorized']);
    exit;
}

$controller = new Controllers\DeviceController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if(isset($_GET['id'])) {
                $controller->getDevice($_GET['id']);
            } else {
                $controller->getDevices();
            }
            break;
            
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->createDevice($data);
            break;
            
        case 'PUT':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->updateDevice($data);
            break;
            
        case 'DELETE':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->deleteDevice($data['id']);
            break;
            
        default:
            http_response_code(405);
            echo json_encode(['error' => 'Method not allowed']);
            break;
    }
} catch (Exception $e) {
    error_log($e->getMessage());
    http_response_code(500);
    echo json_encode(['error' => 'Internal server error']);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/endpoints/content.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/ContentController.php';

header('Content-Type: application/json');
session_start();

if (!isset($_SESSION['user'])) {
    http_response_code(401);
    echo json_encode(['error' => 'Unauthorized']);
    exit;
}

$controller = new Controllers\ContentController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if(isset($_GET['id'])) {
                $controller->getMedia($_GET['id']);
            } else {
                $params = [
                    'type' => $_GET['type'] ?? null,
                    'page' => $_GET['page'] ?? 1,
                    'limit' => $_GET['limit'] ?? 20
                ];
                $controller->getAllMedia($params);
            }
            break;
            
        case 'POST':
            if (!isset($_FILES['file'])) {
                throw new Exception('No file uploaded');
            }
            $controller->uploadMedia($_FILES['file'], $_POST);
            break;
            
        case 'DELETE':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->deleteMedia($data['id']);
            break;
            
        default:
            http_response_code(405);
            echo json_encode(['error' => 'Method not allowed']);
            break;
    }
} catch (Exception $e) {
    error_log($e->getMessage());
    http_response_code(500);
    echo json_encode(['error' => 'Internal server error']);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/remote/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       $command = $data["command"];
       $deviceId = $data["device_id"];
       
       $stmt = $db->prepare("INSERT INTO device_commands (device_id, command, params) VALUES (?, ?, ?)");
       $stmt->execute([$deviceId, $command, json_encode($data["params"] ?? [])]);
       
       echo json_encode(["status" => "success", "command_id" => $db->lastInsertId()]);
       break;
       
   case "GET":
       $deviceId = $_GET["device_id"];
       $stmt = $db->prepare("SELECT * FROM device_commands WHERE device_id = ? AND status = pending");
       $stmt->execute([$deviceId]);
       echo json_encode(["commands" => $stmt->fetchAll(PDO::FETCH_ASSOC)]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/playlists/media.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/PlaylistController.php';

$controller = new Controllers\PlaylistController();

try {
    $playlistId = $_GET['playlist_id'] ?? null;
    if (!$playlistId) {
        $controller->errorResponse('Playlist ID required', 400);
    }

    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            $controller->getPlaylistMedia($playlistId);
            break;
            
        case 'POST':
            $controller->addMedia($playlistId);
            break;
            
        case 'PUT':
            $controller->updateMediaOrder($playlistId);
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Playlist Media API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/playlists/index.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';

class PlaylistsController extends \Controllers\BaseController {
    public function getPlaylists() {
        try {
            $stmt = $this->db->query("
                SELECT p.*, 
                       COUNT(pm.id) as items_count,
                       SUM(COALESCE(pm.duration, 0)) as total_duration
                FROM playlists p
                LEFT JOIN playlist_media pm ON p.id = pm.playlist_id
                GROUP BY p.id
                ORDER BY p.name
            ");
            
            $playlists = $stmt->fetchAll(\PDO::FETCH_ASSOC);
            
            // Ensure we always return an array even if empty
            $this->jsonResponse(['playlists' => $playlists ?: []]);
        } catch (\Exception $e) {
            $this->errorResponse("Failed to fetch playlists: " . $e->getMessage());
        }
    }
}

$controller = new PlaylistsController();
$controller->getPlaylists();
EOFcat > public/api/playlists/index.php << 'EOF'
<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';

class PlaylistsController extends \Controllers\BaseController {
    public function getPlaylists() {
        try {
            $stmt = $this->db->query("
                SELECT p.*, 
                       COUNT(pm.id) as items_count,
                       SUM(COALESCE(pm.duration, 0)) as total_duration
                FROM playlists p
                LEFT JOIN playlist_media pm ON p.id = pm.playlist_id
                GROUP BY p.id
                ORDER BY p.name
            ");
            
            $playlists = $stmt->fetchAll(\PDO::FETCH_ASSOC);
            
            // Ensure we always return an array even if empty
            $this->jsonResponse(['playlists' => $playlists ?: []]);
        } catch (\Exception $e) {
            $this->errorResponse("Failed to fetch playlists: " . $e->getMessage());
        }
    }
}

$controller = new PlaylistsController();
$controller->getPlaylists();

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/playlists/schedule.php ===

<?php
header('Content-Type: application/json');
error_reporting(E_ALL);
ini_set('display_errors', 1);

try {
    $db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    if ($_SERVER['REQUEST_METHOD'] === 'GET') {
        $id = $_GET['id'];
        $stmt = $db->prepare("SELECT * FROM playlist_schedules WHERE playlist_id = ?");
        $stmt->execute([$id]);
        echo json_encode($stmt->fetch(PDO::FETCH_ASSOC));
    }
    elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $data = json_decode(file_get_contents('php://input'), true);
        $stmt = $db->prepare("REPLACE INTO playlist_schedules 
            (playlist_id, start_date, end_date, start_time, end_time, days) 
            VALUES (?, ?, ?, ?, ?, ?)");
        $stmt->execute([
            $data['playlist_id'],
            $data['start_date'],
            $data['end_date'],
            $data['start_time'],
            $data['end_time'],
            implode(',', $data['days'] ?? [])
        ]);
        echo json_encode(['status' => 'success']);
    }
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/playlists/debug.log ===

2024-12-13 11:54:28 - GET request received
2024-12-13 11:54:36 - POST request received
2024-12-13 11:54:36 - POST data: {"name":"Test Playlist","description":"Test Description"}
2024-12-13 11:59:46 - GET request received
2024-12-13 12:08:42 - Items request started
2024-12-13 12:08:42 - Playlist ID: 1
2024-12-13 12:08:48 - Items request started
2024-12-13 12:08:48 - Playlist ID: 1
2024-12-13 12:14:13 - GET request received
2024-12-13 12:14:26 - GET request received
2024-12-13 12:17:22 - GET request received: []
2024-12-13 12:17:22 - DB Connected
2024-12-13 12:17:22 - Getting all playlists
2024-12-13 12:17:22 - GET request received: {"id":"1","items":"1"}
2024-12-13 12:17:22 - DB Connected
2024-12-13 12:17:22 - Getting items for playlist: 1
2024-12-13 12:17:22 - Error: SQLSTATE[42S22]: Column not found: 1054 Unknown column 'm.name' in 'SELECT'
2024-12-13 12:20:59 - GET request received: []
2024-12-13 12:20:59 - DB Connected
2024-12-13 12:20:59 - Getting all playlists
2024-12-13 12:21:09 - GET request received: {"id":"1","items":"1"}
2024-12-13 12:21:09 - DB Connected
2024-12-13 12:21:09 - Getting items for playlist: 1
2024-12-13 12:21:09 - Error: SQLSTATE[42S22]: Column not found: 1054 Unknown column 'm.name' in 'SELECT'
2024-12-13 12:22:37 - GET request received: {"id":"1","items":"1"}
2024-12-13 12:24:21 - GET request received: {"id":"1","items":"1"}
2024-12-13 15:15:33 - GET request received: {"id":"1","items":"1"}
2024-12-13 15:20:26 - GET request received
2024-12-13 15:20:37 - POST request received
2024-12-13 15:20:37 - POST data: {"name":"Test Playlist 2","description":"Test Description"}
2024-12-13 15:24:57 - GET request received
2024-12-13 15:27:22 - GET request received
2024-12-13 15:34:12 - POST request received
2024-12-13 15:34:12 - POST data: {"name":"Test Playlist 3","description":"Test Description"}
2024-12-13 15:35:07 - GET request received
2024-12-13 21:13:43 - GET request received
2024-12-13 21:13:54 - DELETE request received
2024-12-13 21:13:54 - DELETE data: null
2024-12-13 21:13:54 - GET request received
2024-12-13 22:33:43 - GET request received
2024-12-13 22:33:46 - DELETE request received
2024-12-13 22:33:46 - DELETE data: null
2024-12-13 22:33:46 - GET request received
2024-12-13 22:34:06 - GET request received
2024-12-13 22:34:22 - GET request received
2024-12-13 22:34:22 - GET request received
2024-12-13 22:34:25 - GET request received
2024-12-13 22:39:36 - GET request received
2024-12-13 22:39:37 - GET request received
2024-12-13 22:39:40 - GET request received
2024-12-14 01:25:45 - GET request
2024-12-14 01:25:46 - GET request
2024-12-14 01:25:50 - GET request
2024-12-14 01:25:50 - GET request
2024-12-14 01:25:53 - DELETE request
2024-12-14 01:25:53 - GET request
2024-12-14 01:25:56 - DELETE request
2024-12-14 01:25:56 - GET request
2024-12-14 01:26:02 - GET request
2024-12-14 01:26:02 - GET request
2024-12-14 01:26:06 - GET request
2024-12-14 01:26:06 - GET request
2024-12-14 01:26:12 - GET request
2024-12-14 01:27:14 - DELETE request
2024-12-14 01:27:14 - GET request
2024-12-14 01:28:25 - GET request
2024-12-14 01:28:48 - GET request
2024-12-14 01:28:52 - GET request
2024-12-14 01:28:52 - GET request
2024-12-14 01:28:57 - GET request
2024-12-14 01:29:27 - GET request
2024-12-14 01:29:28 - GET request
2024-12-14 01:29:33 - GET request
2024-12-14 01:29:33 - GET request
2024-12-14 01:31:13 - GET request
2024-12-14 01:31:17 - GET request
2024-12-14 01:31:17 - GET request
2024-12-14 01:31:23 - DELETE request
2024-12-14 01:31:23 - GET request
2024-12-14 01:31:35 - GET request
2024-12-14 01:34:44 - GET request
2024-12-14 01:34:47 - DELETE request
2024-12-14 01:34:47 - GET request
2024-12-14 01:34:59 - GET request
2024-12-14 01:34:59 - GET request
2024-12-14 01:35:21 - GET request
2024-12-14 01:35:25 - DELETE request
2024-12-14 01:35:25 - GET request
2024-12-14 01:35:28 - GET request
2024-12-14 01:35:28 - GET request
2024-12-14 01:37:20 - GET request
2024-12-14 01:37:32 - DELETE request
2024-12-14 01:37:32 - GET request
2024-12-14 01:37:51 - GET request
2024-12-14 01:37:51 - GET request
2024-12-14 01:38:31 - GET request
2024-12-14 01:38:31 - GET request
2024-12-14 01:44:07 - GET request
2024-12-14 01:44:08 - GET request
2024-12-14 01:44:12 - DELETE request
2024-12-14 01:44:12 - GET request
2024-12-14 01:44:15 - GET request
2024-12-14 01:44:15 - GET request
2024-12-14 01:44:21 - DELETE request
2024-12-14 01:44:21 - GET request
2024-12-14 01:44:29 - GET request
2024-12-14 01:44:29 - GET request
2024-12-14 12:42:15 - GET request
2024-12-14 12:42:26 - GET request
2024-12-14 12:42:26 - GET request
2024-12-14 12:42:27 - GET request
2024-12-14 12:42:27 - GET request
2024-12-14 13:25:34 - GET request
2024-12-14 13:25:37 - DELETE request
2024-12-14 13:25:37 - GET request
2024-12-14 13:25:51 - DELETE request
2024-12-14 13:25:51 - GET request
2024-12-14 13:25:55 - DELETE request
2024-12-14 13:25:55 - GET request
2024-12-14 13:26:03 - DELETE request
2024-12-14 13:26:03 - GET request
2024-12-14 16:53:26 - GET request
2024-12-14 16:53:43 - GET request
2024-12-14 16:53:43 - GET request
2024-12-14 16:54:31 - GET request
2024-12-14 16:54:31 - GET request
2024-12-14 18:47:25 - Request method: GET
2024-12-14 18:47:25 - Sent playlists data: 3 items
2024-12-14 18:47:32 - Request method: POST
2024-12-14 18:47:32 - Received POST data: {"name":"sss","description":"sss"}
2024-12-14 18:47:32 - Playlist created with ID: 5
2024-12-14 18:47:32 - Request method: GET
2024-12-14 18:47:32 - Sent playlists data: 4 items
2024-12-14 18:47:51 - Request method: POST
2024-12-14 18:47:51 - Received POST data: {"name":"dddd","description":"ddd"}
2024-12-14 18:47:51 - Playlist created with ID: 6
2024-12-14 18:47:51 - Request method: GET
2024-12-14 18:47:51 - Sent playlists data: 5 items
2024-12-14 18:51:21 - Request method: GET
2024-12-14 18:51:21 - Sent playlists data: 5 items
2024-12-14 18:51:24 - Request method: GET
2024-12-14 18:51:24 - Sent playlists data: 5 items
2024-12-14 18:51:32 - Request method: POST
2024-12-14 18:51:32 - Received POST data: {"name":"ddd12","description":"ddd12"}
2024-12-14 18:51:32 - Playlist created with ID: 7
2024-12-14 18:51:32 - Request method: GET
2024-12-14 18:51:32 - Sent playlists data: 6 items
2024-12-14 18:51:35 - Request method: GET
2024-12-14 18:51:35 - Sent playlists data: 6 items
2024-12-14 18:51:45 - Request method: DELETE
2024-12-14 18:51:45 - Request method: GET
2024-12-14 18:51:45 - Sent playlists data: 6 items
2024-12-14 18:51:48 - Request method: DELETE
2024-12-14 18:51:48 - Request method: GET
2024-12-14 18:51:48 - Sent playlists data: 6 items
2024-12-14 18:51:51 - Request method: DELETE
2024-12-14 18:51:51 - Request method: GET
2024-12-14 18:51:51 - Sent playlists data: 6 items
2024-12-14 18:51:55 - Request method: DELETE
2024-12-14 18:51:55 - Request method: GET
2024-12-14 18:51:55 - Sent playlists data: 6 items
2024-12-14 18:53:37 - Request method: GET
2024-12-14 18:53:37 - Sent playlists data: 6 items
2024-12-14 18:53:41 - Request method: DELETE
2024-12-14 18:53:41 - Playlist deleted: 7
2024-12-14 18:53:41 - Request method: GET
2024-12-14 18:53:41 - Sent playlists data: 5 items
2024-12-14 18:53:45 - Request method: DELETE
2024-12-14 18:53:45 - Playlist deleted: 6
2024-12-14 18:53:45 - Request method: GET
2024-12-14 18:53:45 - Sent playlists data: 4 items
2024-12-14 18:53:53 - Request method: DELETE
2024-12-14 18:53:53 - Playlist deleted: 5
2024-12-14 18:53:53 - Request method: GET
2024-12-14 18:53:53 - Sent playlists data: 3 items
2024-12-14 18:53:57 - Request method: DELETE
2024-12-14 18:53:57 - Playlist deleted: 2
2024-12-14 18:53:57 - Request method: GET
2024-12-14 18:53:57 - Sent playlists data: 2 items
2024-12-14 18:56:11 - Request method: GET
2024-12-14 18:56:11 - Sent playlists data: 2 items
2024-12-14 18:56:13 - Request method: GET
2024-12-14 18:56:13 - Sent playlists data: 2 items
2024-12-14 18:56:20 - Request method: POST
2024-12-14 18:56:20 - Received POST data: {"name":"ss23232","description":"23232"}
2024-12-14 18:56:20 - Playlist created with ID: 8
2024-12-14 18:56:20 - Request method: GET
2024-12-14 18:56:20 - Sent playlists data: 3 items
2024-12-14 18:56:23 - Request method: GET
2024-12-14 18:56:23 - Fetched playlist id: 8
2024-12-14 18:56:28 - Request method: PUT
2024-12-14 18:56:29 - Request method: PUT
2024-12-14 18:56:33 - Request method: DELETE
2024-12-14 18:56:33 - Playlist deleted: 8
2024-12-14 18:56:33 - Request method: GET
2024-12-14 18:56:33 - Sent playlists data: 2 items
2024-12-14 18:57:48 - Request method: GET
2024-12-14 18:57:48 - Fetched playlist id: 3
2024-12-14 18:58:21 - Request method: PUT
2024-12-14 18:59:37 - Request method: GET
2024-12-14 18:59:37 - Sent playlists data: 2 items
2024-12-14 19:14:34 - Request method: GET
2024-12-14 19:14:34 - Sent playlists data: 2 items
2024-12-14 19:14:41 - Request method: GET
2024-12-14 19:14:41 - Sent playlists data: 2 items
2024-12-14 19:14:41 - Request method: GET
2024-12-14 19:14:41 - Sent playlists data: 2 items
2024-12-14 19:14:43 - Request method: GET
2024-12-14 19:14:43 - Sent playlists data: 2 items
2024-12-14 19:14:53 - Request method: GET
2024-12-14 19:14:53 - Sent playlists data: 2 items
2024-12-14 19:14:58 - Request method: GET
2024-12-14 19:14:58 - Sent playlists data: 2 items
2024-12-14 19:16:32 - Request method: GET
2024-12-14 19:16:32 - Sent playlists data: 2 items
2024-12-14 19:16:38 - Request method: POST
2024-12-14 19:16:38 - Received POST data: {"name":"eee","description":"eee"}
2024-12-14 19:16:38 - Playlist created with ID: 9
2024-12-14 19:16:38 - Request method: GET
2024-12-14 19:16:38 - Sent playlists data: 3 items
2024-12-14 19:16:44 - Request method: DELETE
2024-12-14 19:16:44 - Playlist deleted: 9
2024-12-14 19:16:44 - Request method: GET
2024-12-14 19:16:44 - Sent playlists data: 2 items
2024-12-14 19:17:37 - Request method: GET
2024-12-14 19:17:37 - Sent playlists data: 2 items
2024-12-14 19:17:43 - Request method: POST
2024-12-14 19:17:43 - Received POST data: {"name":"dd","description":"dd"}
2024-12-14 19:17:43 - Playlist created with ID: 10
2024-12-14 19:17:43 - Request method: GET
2024-12-14 19:17:43 - Sent playlists data: 3 items
2024-12-14 19:17:52 - Request method: DELETE
2024-12-14 19:17:52 - Playlist deleted: 10
2024-12-14 19:17:52 - Request method: GET
2024-12-14 19:17:52 - Sent playlists data: 2 items
2024-12-14 19:19:29 - Request method: GET
2024-12-14 19:19:29 - Sent playlists data: 2 items
2024-12-14 19:19:38 - Request method: POST
2024-12-14 19:19:38 - Received POST data: {"name":"ddd","description":"dd","media_items":[]}
2024-12-14 19:19:38 - Playlist created with ID: 11
2024-12-14 19:19:38 - Request method: GET
2024-12-14 19:19:38 - Sent playlists data: 3 items
2024-12-14 19:19:42 - Request method: DELETE
2024-12-14 19:19:42 - Playlist deleted: 11
2024-12-14 19:19:42 - Request method: GET
2024-12-14 19:19:42 - Sent playlists data: 2 items
2024-12-15 10:45:07 - Duplicating playlist ID: 23
2024-12-15 10:45:07 - Created duplicate playlist with ID: 24
2024-12-15 10:45:08 - Duplicating playlist ID: 24
2024-12-15 10:45:08 - Created duplicate playlist with ID: 25
2024-12-15 10:45:11 - Duplicating playlist ID: 25
2024-12-15 10:45:11 - Created duplicate playlist with ID: 26
2024-12-15 23:20:58 - Request method: GET
2024-12-15 23:20:58 - Fetched all playlists: 4
2024-12-15 23:21:00 - Request method: GET
2024-12-15 23:21:00 - Fetched all playlists: 4
2024-12-15 23:21:00 - Request method: GET
2024-12-15 23:21:00 - Fetched all playlists: 4
2024-12-15 23:21:03 - Request method: POST
2024-12-15 23:21:03 - Received POST data: {"duplicate":27}
2024-12-15 23:21:03 - Duplicated playlist ID 27
2024-12-15 23:21:03 - Request method: GET
2024-12-15 23:21:03 - Fetched all playlists: 5
2024-12-15 23:21:10 - Request method: POST
2024-12-15 23:21:10 - Received POST data: {"name":"aaa","description":"aaa"}
2024-12-15 23:21:10 - Created new playlist
2024-12-15 23:21:10 - Request method: GET
2024-12-15 23:21:10 - Fetched all playlists: 6
2024-12-16 01:01:06 - Request method: GET
2024-12-16 01:01:06 - Fetched all playlists: 6
2024-12-16 01:01:24 - Request method: GET
2024-12-16 01:01:24 - Fetched all playlists: 6
2024-12-16 09:44:34 - Request method: GET
2024-12-16 09:44:34 - Fetched all playlists: 6
2024-12-16 09:44:38 - Request method: POST
2024-12-16 09:44:38 - Received POST data: {"name":"ss","description":"ss"}
2024-12-16 09:44:38 - Created new playlist
2024-12-16 09:44:38 - Request method: GET
2024-12-16 09:44:38 - Fetched all playlists: 7
2024-12-16 09:44:41 - Request method: DELETE
2024-12-16 09:44:41 - Deleting playlist: 20
2024-12-16 09:44:41 - Request method: GET
2024-12-16 09:44:41 - Fetched all playlists: 6
2024-12-16 09:44:42 - Request method: POST
2024-12-16 09:44:42 - Received POST data: {"duplicate":22}
2024-12-16 09:44:42 - Duplicated playlist ID 22
2024-12-16 09:44:42 - Request method: GET
2024-12-16 09:44:42 - Fetched all playlists: 7
2024-12-16 09:44:44 - Request method: DELETE
2024-12-16 09:44:44 - Deleting playlist: 22
2024-12-16 09:44:44 - Request method: GET
2024-12-16 09:44:44 - Fetched all playlists: 6
2024-12-16 09:44:47 - Request method: DELETE
2024-12-16 09:44:47 - Deleting playlist: 25
2024-12-16 09:44:47 - Request method: GET
2024-12-16 09:44:47 - Fetched all playlists: 5
2024-12-16 10:28:05 - Request method: GET
2024-12-16 10:28:05 - Fetched all playlists: 5
2024-12-16 10:28:09 - Request method: GET
2024-12-16 10:28:09 - Fetched all playlists: 5
2024-12-16 10:28:16 - Request method: GET
2024-12-16 10:28:16 - Fetched all playlists: 5
2024-12-16 10:29:45 - Request method: GET
2024-12-16 10:29:45 - Fetched all playlists: 5
2024-12-16 10:36:57 - Request method: GET
2024-12-16 10:36:57 - Fetched all playlists: 5
2024-12-16 10:36:59 - Request method: GET
2024-12-16 10:36:59 - Fetched all playlists: 5
2024-12-16 10:37:02 - Request method: GET
2024-12-16 10:37:02 - Fetched all playlists: 5
2024-12-16 10:38:30 - Request method: GET
2024-12-16 10:38:30 - Fetched all playlists: 5
2024-12-16 10:38:33 - Request method: GET
2024-12-16 10:38:33 - Fetched all playlists: 5
2024-12-16 10:38:57 - Request method: GET
2024-12-16 10:38:57 - Fetched all playlists: 5
2024-12-16 10:38:58 - Request method: GET
2024-12-16 10:38:58 - Fetched all playlists: 5
2024-12-16 10:39:31 - Request method: GET
2024-12-16 10:39:31 - Fetched all playlists: 5
2024-12-16 10:45:02 - Request method: GET
2024-12-16 10:45:02 - Fetched all playlists: 5
2024-12-16 10:45:03 - Request method: GET
2024-12-16 10:45:03 - Fetched all playlists: 5
2024-12-16 10:45:04 - Request method: GET
2024-12-16 10:45:04 - Fetched all playlists: 5
2024-12-16 10:45:09 - Request method: GET
2024-12-16 10:45:09 - Fetched all playlists: 5
2024-12-16 10:45:11 - Request method: POST
2024-12-16 10:45:11 - Received POST data: {"duplicate":31}
2024-12-16 10:45:11 - Duplicated playlist ID 31
2024-12-16 10:45:11 - Request method: GET
2024-12-16 10:45:11 - Fetched all playlists: 6
2024-12-16 10:45:14 - Request method: DELETE
2024-12-16 10:45:14 - Deleting playlist: 32
2024-12-16 10:45:14 - Request method: GET
2024-12-16 10:45:14 - Fetched all playlists: 5
2024-12-16 10:45:16 - Request method: GET
2024-12-16 10:45:16 - Fetched single playlist
2024-12-16 10:45:18 - Request method: PUT
2024-12-16 10:45:20 - Request method: PUT
2024-12-16 10:45:26 - Request method: GET
2024-12-16 10:45:26 - Fetched single playlist
2024-12-16 10:45:28 - Request method: PUT
2024-12-16 10:47:47 - Request method: GET
2024-12-16 10:47:47 - Fetched all playlists: 5
2024-12-16 10:47:49 - Request method: GET
2024-12-16 10:47:49 - Fetched all playlists: 5
2024-12-16 10:49:24 - Request method: GET
2024-12-16 10:49:24 - Fetched all playlists: 5
2024-12-16 10:54:39 - Request method: GET
2024-12-16 10:54:39 - Fetched all playlists: 5
2024-12-16 10:54:40 - Request method: GET
2024-12-16 10:54:40 - Fetched single playlist
2024-12-16 10:54:44 - Request method: PUT
2024-12-16 10:54:45 - Request method: PUT
2024-12-16 10:59:08 - Request method: GET
2024-12-16 10:59:08 - Fetched all playlists: 5
2024-12-16 10:59:10 - Request method: GET
2024-12-16 10:59:10 - Fetched all playlists: 5
2024-12-16 13:07:36 - Request method: GET
2024-12-16 13:07:36 - Fetched all playlists: 5
2024-12-16 13:07:39 - Request method: GET
2024-12-16 13:07:39 - Fetched all playlists: 5
2024-12-16 13:07:50 - Request method: GET
2024-12-16 13:07:50 - Fetched all playlists: 5
2024-12-16 13:10:10 - Request method: GET
2024-12-16 13:10:10 - Fetched all playlists: 5
2024-12-16 13:10:13 - Request method: GET
2024-12-16 13:10:13 - Fetched all playlists: 5
2024-12-16 13:10:14 - Request method: GET
2024-12-16 13:10:14 - Fetched all playlists: 5
2024-12-16 14:21:54 - Request method: GET
2024-12-16 14:21:54 - Fetched all playlists: 5
2024-12-16 14:22:55 - Request method: GET
2024-12-16 14:22:55 - Fetched all playlists: 5
2024-12-16 14:22:56 - Request method: GET
2024-12-16 14:22:56 - Fetched all playlists: 5
2024-12-16 14:23:09 - Request method: GET
2024-12-16 14:23:09 - Fetched all playlists: 5
2024-12-16 14:23:33 - Request method: GET
2024-12-16 14:23:33 - Fetched all playlists: 5
2024-12-16 14:23:35 - Request method: GET
2024-12-16 14:23:35 - Fetched all playlists: 5
2024-12-16 14:23:37 - Request method: GET
2024-12-16 14:23:37 - Fetched single playlist
2024-12-16 14:23:41 - Request method: PUT
2024-12-16 14:23:42 - Request method: PUT
2024-12-16 14:23:44 - Request method: PUT
2024-12-16 14:23:46 - Request method: POST
2024-12-16 14:23:46 - Received POST data: {"duplicate":30}
2024-12-16 14:23:46 - Duplicated playlist ID 30
2024-12-16 14:23:46 - Request method: GET
2024-12-16 14:23:46 - Fetched all playlists: 6
2024-12-16 14:23:49 - Request method: DELETE
2024-12-16 14:23:49 - Deleting playlist: 31
2024-12-16 14:23:49 - Request method: GET
2024-12-16 14:23:49 - Fetched all playlists: 5
2024-12-16 14:24:18 - Request method: GET
2024-12-16 14:24:18 - Fetched all playlists: 5
2024-12-16 14:24:20 - Request method: GET
2024-12-16 14:24:20 - Fetched all playlists: 5
2024-12-16 14:25:07 - Request method: GET
2024-12-16 14:25:07 - Fetched all playlists: 5
2024-12-16 14:25:14 - Request method: GET
2024-12-16 14:25:14 - Fetched all playlists: 5
2024-12-16 14:26:38 - Request method: GET
2024-12-16 14:26:38 - Fetched all playlists: 5
2024-12-16 14:27:47 - Request method: GET
2024-12-16 14:27:47 - Fetched all playlists: 5
2024-12-16 14:29:01 - Request method: GET
2024-12-16 14:29:01 - Fetched all playlists: 5
2024-12-16 14:29:02 - Request method: GET
2024-12-16 14:29:02 - Fetched all playlists: 5
2024-12-16 14:29:56 - Request method: GET
2024-12-16 14:29:56 - Fetched all playlists: 5
2024-12-16 14:29:58 - Request method: GET
2024-12-16 14:29:58 - Fetched all playlists: 5
2024-12-16 14:32:08 - Request method: GET
2024-12-16 14:32:08 - Fetched all playlists: 5
2024-12-16 14:32:11 - Request method: GET
2024-12-16 14:32:11 - Fetched all playlists: 5
2024-12-16 14:32:38 - Request method: GET
2024-12-16 14:32:38 - Fetched all playlists: 5
2024-12-16 14:33:37 - Request method: GET
2024-12-16 14:33:37 - Fetched all playlists: 5
2024-12-16 14:33:38 - Request method: GET
2024-12-16 14:33:38 - Fetched all playlists: 5
2024-12-16 14:33:48 - Request method: GET
2024-12-16 14:33:48 - Fetched all playlists: 5
2024-12-16 14:33:49 - Request method: GET
2024-12-16 14:33:49 - Fetched all playlists: 5
2024-12-16 14:33:59 - Request method: GET
2024-12-16 14:33:59 - Fetched all playlists: 5
2024-12-16 14:34:07 - Request method: GET
2024-12-16 14:34:07 - Fetched all playlists: 5
2024-12-16 14:34:08 - Request method: GET
2024-12-16 14:34:08 - Fetched all playlists: 5
2024-12-16 14:34:17 - Request method: GET
2024-12-16 14:34:17 - Fetched all playlists: 5
2024-12-16 14:34:18 - Request method: GET
2024-12-16 14:34:18 - Fetched all playlists: 5
2024-12-16 14:34:19 - Request method: GET
2024-12-16 14:34:19 - Fetched all playlists: 5
2024-12-16 14:34:39 - Request method: GET
2024-12-16 14:34:39 - Fetched all playlists: 5
2024-12-16 14:34:40 - Request method: GET
2024-12-16 14:34:40 - Fetched all playlists: 5
2024-12-16 14:34:48 - Request method: GET
2024-12-16 14:34:48 - Fetched all playlists: 5
2024-12-16 14:34:49 - Request method: GET
2024-12-16 14:34:49 - Fetched all playlists: 5
2024-12-16 14:34:58 - Request method: GET
2024-12-16 14:34:58 - Fetched all playlists: 5
2024-12-16 14:35:06 - Request method: GET
2024-12-16 14:35:06 - Fetched all playlists: 5
2024-12-16 14:35:18 - Request method: GET
2024-12-16 14:35:18 - Fetched all playlists: 5
2024-12-16 14:35:19 - Request method: GET
2024-12-16 14:35:19 - Fetched all playlists: 5
2024-12-16 14:35:27 - Request method: GET
2024-12-16 14:35:27 - Fetched all playlists: 5
2024-12-16 14:35:29 - Request method: GET
2024-12-16 14:35:29 - Fetched all playlists: 5
2024-12-16 14:35:38 - Request method: GET
2024-12-16 14:35:38 - Fetched all playlists: 5
2024-12-16 14:35:38 - Request method: GET
2024-12-16 14:35:38 - Fetched all playlists: 5
2024-12-16 14:35:47 - Request method: GET
2024-12-16 14:35:47 - Fetched all playlists: 5
2024-12-16 14:35:48 - Request method: GET
2024-12-16 14:35:48 - Fetched all playlists: 5
2024-12-16 14:35:53 - Request method: GET
2024-12-16 14:35:53 - Fetched all playlists: 5
2024-12-16 14:36:02 - Request method: GET
2024-12-16 14:36:02 - Fetched all playlists: 5
2024-12-16 14:36:03 - Request method: GET
2024-12-16 14:36:03 - Fetched all playlists: 5
2024-12-16 16:36:24 - Request method: GET
2024-12-16 16:36:24 - Fetched all playlists: 5
2024-12-16 16:36:27 - Request method: GET
2024-12-16 16:36:27 - Fetched all playlists: 5
2024-12-16 16:40:38 - Request method: GET
2024-12-16 16:40:38 - Fetched all playlists: 5
2024-12-16 16:40:39 - Request method: GET
2024-12-16 16:40:39 - Fetched all playlists: 5
2024-12-16 16:40:40 - Request method: GET
2024-12-16 16:40:40 - Fetched all playlists: 5
2024-12-16 16:40:41 - Request method: GET
2024-12-16 16:40:41 - Fetched all playlists: 5
2024-12-16 16:41:57 - Request method: GET
2024-12-16 16:41:57 - Fetched all playlists: 5
2024-12-16 16:42:53 - Request method: GET
2024-12-16 16:42:53 - Fetched all playlists: 5
2024-12-16 16:43:50 - Request method: GET
2024-12-16 16:43:50 - Fetched all playlists: 5
2024-12-16 16:44:05 - Request method: GET
2024-12-16 16:44:05 - Fetched all playlists: 5
2024-12-16 16:44:13 - Request method: GET
2024-12-16 16:44:13 - Fetched all playlists: 5
2024-12-16 16:47:06 - Request method: GET
2024-12-16 16:47:06 - Fetched all playlists: 5
2024-12-16 16:47:07 - Request method: GET
2024-12-16 16:47:07 - Fetched all playlists: 5
2024-12-16 16:47:24 - Request method: GET
2024-12-16 16:47:24 - Fetched all playlists: 5
2024-12-16 16:48:43 - Request method: GET
2024-12-16 16:48:43 - Fetched all playlists: 5
2024-12-16 16:50:10 - Request method: GET
2024-12-16 16:50:10 - Fetched all playlists: 5
2024-12-16 16:50:11 - Request method: GET
2024-12-16 16:50:11 - Fetched all playlists: 5
2024-12-16 16:50:15 - Request method: GET
2024-12-16 16:50:15 - Fetched all playlists: 5
2024-12-16 16:50:17 - Request method: GET
2024-12-16 16:50:17 - Fetched all playlists: 5
2024-12-16 16:51:15 - Request method: GET
2024-12-16 16:51:15 - Fetched all playlists: 5
2024-12-16 16:51:17 - Request method: GET
2024-12-16 16:51:17 - Fetched all playlists: 5
2024-12-16 16:52:54 - Request method: GET
2024-12-16 16:52:54 - Fetched all playlists: 5
2024-12-16 16:53:20 - Request method: GET
2024-12-16 16:53:20 - Fetched all playlists: 5
2024-12-16 16:53:21 - Request method: GET
2024-12-16 16:53:21 - Fetched all playlists: 5
2024-12-16 16:53:23 - Request method: GET
2024-12-16 16:53:23 - Fetched all playlists: 5
2024-12-16 16:53:40 - Request method: GET
2024-12-16 16:53:40 - Fetched all playlists: 5
2024-12-16 20:20:17 - Request method: GET
2024-12-16 20:20:17 - Fetched playlists: 5
2024-12-16 20:20:18 - Request method: GET
2024-12-16 20:20:18 - Fetched playlists: 5
2024-12-16 20:20:23 - Request method: POST
2024-12-16 20:20:23 - Received POST data: {"name":"sss","description":"ss"}
2024-12-16 20:20:23 - Created new playlist with ID: 34
2024-12-16 20:20:23 - Request method: GET
2024-12-16 20:20:23 - Fetched playlists: 6
2024-12-16 20:22:16 - Request method: GET
2024-12-16 20:22:16 - Fetched playlists: 6
2024-12-16 20:22:18 - Request method: GET
2024-12-16 20:22:18 - Fetched playlists: 6
2024-12-16 20:22:20 - Request method: POST
2024-12-16 20:22:20 - Received POST data: {"name":"undefined","description":"sss"}
2024-12-16 20:22:20 - Created new playlist with ID: 35
2024-12-16 20:22:20 - Request method: GET
2024-12-16 20:22:20 - Fetched playlists: 7
2024-12-16 20:22:25 - Request method: DELETE
2024-12-16 20:22:25 - Error: Invalid request method
2024-12-16 20:22:25 - Request method: GET
2024-12-16 20:22:25 - Fetched playlists: 7
2024-12-16 20:22:28 - Request method: DELETE
2024-12-16 20:22:28 - Error: Invalid request method
2024-12-16 20:22:28 - Request method: GET
2024-12-16 20:22:28 - Fetched playlists: 7
2024-12-16 20:22:31 - Request method: DELETE
2024-12-16 20:22:31 - Error: Invalid request method
2024-12-16 20:22:31 - Request method: GET
2024-12-16 20:22:31 - Fetched playlists: 7
2024-12-16 20:22:36 - Request method: GET
2024-12-16 20:22:36 - Fetched playlists: 7
2024-12-16 20:22:38 - Request method: GET
2024-12-16 20:22:38 - Fetched playlists: 7
2024-12-16 20:22:41 - Request method: POST
2024-12-16 20:22:41 - Received POST data: {"name":"undefined","description":"ss"}
2024-12-16 20:22:41 - Created new playlist with ID: 36
2024-12-16 20:22:41 - Request method: GET
2024-12-16 20:22:41 - Fetched playlists: 8
2024-12-16 20:22:47 - Request method: GET
2024-12-16 20:22:47 - Fetched playlists: 8
2024-12-16 20:22:54 - Request method: POST
2024-12-16 20:22:54 - Received POST data: {"name":"hoppppaaa","description":""}
2024-12-16 20:22:54 - Created new playlist with ID: 37
2024-12-16 20:22:54 - Request method: GET
2024-12-16 20:22:54 - Fetched playlists: 9
2024-12-16 20:22:59 - Request method: DELETE
2024-12-16 20:22:59 - Error: Invalid request method
2024-12-16 20:22:59 - Request method: GET
2024-12-16 20:22:59 - Fetched playlists: 9
2024-12-16 20:23:47 - Request method: DELETE
2024-12-16 20:23:47 - Error: Invalid request method
2024-12-16 20:23:47 - Request method: GET
2024-12-16 20:23:47 - Fetched playlists: 9

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/network-stats/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");
$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "GET":
       $deviceId = $_GET["device_id"];
       $stmt = $db->prepare("
           SELECT * FROM network_stats 
           WHERE device_id = ? 
           ORDER BY recorded_at DESC 
           LIMIT 100
       ");
       $stmt->execute([$deviceId]);
       echo json_encode(["stats" => $stmt->fetchAll(PDO::FETCH_ASSOC)]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/reports/schedule.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/ReportingController.php';

$controller = new Controllers\ReportingController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'POST':
            $controller->scheduleReport();
            break;
            
        case 'GET':
            $controller->getScheduledReports();
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Report Scheduling API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/reports/generate.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/ReportingController.php';

$controller = new Controllers\ReportingController();

switch ($_SERVER['REQUEST_METHOD']) {
    case 'POST':
        $data = json_decode(file_get_contents('php://input'), true);
        $controller->generateReport($data);
        break;
    case 'GET':
        $controller->getReportsList();
        break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/device-stats/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       $stmt = $db->prepare("
           INSERT INTO device_stats (device_id, cpu_usage, memory_usage, temperature)
           VALUES (?, ?, ?, ?)
       ");
       $stmt->execute([
           $data["device_id"],
           $data["cpu_usage"],
           $data["memory_usage"],
           $data["temperature"]
       ]);
       echo json_encode(["status" => "success"]);
       break;
       
   case "GET":
       $deviceId = $_GET["device_id"] ?? null;
       if ($deviceId) {
           $stmt = $db->prepare("
               SELECT * FROM device_stats 
               WHERE device_id = ? 
               ORDER BY created_at DESC 
               LIMIT 100
           ");
           $stmt->execute([$deviceId]);
           echo json_encode(["stats" => $stmt->fetchAll(PDO::FETCH_ASSOC)]);
       }
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/users/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");
$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "GET":
       $users = $db->query("
           SELECT u.*, r.name as role_name 
           FROM users u 
           JOIN user_roles r ON u.role_id = r.id
       ")->fetchAll(PDO::FETCH_ASSOC);
       echo json_encode(["users" => $users]);
       break;

   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       $stmt = $db->prepare("
           INSERT INTO users (email, password, name, role_id)
           VALUES (?, ?, ?, ?)
       ");
       $stmt->execute([
           $data["email"],
           password_hash($data["password"], PASSWORD_DEFAULT),
           $data["name"],
           $data["role_id"]
       ]);
       echo json_encode(["status" => "success"]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/device-group/index.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/GroupController.php';

$controller = new Controllers\GroupController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'POST':
            $controller->addDeviceToGroup();
            break;
            
        case 'DELETE':
            $controller->removeDeviceFromGroup();
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Device-Group API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/test.php ===

<?php
header('Content-Type: application/json');
echo json_encode(['status' => 'API is working']);

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/locations/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");
$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "GET":
       $locations = $db->query("
           SELECT dl.*, d.name as device_name, d.status
           FROM device_locations dl
           JOIN devices d ON dl.device_id = d.id
       ")->fetchAll(PDO::FETCH_ASSOC);
       echo json_encode(["locations" => $locations]);
       break;

   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       $stmt = $db->prepare("
           INSERT INTO device_locations (device_id, location_name, floor, coordinates)
           VALUES (?, ?, ?, ?)
       ");
       $stmt->execute([
           $data["device_id"],
           $data["location_name"],
           $data["floor"],
           json_encode($data["coordinates"])
       ]);
       echo json_encode(["status" => "success"]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/devices/settings.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/DeviceController.php';

$controller = new Controllers\DeviceController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if (!isset($_GET['device_id'])) {
                $controller->errorResponse('Device ID required', 400);
            }
            $controller->getDeviceSettings($_GET['device_id']);
            break;
            
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->updateDeviceSettings($data);
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Device Settings API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/devices/action ===

<?php
header('Content-Type: application/json');

$logFile = __DIR__ . '/debug.log';
file_put_contents($logFile, date('Y-m-d H:i:s') . " - Device action request received\n", FILE_APPEND);

try {
   if ($_SERVER['REQUEST_METHOD'] === 'POST') {
       $data = json_decode(file_get_contents('php://input'), true);
       $deviceId = $data['id'];
       $action = $data['action'];
       
       // Log the action request
       file_put_contents($logFile, date('Y-m-d H:i:s') . " - Action: $action for device: $deviceId\n", FILE_APPEND);
       
       switch ($action) {
           case 'reboot':
               // Execute reboot command via SSH
               $response = ['status' => 'success', 'message' => 'Device reboot initiated'];
               break;
               
           case 'shutdown':
               // Execute shutdown command via SSH
               $response = ['status' => 'success', 'message' => 'Device shutdown initiated'];
               break;
               
           case 'start':
               // Execute wake-on-lan or similar
               $response = ['status' => 'success', 'message' => 'Device startup initiated'];
               break;
               
           default:
               throw new Exception("Unknown action: $action");
       }
       
       echo json_encode($response);
   }
} catch (Exception $e) {
   file_put_contents($logFile, date('Y-m-d H:i:s') . " - Error: " . $e->getMessage() . "\n", FILE_APPEND);
   http_response_code(500);
   echo json_encode(['error' => $e->getMessage()]);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/devices/bulk-action.php ===

<?php
header('Content-Type: application/json');

try {
    $db = new PDO(
        "mysql:host=localhost;dbname=vhost15998s0",
        "vhost15998s0",
        "Digiplayer1-401",
        [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
    );

    $data = json_decode(file_get_contents('php://input'), true);
    
    if (!isset($data['devices']) || !isset($data['action'])) {
        throw new Exception('Missing required parameters');
    }

    $db->beginTransaction();

    foreach ($data['devices'] as $deviceId) {
        switch ($data['action']) {
            case 'restart':
                // Queue restart command
                $stmt = $db->prepare("
                    INSERT INTO scheduled_commands (device_id, command, status)
                    VALUES (?, 'restart', 'pending')
                ");
                $stmt->execute([$deviceId]);
                break;

            case 'update':
                // Queue update command
                $stmt = $db->prepare("
                    INSERT INTO scheduled_commands (device_id, command, status)
                    VALUES (?, 'update', 'pending')
                ");
                $stmt->execute([$deviceId]);
                break;

            case 'change_group':
                if (!isset($data['group_id'])) {
                    throw new Exception('Group ID required for group change');
                }
                $stmt = $db->prepare("
                    UPDATE device_groups 
                    SET group_id = ? 
                    WHERE device_id = ?
                ");
                $stmt->execute([$data['group_id'], $deviceId]);
                break;
        }
    }

    $db->commit();
    echo json_encode(['status' => 'success']);

} catch (Exception $e) {
    if (isset($db)) {
        $db->rollBack();
    }
    http_response_code(400);
    echo json_encode(['error' => $e->getMessage()]);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/devices/index.php ===

<?php
header('Content-Type: application/json');
error_reporting(E_ALL);
ini_set('display_errors', 1);

try {
    $db = new PDO(
        "mysql:host=localhost;dbname=vhost15998s0",
        "vhost15998s0",
        "Digiplayer1-401",
        [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
    );

    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if(isset($_GET['id'])) {
                $stmt = $db->prepare("SELECT * FROM devices WHERE id = ?");
                $stmt->execute([$_GET['id']]);
                $device = $stmt->fetch(PDO::FETCH_ASSOC);
                
                if (!$device) {
                    throw new Exception('Device not found', 404);
                }
                
                echo json_encode(['device' => $device]);
            } else {
                $sql = "SELECT id, name, status, ip_address, last_seen, created_at 
                        FROM devices 
                        ORDER BY created_at DESC";
                
                $stmt = $db->query($sql);
                $devices = $stmt->fetchAll(PDO::FETCH_ASSOC);
                
                echo json_encode(['devices' => $devices]);
            }
            break;
            
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            
            if (!isset($data['name']) || !isset($data['ip_address'])) {
                throw new Exception('Name and IP address are required');
            }
            
            $stmt = $db->prepare("
                INSERT INTO devices (name, ip_address, status)
                VALUES (?, ?, 'pending')
            ");
            
            $stmt->execute([$data['name'], $data['ip_address']]);
            
            echo json_encode([
                'status' => 'success',
                'id' => $db->lastInsertId()
            ]);
            break;
            
        case 'PUT':
            $data = json_decode(file_get_contents('php://input'), true);
            
            if (!isset($data['id']) || !isset($data['name']) || !isset($data['ip_address'])) {
                throw new Exception('ID, name and IP address are required');
            }
            
            $stmt = $db->prepare("
                UPDATE devices 
                SET name = ?,
                    ip_address = ?,
                    status = ?
                WHERE id = ?
            ");
            
            $stmt->execute([
                $data['name'],
                $data['ip_address'],
                $data['status'] ?? 'pending',
                $data['id']
            ]);
            
            echo json_encode(['status' => 'success']);
            break;
            
        case 'DELETE':
            $data = json_decode(file_get_contents('php://input'), true);
            
            if (!isset($data['id'])) {
                throw new Exception('Device ID required');
            }
            
            $stmt = $db->prepare("DELETE FROM devices WHERE id = ?");
            $stmt->execute([$data['id']]);
            
            echo json_encode(['status' => 'success']);
            break;
            
        default:
            throw new Exception('Method not allowed');
    }
} catch (Exception $e) {
    error_log("Error in devices/index.php: " . $e->getMessage());
    http_response_code($e->getCode() ?: 400);
    echo json_encode(['error' => $e->getMessage()]);
}
?>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/devices/status.php ===

<?php
header('Content-Type: application/json');
error_reporting(E_ALL);
ini_set('display_errors', 1);

try {
    $db = new PDO(
        "mysql:host=localhost;dbname=vhost15998s0",
        "vhost15998s0",
        "Digiplayer1-401",
        [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
    );

    $stmt = $db->query("
        SELECT d.id, d.name, d.ip_address, d.created_at, d.status 
        FROM devices d 
        ORDER BY d.created_at DESC
    ");

    $devices = $stmt->fetchAll(PDO::FETCH_ASSOC);
    echo json_encode(['devices' => $devices]);

} catch (Exception $e) {
    error_log("Status API Error: " . $e->getMessage());
    http_response_code(500);
    echo json_encode(['error' => $e->getMessage()]);
}
?>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/devices/action.php ===

<?php
header('Content-Type: application/json');

try {
    $db = new PDO(
        "mysql:host=localhost;dbname=vhost15998s0",
        "vhost15998s0",
        "Digiplayer1-401",
        [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]
    );

    $data = json_decode(file_get_contents('php://input'), true);
    
    if (!isset($data['id']) || !isset($data['action'])) {
        throw new Exception('Device ID and action are required');
    }

    // Verify device exists
    $stmt = $db->prepare("SELECT id FROM devices WHERE id = ?");
    $stmt->execute([$data['id']]);
    if (!$stmt->fetch()) {
        throw new Exception('Device not found');
    }

    // Handle different actions
    switch($data['action']) {
        case 'softRestart':
        case 'hardRestart':
            $stmt = $db->prepare("
                INSERT INTO device_commands (device_id, command, parameters, status)
                VALUES (?, 'restart', ?, 'pending')
            ");
            $stmt->execute([
                $data['id'],
                json_encode(['type' => $data['action'] === 'softRestart' ? 'soft' : 'hard'])
            ]);
            break;

        case 'updateContent':
            $stmt = $db->prepare("
                INSERT INTO sync_queue (device_id, action, priority, status)
                VALUES (?, 'content_sync', 1, 'pending')
            ");
            $stmt->execute([$data['id']]);
            break;

        case 'clearCache':
            $stmt = $db->prepare("
                INSERT INTO device_commands (device_id, command, status)
                VALUES (?, 'clear_cache', 'pending')
            ");
            $stmt->execute([$data['id']]);
            break;

        case 'configure':
            if (!isset($data['settings'])) {
                throw new Exception('Settings data required for configure action');
            }
            $stmt = $db->prepare("
                UPDATE devices 
                SET config = JSON_MERGE_PATCH(COALESCE(config, '{}'), ?)
                WHERE id = ?
            ");
            $stmt->execute([
                json_encode($data['settings']),
                $data['id']
            ]);
            break;

        default:
            throw new Exception('Invalid action');
    }

    echo json_encode(['status' => 'success']);
} catch (Exception $e) {
    http_response_code(400);
    echo json_encode(['error' => $e->getMessage()]);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/devices/debug.log ===

2024-12-12 10:40:59 - Request received: GET
2024-12-12 10:40:59 - Processing GET request
2024-12-12 10:40:59 - Found 0 devices
2024-12-12 10:41:03 - Request received: GET
2024-12-12 10:41:03 - Processing GET request
2024-12-12 10:41:03 - Found 0 devices
2024-12-12 10:41:03 - Request received: GET
2024-12-12 10:41:03 - Processing GET request
2024-12-12 10:41:03 - Found 0 devices
2024-12-12 10:42:12 - Request received: GET
2024-12-12 10:42:12 - Processing GET request
2024-12-12 10:42:12 - Found 0 devices
2024-12-12 10:42:13 - Request received: GET
2024-12-12 10:42:13 - Processing GET request
2024-12-12 10:42:13 - Found 0 devices
2024-12-12 10:42:15 - Request received: GET
2024-12-12 10:42:15 - Processing GET request
2024-12-12 10:42:15 - Found 0 devices
2024-12-12 10:42:18 - Request received: GET
2024-12-12 10:42:18 - Processing GET request
2024-12-12 10:42:18 - Found 0 devices
2024-12-12 10:42:18 - Request received: GET
2024-12-12 10:42:18 - Processing GET request
2024-12-12 10:42:18 - Found 0 devices
2024-12-12 10:43:13 - Request received: GET
2024-12-12 10:43:13 - Processing GET request
2024-12-12 10:43:13 - Found 0 devices
2024-12-12 10:43:15 - Request received: GET
2024-12-12 10:43:15 - Processing GET request
2024-12-12 10:43:15 - Found 0 devices
2024-12-12 10:43:19 - Request received: GET
2024-12-12 10:43:19 - Processing GET request
2024-12-12 10:43:19 - Found 0 devices
2024-12-12 10:43:19 - Request received: GET
2024-12-12 10:43:19 - Processing GET request
2024-12-12 10:43:19 - Found 0 devices
2024-12-12 10:43:37 - Request received: GET
2024-12-12 10:43:37 - Processing GET request
2024-12-12 10:43:37 - Found 0 devices
2024-12-12 10:43:37 - Request received: GET
2024-12-12 10:43:37 - Processing GET request
2024-12-12 10:43:37 - Found 0 devices
2024-12-12 10:43:58 - Request received: GET
2024-12-12 10:43:58 - Processing GET request
2024-12-12 10:43:58 - Found 0 devices
2024-12-12 10:43:58 - Request received: GET
2024-12-12 10:43:58 - Processing GET request
2024-12-12 10:43:58 - Found 0 devices
2024-12-12 10:46:22 - Request received: GET
2024-12-12 10:46:22 - Processing GET request
2024-12-12 10:46:22 - Found 0 devices
2024-12-12 10:46:23 - Request received: GET
2024-12-12 10:46:23 - Processing GET request
2024-12-12 10:46:23 - Found 0 devices
2024-12-12 10:46:27 - Request received: GET
2024-12-12 10:46:27 - Processing GET request
2024-12-12 10:46:27 - Found 0 devices
2024-12-12 10:46:28 - Request received: GET
2024-12-12 10:46:28 - Processing GET request
2024-12-12 10:46:28 - Found 0 devices
2024-12-12 10:46:42 - Request received: GET
2024-12-12 10:46:42 - Processing GET request
2024-12-12 10:46:42 - Found 0 devices
2024-12-12 10:46:42 - Request received: GET
2024-12-12 10:46:42 - Processing GET request
2024-12-12 10:46:42 - Found 0 devices
2024-12-12 10:48:57 - Request received: GET
2024-12-12 10:48:57 - Processing GET request
2024-12-12 10:49:02 - Request received: GET
2024-12-12 10:49:02 - Processing GET request
2024-12-12 10:49:55 - Request received: GET
2024-12-12 10:49:55 - Processing GET request
2024-12-12 10:49:55 - Request received: GET
2024-12-12 10:49:55 - Processing GET request
2024-12-12 10:50:28 - Request received: GET
2024-12-12 10:50:28 - Processing GET request
2024-12-12 10:50:35 - Request received: POST
2024-12-12 10:50:35 - POST data received: {"name":"sasa"}
2024-12-12 10:50:35 - Device created successfully with ID: 1
2024-12-12 10:50:35 - Request received: GET
2024-12-12 10:50:35 - Processing GET request
2024-12-12 10:50:49 - Request received: POST
2024-12-12 10:50:49 - POST data received: {"name":"ssss"}
2024-12-12 10:50:49 - Device created successfully with ID: 2
2024-12-12 10:50:49 - Request received: GET
2024-12-12 10:50:49 - Processing GET request
2024-12-12 10:52:51 - Request received: POST
2024-12-12 10:52:51 - POST data received: {"name":"tre"}
2024-12-12 10:52:51 - Device created successfully with ID: 3
2024-12-12 10:52:51 - Request received: GET
2024-12-12 10:52:51 - Processing GET request
2024-12-12 10:52:54 - Request received: GET
2024-12-12 10:52:54 - Processing GET request
2024-12-12 10:52:55 - Request received: GET
2024-12-12 10:52:55 - Processing GET request
2024-12-12 10:52:56 - Request received: GET
2024-12-12 10:52:56 - Processing GET request
2024-12-12 10:59:28 - Request received: GET
2024-12-12 10:59:28 - Processing GET request
2024-12-12 10:59:34 - Request received: GET
2024-12-12 10:59:34 - Processing GET request
2024-12-12 10:59:34 - Request received: GET
2024-12-12 10:59:34 - Processing GET request
2024-12-12 10:59:45 - Request received: GET
2024-12-12 10:59:45 - Processing GET request
2024-12-12 11:00:19 - Request received: GET
2024-12-12 11:00:19 - Processing GET request
2024-12-12 11:00:19 - Request received: GET
2024-12-12 11:00:19 - Processing GET request
2024-12-12 11:00:26 - Request received: GET
2024-12-12 11:00:26 - Processing GET request
2024-12-12 11:00:26 - Request received: GET
2024-12-12 11:00:26 - Processing GET request
2024-12-12 11:00:29 - Request received: GET
2024-12-12 11:00:29 - Processing GET request
2024-12-12 11:00:29 - Request received: GET
2024-12-12 11:00:29 - Processing GET request

2024-12-12 11:01:43 - New Request -----------
2024-12-12 11:01:43 - Request Method: GET
2024-12-12 11:01:43 - GET request successful

2024-12-12 11:01:47 - New Request -----------
2024-12-12 11:01:47 - Request Method: GET
2024-12-12 11:01:47 - GET request successful

2024-12-12 11:01:47 - New Request -----------
2024-12-12 11:01:47 - Request Method: GET
2024-12-12 11:01:47 - GET request successful

2024-12-12 11:02:43 - New Request -----------
2024-12-12 11:02:43 - Request Method: GET
2024-12-12 11:02:43 - GET request successful

2024-12-12 11:02:50 - New Request -----------
2024-12-12 11:02:50 - Request Method: POST
2024-12-12 11:02:50 - POST data received: {"name":"sdsds222"}
2024-12-12 11:02:50 - Device created with ID: 4

2024-12-12 11:02:50 - New Request -----------
2024-12-12 11:02:50 - Request Method: GET
2024-12-12 11:02:50 - GET request successful

2024-12-12 11:02:54 - New Request -----------
2024-12-12 11:02:54 - Request Method: GET
2024-12-12 11:02:54 - GET request successful

2024-12-12 11:02:57 - New Request -----------
2024-12-12 11:02:57 - Request Method: GET
2024-12-12 11:02:57 - GET request successful

2024-12-12 11:03:03 - New Request -----------
2024-12-12 11:03:03 - Request Method: POST
2024-12-12 11:03:03 - POST data received: {"name":"12345"}
2024-12-12 11:03:03 - Device created with ID: 5

2024-12-12 11:03:03 - New Request -----------
2024-12-12 11:03:03 - Request Method: GET
2024-12-12 11:03:03 - GET request successful

2024-12-12 11:04:16 - New Request -----------
2024-12-12 11:04:16 - Request Method: GET
2024-12-12 11:04:16 - GET request successful

2024-12-12 11:09:20 - New Request -----------
2024-12-12 11:09:20 - Request Method: GET
2024-12-12 11:09:20 - GET request successful

2024-12-12 11:09:21 - New Request -----------
2024-12-12 11:09:21 - Request Method: GET
2024-12-12 11:09:21 - GET request successful

2024-12-12 11:09:22 - New Request -----------
2024-12-12 11:09:22 - Request Method: GET
2024-12-12 11:09:22 - GET request successful

2024-12-12 11:09:23 - New Request -----------
2024-12-12 11:09:23 - Request Method: GET
2024-12-12 11:09:23 - GET request successful

2024-12-12 11:09:28 - New Request -----------
2024-12-12 11:09:28 - Request Method: GET
2024-12-12 11:09:28 - GET request successful

2024-12-12 17:10:36 - New Request -----------
2024-12-12 17:10:36 - Request Method: GET
2024-12-12 17:10:36 - GET request successful

2024-12-12 17:13:14 - New Request -----------
2024-12-12 17:13:14 - Request Method: GET
2024-12-12 17:13:15 - GET request successful

2024-12-12 17:13:24 - New Request -----------
2024-12-12 17:13:24 - Request Method: PUT

2024-12-12 17:13:24 - New Request -----------
2024-12-12 17:13:24 - Request Method: GET
2024-12-12 17:13:25 - GET request successful

2024-12-12 17:13:36 - New Request -----------
2024-12-12 17:13:36 - Request Method: PUT

2024-12-12 17:13:37 - New Request -----------
2024-12-12 17:13:37 - Request Method: GET
2024-12-12 17:13:38 - GET request successful

2024-12-12 17:34:20 - New Request -----------
2024-12-12 17:34:20 - Request Method: GET
2024-12-12 17:34:20 - GET request successful

2024-12-12 17:34:33 - New Request -----------
2024-12-12 17:34:33 - Request Method: PUT

2024-12-12 17:34:38 - New Request -----------
2024-12-12 17:34:38 - Request Method: GET
2024-12-12 17:34:38 - GET request successful

2024-12-12 17:34:43 - New Request -----------
2024-12-12 17:34:43 - Request Method: PUT

2024-12-12 17:34:43 - New Request -----------
2024-12-12 17:34:43 - Request Method: GET
2024-12-12 17:34:43 - GET request successful

2024-12-12 17:36:31 - New Request -----------
2024-12-12 17:36:31 - Request Method: GET
2024-12-12 17:36:31 - GET request successful

2024-12-12 17:36:32 - New Request -----------
2024-12-12 17:36:32 - Request Method: GET
2024-12-12 17:36:32 - GET request successful

2024-12-12 17:36:32 - New Request -----------
2024-12-12 17:36:32 - Request Method: GET
2024-12-12 17:36:32 - GET request successful

2024-12-12 17:36:39 - New Request -----------
2024-12-12 17:36:39 - Request Method: PUT
2024-12-12 17:36:39 - PUT data received: 
2024-12-12 17:36:39 - Device updated successfully

2024-12-12 17:36:39 - New Request -----------
2024-12-12 17:36:39 - Request Method: GET
2024-12-12 17:36:39 - GET request successful

2024-12-12 17:36:57 - New Request -----------
2024-12-12 17:36:57 - Request Method: PUT
2024-12-12 17:36:57 - PUT data received: 
2024-12-12 17:36:57 - Device updated successfully

2024-12-12 17:36:57 - New Request -----------
2024-12-12 17:36:57 - Request Method: GET
2024-12-12 17:36:57 - GET request successful

2024-12-12 17:38:23 - New Request -----------
2024-12-12 17:38:23 - Request Method: PUT
2024-12-12 17:38:23 - PUT data received: 
2024-12-12 17:38:23 - Device updated successfully

2024-12-12 17:38:23 - New Request -----------
2024-12-12 17:38:23 - Request Method: GET
2024-12-12 17:38:23 - GET request successful

2024-12-12 17:38:43 - New Request -----------
2024-12-12 17:38:43 - Request Method: GET
2024-12-12 17:38:43 - GET request successful

2024-12-12 17:38:49 - New Request -----------
2024-12-12 17:38:49 - Request Method: PUT
2024-12-12 17:38:49 - PUT data received: 
2024-12-12 17:38:49 - Device updated successfully

2024-12-12 17:38:49 - New Request -----------
2024-12-12 17:38:49 - Request Method: GET
2024-12-12 17:38:49 - GET request successful

2024-12-12 17:40:13 - New Request -----------
2024-12-12 17:40:13 - Request Method: GET
2024-12-12 17:40:13 - GET request successful

2024-12-12 17:40:19 - New Request -----------
2024-12-12 17:40:19 - Request Method: PUT
2024-12-12 17:40:19 - PUT data received: 
2024-12-12 17:40:19 - Device updated successfully

2024-12-12 17:40:19 - New Request -----------
2024-12-12 17:40:19 - Request Method: GET
2024-12-12 17:40:19 - GET request successful

2024-12-12 17:40:24 - New Request -----------
2024-12-12 17:40:24 - Request Method: PUT
2024-12-12 17:40:24 - PUT data received: 
2024-12-12 17:40:24 - Device updated successfully

2024-12-12 17:40:24 - New Request -----------
2024-12-12 17:40:24 - Request Method: GET
2024-12-12 17:40:24 - GET request successful

2024-12-12 17:40:56 - New Request -----------
2024-12-12 17:40:56 - Request Method: GET
2024-12-12 17:40:56 - GET request successful

2024-12-12 17:41:01 - New Request -----------
2024-12-12 17:41:01 - Request Method: GET
2024-12-12 17:41:01 - GET request successful

2024-12-12 17:41:01 - New Request -----------
2024-12-12 17:41:01 - Request Method: GET
2024-12-12 17:41:01 - GET request successful

2024-12-12 17:41:08 - New Request -----------
2024-12-12 17:41:08 - Request Method: PUT
2024-12-12 17:41:08 - PUT data received: 
2024-12-12 17:41:08 - Device updated successfully

2024-12-12 17:41:08 - New Request -----------
2024-12-12 17:41:08 - Request Method: GET
2024-12-12 17:41:08 - GET request successful

2024-12-12 17:41:12 - New Request -----------
2024-12-12 17:41:12 - Request Method: GET
2024-12-12 17:41:12 - GET request successful

2024-12-12 17:41:12 - New Request -----------
2024-12-12 17:41:12 - Request Method: GET
2024-12-12 17:41:12 - GET request successful
2024-12-12 17:42:37 - GET request received
2024-12-12 17:42:43 - PUT request received
2024-12-12 17:42:43 - PUT data: null
2024-12-12 17:42:43 - GET request received
2024-12-12 17:42:48 - GET request received
2024-12-12 17:42:48 - GET request received
2024-12-12 17:42:51 - GET request received
2024-12-12 17:44:34 - GET request received
2024-12-12 17:44:35 - GET request received
2024-12-12 17:44:42 - PUT request received
2024-12-12 17:44:42 - PUT data: {"id":"5","name":"sss12345","status":"pending"}
2024-12-12 17:44:42 - GET request received
2024-12-12 17:44:50 - POST request received
2024-12-12 17:44:50 - POST data: {"name":"kuku"}
2024-12-12 17:44:50 - GET request received
2024-12-12 17:45:04 - PUT request received
2024-12-12 17:45:04 - PUT data: {"id":"6","name":"kuku_0k","status":"pending"}
2024-12-12 17:45:04 - GET request received
2024-12-12 17:45:14 - PUT request received
2024-12-12 17:45:14 - PUT data: {"id":"6","name":"kuku_0k","status":"offline"}
2024-12-12 17:45:14 - GET request received
2024-12-12 17:45:19 - PUT request received
2024-12-12 17:45:19 - PUT data: {"id":"6","name":"kuku_0k","status":"online"}
2024-12-12 17:45:19 - GET request received
2024-12-12 17:45:23 - PUT request received
2024-12-12 17:45:23 - PUT data: {"id":"6","name":"kuku_0k","status":"pending"}
2024-12-12 17:45:23 - GET request received
2024-12-12 17:45:28 - PUT request received
2024-12-12 17:45:28 - PUT data: {"id":"6","name":"kuku_0k1111","status":"pending"}
2024-12-12 17:45:28 - GET request received
2024-12-12 17:45:39 - GET request received
2024-12-12 21:51:33 - GET request received
2024-12-12 21:51:38 - PUT request received
2024-12-12 21:51:38 - PUT data: {"id":"6","name":"kuku_pai","status":"pending"}
2024-12-12 21:51:38 - GET request received
2024-12-12 21:51:47 - PUT request received
2024-12-12 21:51:47 - PUT data: {"id":"6","name":"kuku_pai","status":"offline"}
2024-12-12 21:51:47 - GET request received
2024-12-12 22:03:18 - GET request received
2024-12-12 22:03:19 - GET request received
2024-12-12 22:03:22 - DELETE request received
2024-12-12 22:03:22 - DELETE data: {"id":6}
2024-12-12 22:03:22 - GET request received
2024-12-12 22:03:28 - PUT request received
2024-12-12 22:03:28 - PUT data: {"id":"1","name":"sasa555","status":"pending"}
2024-12-12 22:03:28 - GET request received
2024-12-12 22:03:33 - PUT request received
2024-12-12 22:03:33 - PUT data: {"id":"1","name":"sasa555","status":"offline"}
2024-12-12 22:03:33 - GET request received
2024-12-12 22:03:37 - PUT request received
2024-12-12 22:03:37 - PUT data: {"id":"4","name":"sdsds222","status":"online"}
2024-12-12 22:03:37 - GET request received
2024-12-12 22:03:40 - DELETE request received
2024-12-12 22:03:40 - DELETE data: {"id":5}
2024-12-12 22:03:40 - GET request received
2024-12-12 22:03:43 - DELETE request received
2024-12-12 22:03:43 - DELETE data: {"id":3}
2024-12-12 22:03:43 - GET request received
2024-12-12 22:03:46 - DELETE request received
2024-12-12 22:03:46 - DELETE data: {"id":2}
2024-12-12 22:03:46 - GET request received
2024-12-12 22:10:32 - GET request received
2024-12-12 22:10:33 - GET request received
2024-12-12 22:10:54 - PUT request received
2024-12-12 22:10:54 - PUT data: {"id":"1","name":"kuku","status":"offline","ip_address":"22.46.24.122"}
2024-12-12 22:10:54 - GET request received
2024-12-12 22:11:06 - POST request received
2024-12-12 22:11:06 - POST data: {"name":"kuku","ip_address":""}
2024-12-12 22:11:06 - GET request received
2024-12-12 22:11:15 - PUT request received
2024-12-12 22:11:15 - PUT data: {"id":"7","name":"kuku","status":"pending","ip_address":"121"}
2024-12-12 22:11:15 - GET request received
2024-12-12 22:11:19 - DELETE request received
2024-12-12 22:11:19 - DELETE data: {"id":7}
2024-12-12 22:11:19 - GET request received
2024-12-12 22:25:00 - GET request received
2024-12-12 22:25:01 - GET request received
2024-12-12 22:25:01 - GET request received
2024-12-12 22:26:52 - GET request received
2024-12-12 22:26:54 - GET request received
2024-12-12 22:27:18 - PUT request received
2024-12-12 22:27:18 - PUT data: {"id":"1","name":"kuku","status":"offline","ip_address":"176.46.24.1212"}
2024-12-12 22:27:18 - GET request received
2024-12-12 22:27:20 - GET request received
2024-12-12 22:27:20 - POST request received
2024-12-12 22:27:20 - POST data: {"name":"undefined_copy","ip_address":"","status":"pending"}
2024-12-12 22:27:20 - GET request received
2024-12-12 22:27:59 - GET request received
2024-12-12 22:28:00 - GET request received
2024-12-12 22:28:06 - GET request received
2024-12-12 22:28:08 - GET request received
2024-12-12 22:28:08 - POST request received
2024-12-12 22:28:08 - POST data: {"name":"undefined_copy_copy","ip_address":"","status":"pending"}
2024-12-12 22:28:08 - GET request received
2024-12-12 22:28:11 - DELETE request received
2024-12-12 22:28:11 - DELETE data: {"id":9}
2024-12-12 22:28:11 - GET request received
2024-12-12 22:28:23 - PUT request received
2024-12-12 22:28:23 - PUT data: {"id":"8","name":"undefined_copy","status":"pending","ip_address":"111.111.222.222"}
2024-12-12 22:28:23 - GET request received
2024-12-12 22:28:42 - GET request received
2024-12-12 22:28:43 - GET request received
2024-12-12 22:29:04 - POST request received
2024-12-12 22:29:04 - POST data: {"name":"wwwww","ip_address":"111.111.111.111"}
2024-12-12 22:29:04 - GET request received
2024-12-12 22:32:19 - GET request received
2024-12-12 22:33:25 - GET request received
2024-12-13 08:53:05 - GET request received
2024-12-13 10:54:14 - GET request received
2024-12-13 11:03:49 - GET request received
2024-12-13 11:46:49 - GET request received
2024-12-13 11:50:17 - GET request received
2024-12-13 12:13:06 - GET request received
2024-12-13 12:25:32 - GET request received
2024-12-13 12:25:37 - PUT request received
2024-12-13 12:25:37 - PUT data: {"id":"1","name":"kuku11","status":"offline","ip_address":"176.46.24.121"}
2024-12-13 12:25:37 - GET request received
2024-12-13 12:33:11 - GET request received
2024-12-13 12:33:13 - GET request received
2024-12-13 12:33:27 - POST request received
2024-12-13 12:33:27 - POST data: {"name":"hull","ip_address":"111.111.111.111"}
2024-12-13 12:33:27 - GET request received
2024-12-13 12:33:31 - GET request received
2024-12-13 12:33:45 - DELETE request received
2024-12-13 12:33:45 - DELETE data: {"id":11}
2024-12-13 12:33:45 - GET request received
2024-12-13 15:08:57 - GET request received
2024-12-13 15:18:40 - GET request received
2024-12-13 15:32:04 - GET request received
2024-12-13 15:34:37 - GET request received
2024-12-13 15:40:12 - GET request received
2024-12-13 18:24:42 - GET request received
2024-12-13 18:24:58 - GET request received
2024-12-13 18:24:59 - GET request received
2024-12-13 18:25:00 - GET request received
2024-12-13 18:25:01 - GET request received
2024-12-13 18:25:02 - GET request received
2024-12-13 18:25:02 - GET request received
2024-12-13 18:25:03 - GET request received
2024-12-13 18:25:03 - GET request received
2024-12-13 18:25:32 - GET request received
2024-12-13 18:25:33 - GET request received
2024-12-13 18:26:27 - GET request received
2024-12-13 18:26:28 - GET request received
2024-12-13 18:26:29 - GET request received
2024-12-13 18:40:25 - GET request received
2024-12-13 18:41:54 - GET request received
2024-12-13 18:41:55 - GET request received
2024-12-13 18:41:58 - GET request received
2024-12-13 18:41:59 - GET request received
2024-12-13 18:42:00 - GET request received
2024-12-13 18:42:24 - GET request received
2024-12-13 18:42:25 - GET request received
2024-12-13 18:42:26 - GET request received
2024-12-13 18:42:28 - GET request received
2024-12-13 18:42:34 - GET request received
2024-12-13 18:42:34 - GET request received
2024-12-13 18:42:35 - GET request received
2024-12-13 18:42:39 - GET request received
2024-12-13 18:42:40 - GET request received
2024-12-13 18:44:03 - GET request received
2024-12-13 18:44:04 - GET request received
2024-12-13 18:44:27 - GET request received
2024-12-13 18:44:28 - GET request received
2024-12-13 18:46:29 - GET request received
2024-12-13 18:46:30 - GET request received
2024-12-13 18:46:31 - GET request received
2024-12-13 18:46:31 - GET request received
2024-12-13 18:47:40 - GET request received
2024-12-13 18:47:41 - GET request received
2024-12-13 18:48:09 - GET request received
2024-12-13 18:48:09 - POST request received
2024-12-13 18:48:09 - POST data: {"name":"kuku11_copy","ip_address":"","status":"pending"}
2024-12-13 18:48:09 - GET request received
2024-12-13 18:48:37 - GET request received
2024-12-13 18:49:00 - GET request received
2024-12-13 19:47:09 - GET request received
2024-12-13 19:47:11 - GET request received
2024-12-13 19:47:12 - GET request received
2024-12-13 19:47:25 - GET request received
2024-12-13 19:49:12 - GET request received
2024-12-13 19:49:13 - GET request received
2024-12-13 19:49:14 - GET request received
2024-12-13 19:49:15 - GET request received
2024-12-13 19:52:46 - GET request received
2024-12-13 19:52:47 - GET request received
2024-12-13 19:52:49 - GET request received
2024-12-13 19:53:16 - GET request received
2024-12-13 19:53:17 - GET request received
2024-12-13 19:53:18 - GET request received
2024-12-13 19:53:19 - GET request received
2024-12-13 19:53:20 - GET request received
2024-12-13 19:55:18 - GET request received
2024-12-13 19:55:19 - GET request received
2024-12-13 19:56:15 - GET request received
2024-12-13 19:57:00 - GET request received
2024-12-13 19:57:04 - GET request received
2024-12-13 19:57:56 - GET request received
2024-12-13 19:59:01 - GET request received
2024-12-13 19:59:02 - GET request received
2024-12-13 19:59:43 - GET request received
2024-12-13 19:59:44 - GET request received
2024-12-13 19:59:54 - GET request received
2024-12-13 20:04:29 - GET request received
2024-12-13 20:04:30 - GET request received
2024-12-13 20:04:50 - GET request received
2024-12-13 20:04:51 - GET request received
2024-12-13 20:04:51 - GET request received
2024-12-13 20:04:52 - GET request received
2024-12-13 20:04:53 - GET request received
2024-12-13 20:15:54 - GET request received
2024-12-13 20:15:56 - GET request received
2024-12-13 20:17:21 - GET request received
2024-12-13 20:17:23 - GET request received
2024-12-13 20:17:24 - GET request received
2024-12-13 20:17:58 - GET request received
2024-12-13 20:19:01 - GET request received
2024-12-13 20:19:03 - GET request received
2024-12-13 20:19:04 - GET request received
2024-12-13 20:19:04 - GET request received
2024-12-13 20:22:28 - GET request received
2024-12-13 20:22:30 - GET request received
2024-12-13 20:22:31 - GET request received
2024-12-13 20:22:31 - GET request received
2024-12-13 20:22:32 - GET request received
2024-12-13 20:22:33 - GET request received
2024-12-13 20:22:33 - GET request received
2024-12-13 20:22:34 - GET request received
2024-12-13 20:22:35 - GET request received
2024-12-13 20:22:36 - GET request received
2024-12-13 20:23:07 - GET request received
2024-12-13 20:23:08 - GET request received
2024-12-13 20:23:09 - GET request received
2024-12-13 20:23:10 - GET request received
2024-12-13 20:23:14 - GET request received
2024-12-13 20:25:05 - GET request received
2024-12-13 20:25:06 - GET request received
2024-12-13 20:25:06 - GET request received
2024-12-13 20:25:07 - GET request received
2024-12-13 20:25:07 - GET request received
2024-12-13 20:25:07 - GET request received
2024-12-13 20:25:08 - GET request received
2024-12-13 20:25:08 - GET request received
2024-12-13 20:25:09 - GET request received
2024-12-13 20:25:09 - GET request received
2024-12-13 20:25:09 - GET request received
2024-12-13 20:25:09 - GET request received
2024-12-13 20:25:10 - GET request received
2024-12-13 20:28:16 - GET request received
2024-12-13 20:28:17 - GET request received
2024-12-13 20:28:19 - GET request received
2024-12-13 20:28:54 - GET request received
2024-12-13 22:47:31 - GET request received
2024-12-13 22:47:33 - GET request received
2024-12-13 22:48:44 - GET request received
2024-12-13 22:48:50 - DELETE request received
2024-12-13 22:48:50 - DELETE data: {"id":12}
2024-12-13 22:48:50 - GET request received
2024-12-13 22:48:59 - POST request received
2024-12-13 22:48:59 - POST data: {"name":"hallp","ip_address":"dad"}
2024-12-13 22:49:00 - GET request received
2024-12-14 01:31:54 - GET request received
2024-12-14 01:32:12 - PUT request received
2024-12-14 01:32:12 - PUT data: {"id":"13","name":"hallp3333333","status":"pending","ip_address":"dad"}
2024-12-14 01:32:12 - GET request received
2024-12-14 01:34:43 - GET request received
2024-12-14 13:26:49 - GET request received
2024-12-14 16:38:48 - GET request received
2024-12-14 16:39:07 - DELETE request received
2024-12-14 16:39:07 - DELETE data: {"id":13}
2024-12-14 16:39:08 - GET request received
2024-12-14 16:41:27 - GET request received
2024-12-14 16:42:46 - GET request received
2024-12-14 16:42:49 - GET request received
2024-12-14 16:43:43 - GET request received
2024-12-14 16:43:47 - GET request received
2024-12-14 16:44:11 - GET request received
2024-12-14 16:44:20 - GET request received
2024-12-14 16:45:56 - GET request received
2024-12-14 16:56:03 - GET request received
2024-12-14 18:36:54 - GET request received
2024-12-14 19:24:53 - GET request received
2024-12-14 19:27:18 - GET request received
2024-12-14 19:27:19 - GET request received
2024-12-14 19:27:26 - GET request received
2024-12-14 19:27:28 - GET request received
2024-12-14 19:27:29 - GET request received
2024-12-14 19:28:52 - GET request received
2024-12-14 19:28:53 - GET request received
2024-12-14 19:29:13 - PUT request received
2024-12-14 19:29:13 - PUT data: {"id":"1","name":"kuku1144","status":"offline","ip_address":"176.46.24.121"}
2024-12-14 19:29:13 - GET request received
2024-12-14 19:34:27 - GET request received
2024-12-14 19:43:01 - GET request received
2024-12-14 19:43:18 - DELETE request received
2024-12-14 19:43:18 - DELETE data: {"id":10}
2024-12-14 19:43:18 - GET request received
2024-12-14 20:49:52 - GET request received
2024-12-14 23:57:29 - GET request received
2024-12-14 23:57:31 - GET request received
2024-12-15 00:05:33 - GET request received
2024-12-15 00:05:35 - GET request received
2024-12-15 00:05:38 - GET request received
2024-12-15 00:11:37 - GET request received
2024-12-15 00:11:42 - GET request received
2024-12-15 00:12:26 - GET request received
2024-12-15 00:13:58 - GET request received
2024-12-15 00:14:07 - GET request received
2024-12-15 00:16:11 - GET request received
2024-12-15 00:16:58 - GET request received
2024-12-15 00:18:33 - GET request received
2024-12-15 00:21:01 - GET request received
2024-12-15 00:28:08 - GET request received
2024-12-15 00:42:45 - GET request received
2024-12-15 00:43:18 - GET request received
2024-12-15 00:48:11 - GET request received
2024-12-15 00:48:12 - GET request received
2024-12-15 00:48:13 - GET request received
2024-12-15 00:50:01 - GET request received
2024-12-15 00:52:45 - GET request received
2024-12-15 00:52:53 - GET request received
2024-12-15 00:54:29 - GET request received
2024-12-15 00:54:30 - GET request received
2024-12-15 00:54:31 - GET request received
2024-12-15 01:13:25 - GET request received
2024-12-15 01:42:48 - GET request received
2024-12-15 01:43:14 - GET request received
2024-12-15 10:23:18 - GET request received
2024-12-15 10:23:19 - GET request received
2024-12-15 10:27:16 - GET request received
2024-12-15 10:27:18 - GET request received
2024-12-15 10:27:18 - POST request received
2024-12-15 10:27:18 - POST data: {"name":"kuku1144_copy","ip_address":"","status":"pending"}
2024-12-15 10:27:18 - GET request received
2024-12-15 10:27:22 - PUT request received
2024-12-15 10:27:22 - PUT data: {"id":"4","name":"sdsds222","status":"online","ip_address":"176.46.24.121"}
2024-12-15 10:27:22 - GET request received
2024-12-15 10:27:27 - POST request received
2024-12-15 10:27:27 - POST data: {"name":"WWW","ip_address":"WW"}
2024-12-15 10:27:27 - GET request received
2024-12-15 10:28:19 - GET request received
2024-12-15 10:28:19 - GET request received
2024-12-15 10:28:21 - GET request received
2024-12-15 10:39:09 - GET request received
2024-12-15 12:25:49 - GET request received
2024-12-15 12:26:02 - GET request received
2024-12-15 12:26:52 - GET request received
2024-12-15 12:26:54 - GET request received
2024-12-15 12:26:55 - GET request received
2024-12-15 12:27:07 - GET request received
2024-12-15 12:27:11 - GET request received
2024-12-15 22:13:42 - GET request received
2024-12-15 23:19:11 - GET request received
2024-12-15 23:19:15 - GET request received
2024-12-15 23:19:20 - DELETE request received
2024-12-15 23:19:20 - DELETE data: {"id":1}
2024-12-15 23:19:20 - GET request received
2024-12-15 23:20:00 - GET request received
2024-12-15 23:20:12 - DELETE request received
2024-12-15 23:20:12 - DELETE data: {"id":15}
2024-12-15 23:20:12 - GET request received
2024-12-15 23:20:50 - GET request received
2024-12-15 23:20:52 - GET request received
2024-12-15 23:20:54 - GET request received
2024-12-16 01:01:07 - GET request received
2024-12-16 01:01:25 - GET request received
2024-12-16 09:43:26 - GET request received
2024-12-16 09:44:27 - GET request received
2024-12-16 10:28:07 - GET request received
2024-12-16 10:28:11 - GET request received
2024-12-16 10:28:14 - GET request received
2024-12-16 10:28:15 - GET request received
2024-12-16 10:29:44 - GET request received
2024-12-16 10:29:46 - GET request received
2024-12-16 10:29:50 - GET request received
2024-12-16 10:36:45 - GET request received
2024-12-16 10:36:50 - GET request received
2024-12-16 10:37:00 - GET request received
2024-12-16 10:37:14 - GET request received
2024-12-16 10:59:51 - Request method: GET
2024-12-16 10:59:51 - Fetched devices: 3
2024-12-16 10:59:52 - Request method: GET
2024-12-16 10:59:52 - Fetched devices: 3

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/bulk-control/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       foreach ($data["device_ids"] as $deviceId) {
           $stmt = $db->prepare("INSERT INTO device_commands (device_id, command, params) VALUES (?, ?, ?)");
           $stmt->execute([$deviceId, $data["command"], json_encode($data["params"])]);
       }
       echo json_encode(["status" => "success"]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/live-monitoring/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");
header("Cache-Control: no-cache");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

$devices = $db->query("
   SELECT d.*, 
          ds.cpu_usage, 
          ds.memory_usage, 
          ds.temperature,
          ds.created_at as last_update
   FROM devices d
   LEFT JOIN device_stats ds ON d.id = ds.device_id
   WHERE ds.id IN (
       SELECT MAX(id)
       FROM device_stats
       GROUP BY device_id
   )
")->fetchAll(PDO::FETCH_ASSOC);

echo json_encode(["devices" => $devices]);

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/group-stats/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "GET":
       $groupId = $_GET["group_id"];
       $stmt = $db->prepare("
           SELECT 
               d.name as device_name,
               ds.cpu_usage,
               ds.memory_usage,
               ds.temperature,
               ds.created_at
           FROM devices d
           JOIN device_group dg ON d.id = dg.device_id
           JOIN device_stats ds ON d.id = ds.device_id
           WHERE dg.group_id = ?
           ORDER BY ds.created_at DESC
           LIMIT 100
       ");
       $stmt->execute([$groupId]);
       echo json_encode(["stats" => $stmt->fetchAll(PDO::FETCH_ASSOC)]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/mass-update/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");
$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       $groups = $data["groups"] ?? [];
       $devices = $data["devices"] ?? [];
       $content = $data["content"];

       // Grupipõhine uuendamine
       if (!empty($groups)) {
           $stmt = $db->prepare("
               INSERT INTO sync_queue (device_id, action, data)
               SELECT d.id, update_content, ?
               FROM devices d
               JOIN device_group dg ON d.id = dg.device_id
               WHERE dg.group_id IN (" . implode(",", $groups) . ")
           ");
           $stmt->execute([json_encode($content)]);
       }

       // Seadmepõhine uuendamine
       if (!empty($devices)) {
           $stmt = $db->prepare("
               INSERT INTO sync_queue (device_id, action, data)
               VALUES (?, update_content, ?)
           ");
           foreach ($devices as $deviceId) {
               $stmt->execute([$deviceId, json_encode($content)]);
           }
       }
       
       echo json_encode(["status" => "success"]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/device/register.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/DeviceController.php';

$controller = new Controllers\DeviceController();

switch ($_SERVER['REQUEST_METHOD']) {
    case 'POST':
        $data = json_decode(file_get_contents('php://input'), true);
        $controller->registerDevice($data);
        break;
    case 'GET':
        $controller->getRegistrationStatus($_GET['device_id']);
        break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/device/sync-status.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/SyncController.php';

$controller = new Controllers\SyncController();

if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    $deviceId = $_GET['device_id'] ?? null;
    if (!$deviceId) {
        $controller->errorResponse('Device ID required', 400);
    }
    $controller->getDeviceSyncStatus($deviceId);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/diagnostics/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");
$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "GET":
       $deviceId = $_GET["device_id"] ?? null;
       $period = $_GET["period"] ?? "24h";
       
       $sql = "SELECT l.*, d.name as device_name 
               FROM device_logs l
               JOIN devices d ON l.device_id = d.id
               WHERE l.created_at >= DATE_SUB(NOW(), INTERVAL 1 DAY)";
       
       if ($deviceId) {
           $sql .= " AND l.device_id = " . intval($deviceId);
       }
       
       $logs = $db->query($sql)->fetchAll(PDO::FETCH_ASSOC);
       echo json_encode(["logs" => $logs]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/schedules/index.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/ScheduleController.php';

$controller = new Controllers\ScheduleController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if(isset($_GET['device_id']) && isset($_GET['active'])) {
                $controller->getActiveSchedule($_GET['device_id']);
            } else if(isset($_GET['device_id'])) {
                $controller->getSchedules($_GET['device_id']);
            } else {
                $controller->getSchedules();
            }
            break;
            
        case 'POST':
            $controller->createSchedule();
            break;
            
        case 'PUT':
            $data = json_decode(file_get_contents('php://input'), true);
            if (!isset($data['id'])) {
                $controller->errorResponse('Schedule ID required', 400);
            }
            $controller->updateSchedule($data['id']);
            break;
            
        case 'DELETE':
            $data = json_decode(file_get_contents('php://input'), true);
            if (!isset($data['id'])) {
                $controller->errorResponse('Schedule ID required', 400);
            }
            $controller->deleteSchedule($data['id']);
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Schedule API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/schedules/schedule.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/ScheduleController.php';

$controller = new Controllers\ScheduleController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->createSchedule($data);
            break;
            
        case 'PUT':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->updateSchedule($data);
            break;
            
        case 'DELETE':
            $data = json_decode(file_get_contents('php://input'), true);
            $controller->deleteSchedule($data['id']);
            break;
            
        case 'GET':
            if (isset($_GET['device_id'])) {
                $controller->getDeviceSchedules($_GET['device_id']);
            } else if (isset($_GET['playlist_id'])) {
                $controller->getPlaylistSchedules($_GET['playlist_id']);
            } else {
                $controller->getAllSchedules();
            }
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Schedule API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/queue/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "GET":
       $deviceId = $_GET["device_id"] ?? null;
       if ($deviceId) {
           $stmt = $db->prepare("
               SELECT mq.*, m.name, m.type 
               FROM media_queue mq
               JOIN media m ON mq.media_id = m.id
               WHERE mq.device_id = ?
               ORDER BY mq.priority DESC, mq.order_number
           ");
           $stmt->execute([$deviceId]);
           echo json_encode(["queue" => $stmt->fetchAll(PDO::FETCH_ASSOC)]);
       }
       break;

   case "POST":
       $data = json_decode(file_get_contents("php://input"), true);
       $stmt = $db->prepare("
           INSERT INTO media_queue 
           (device_id, media_id, priority, order_number, start_time, end_time)
           VALUES (?, ?, ?, ?, ?, ?)
       ");
       $stmt->execute([
           $data["device_id"],
           $data["media_id"],
           $data["priority"],
           $data["order_number"],
           $data["start_time"],
           $data["end_time"]
       ]);
       echo json_encode(["status" => "success"]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/notifications/index.php ===

<?php
require "../../vendor/autoload.php";
header("Content-Type: application/json");

$db = new PDO("mysql:host=localhost;dbname=vhost15998s0", "vhost15998s0", "Digiplayer1-401");

switch ($_SERVER["REQUEST_METHOD"]) {
   case "GET":
       $sql = "SELECT 
               n.*, 
               d.name as device_name,
               u.name as acknowledged_by_name
           FROM notifications n
           JOIN devices d ON n.device_id = d.id
           LEFT JOIN users u ON n.acknowledged_by = u.id
           WHERE n.is_acknowledged = 0
           ORDER BY n.severity DESC, n.created_at DESC";
       
       $notifications = $db->query($sql)->fetchAll(PDO::FETCH_ASSOC);
       echo json_encode(["notifications" => $notifications]);
       break;

   case "PUT":
       $data = json_decode(file_get_contents("php://input"), true);
       if ($data["action"] === "acknowledge") {
           $stmt = $db->prepare("
               UPDATE notifications 
               SET is_acknowledged = TRUE,
                   acknowledged_by = ?,
                   acknowledged_at = NOW()
               WHERE id = ?
           ");
           $stmt->execute([$_SESSION["user"]["id"], $data["notification_id"]]);
       }
       echo json_encode(["status" => "success"]);
       break;
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/sync/status.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/SyncController.php';

$controller = new Controllers\SyncController();

if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    $controller->getSyncStatus($_GET['device_id'] ?? null);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/sync/heartbeat.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/SyncController.php';

$controller = new Controllers\SyncController();

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $data = json_decode(file_get_contents('php://input'), true);
    $controller->deviceHeartbeat($data['device_id']);
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/api/sync/index.php ===

<?php
require_once __DIR__ . '/../../../src/Controllers/BaseController.php';
require_once __DIR__ . '/../../../src/Controllers/SyncController.php';

$controller = new Controllers\SyncController();

try {
    switch($_SERVER['REQUEST_METHOD']) {
        case 'GET':
            if (!isset($_GET['device_id'])) {
                $controller->errorResponse('Device ID required', 400);
            }
            $controller->getQueueItems($_GET['device_id']);
            break;
            
        case 'POST':
            $data = json_decode(file_get_contents('php://input'), true);
            if (isset($data['bulk'])) {
                $controller->bulkSync();
            } else {
                $controller->addToQueue();
            }
            break;
            
        case 'PUT':
            $controller->updateStatus();
            break;
            
        default:
            $controller->errorResponse('Method not allowed', 405);
    }
} catch (Exception $e) {
    error_log("Sync API Error: " . $e->getMessage());
    $controller->errorResponse('Server error occurred');
}

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/test.php ===

<?php
echo "PHP is working";

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/locations.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Device Locations</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <div class="locations-container">
       <div class="floor-selector">
           <select id="floorSelect" onchange="changeFloor()">
               <option value="1">Floor 1</option>
               <option value="2">Floor 2</option>
           </select>
       </div>
       
       <div class="map-container">
           <div id="floorMap" class="floor-map"></div>
       </div>
       
       <div class="device-list">
           <h3>Devices</h3>
           <div id="deviceList"></div>
       </div>
   </div>

   <script>
   let devices = [];
   let selectedDevice = null;

   async function loadDevices() {
       const response = await fetch("/api/locations");
       const data = await response.json();
       devices = data.locations;
       updateMap();
       updateDeviceList();
   }

   function updateMap() {
       const floor = document.getElementById("floorSelect").value;
       const floorDevices = devices.filter(d => d.floor === floor);
       
       const map = document.getElementById("floorMap");
       map.innerHTML = floorDevices.map(d => `
           <div class="device-marker ${d.status}"
                style="left: ${d.coordinates.x}%; top: ${d.coordinates.y}%"
                onclick="selectDevice(${d.device_id})">
               ${d.device_name}
           </div>
       `).join("");
   }

   loadDevices();
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/dashboard.php ===

<?php
session_start();
if (!isset($_SESSION['user'])) {
    header('Location: index.php');
    exit;
}
$pageTitle = 'Dashboard';
$currentPage = 'dashboard';
require_once 'template/header.php';
require_once 'template/sidebar.php';
?>

<div class="main-content">
    <div class="page-title">
        DigiPlayer <span>/ Dashboard</span>
    </div>

    <div class="dashboard-stats">
        <div class="stat-card">
            <div class="stat-icon devices"></div>
            <div class="stat-info">
                <span class="stat-label">Active Devices</span>
                <div class="stat-value" id="activeDevices">0</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon media"></div>
            <div class="stat-info">
                <span class="stat-label">Media Files</span>
                <div class="stat-value" id="mediaCount">0</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon playlists"></div>
            <div class="stat-info">
                <span class="stat-label">Active Playlists</span>
                <div class="stat-value" id="playlistCount">0</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon storage"></div>
            <div class="stat-info">
                <span class="stat-label">Storage Used</span>
                <div class="stat-value" id="storageUsed">0 GB</div>
            </div>
        </div>
    </div>

    <div class="dashboard-charts">
        <div class="chart-card">
            <h3>Playback Activity</h3>
            <canvas id="playbackChart"></canvas>
        </div>
        <div class="chart-card">
            <h3>Device Status</h3>
            <canvas id="deviceStatusChart"></canvas>
        </div>
    </div>

    <div class="recent-activity card">
        <h3>Recent Activity</h3>
        <div id="activityList" class="activity-list"></div>
    </div>
</div>

<script src="/digiplayer/public/assets/js/dashboard-widgets.js"></script>
<?php require_once 'template/footer.php'; ?>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/devices.php ===

<?php
session_start();
if (!isset($_SESSION['user'])) {
    header('Location: index.php');
    exit;
}
$pageTitle = 'Device Management';
$currentPage = 'devices';
require_once 'template/header.php';
require_once 'template/sidebar.php';
?>

<div class="main-content">
    <div class="content-header">
        <h1>Device Management</h1>
        <div class="header-actions">
            <button class="btn btn-primary" onclick="showAddDeviceModal()">
                <i class="fas fa-plus"></i> Add Device
            </button>
        </div>
    </div>

    <!-- Filter Bar -->
    <div class="filter-bar">
        <div class="search-box">
            <input type="text" id="searchInput" placeholder="Search devices..." class="form-control">
        </div>
        <select id="statusFilter" class="form-control">
            <option value="">All Statuses</option>
            <option value="online">Online</option>
            <option value="offline">Offline</option>
            <option value="pending">Pending</option>
        </select>
        <select id="groupFilter" class="form-control">
            <option value="">All Groups</option>
        </select>
    </div>

    <!-- Bulk Actions -->
    <div id="bulkActions" class="bulk-actions" style="display: none;">
        <button onclick="bulkAction('restart')" class="btn btn-secondary">Restart Selected</button>
        <button onclick="bulkAction('update')" class="btn btn-secondary">Update Content</button>
        <button onclick="assignToGroup()" class="btn btn-secondary">Assign to Group</button>
    </div>

    <!-- Device List -->
    <div id="devicesList" class="devices-list">
        <!-- Devices will be loaded here -->
    </div>

    <!-- Add/Edit Device Modal -->
    <div id="deviceModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Add New Device</h2>
                <button class="close-modal" onclick="closeModal('deviceModal')">&times;</button>
            </div>
            <form id="deviceForm">
                <input type="hidden" id="deviceId" name="id">
                <div class="form-group">
                    <label for="deviceName">Device Name*</label>
                    <input type="text" id="deviceName" name="name" required>
                </div>
                <div class="form-group">
                    <label for="deviceIP">IP Address*</label>
                    <input type="text" id="deviceIP" name="ip_address" required>
                </div>
                <div class="form-group">
                    <label for="deviceLocation">Location</label>
                    <input type="text" id="deviceLocation" name="location">
                </div>
                <div class="form-group">
                    <label for="deviceGroup">Group</label>
                    <select id="deviceGroup" name="group_id">
                        <option value="">Select Group</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="devicePlaylist">Default Playlist</label>
                    <select id="devicePlaylist" name="playlist_id">
                        <option value="">Select Playlist</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('deviceModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Device</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="/digiplayer/public/assets/js/devices.js"></script>
<?php require_once 'template/footer.php'; ?>
=== File: /home/vhost15998ssh/htdocs/digiplayer/public/template/footer.php ===

    </div>
    <script src="/digiplayer/public/assets/js/main.js"></script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/template/header.php ===

<!DOCTYPE html>
<html>
<head>
    <title>DigiPlayer - <?php echo $pageTitle ?? 'Admin Panel'; ?></title>
    <link rel="stylesheet" href="/digiplayer/public/assets/css/style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="admin-container">

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/template/sidebar.php ===

<div class="sidebar">
    <div class="sidebar-header">
        <h2>DigiPlayer</h2>
    </div>
    <nav class="sidebar-nav">
        <a href="dashboard.php" class="nav-item <?php echo $currentPage === 'dashboard' ? 'active' : ''; ?>">
            <i class="fas fa-tachometer-alt"></i> <span>Dashboard</span>
        </a>
        <a href="devices.php" class="nav-item <?php echo $currentPage === 'devices' ? 'active' : ''; ?>">
            <i class="fas fa-desktop"></i> <span>Devices</span>
        </a>
        <a href="groups.php" class="nav-item <?php echo $currentPage === 'groups' ? 'active' : ''; ?>">
            <i class="fas fa-layer-group"></i> <span>Groups</span>
        </a>
        <a href="media.php" class="nav-item <?php echo $currentPage === 'media' ? 'active' : ''; ?>">
            <i class="fas fa-photo-video"></i> <span>Media</span>
        </a>
        <a href="playlists.php" class="nav-item <?php echo $currentPage === 'playlists' ? 'active' : ''; ?>">
            <i class="fas fa-list"></i> <span>Playlists</span>
        </a>
        <a href="schedule.php" class="nav-item <?php echo $currentPage === 'schedule' ? 'active' : ''; ?>">
            <i class="fas fa-calendar-alt"></i> <span>Schedule</span>
        </a>
        <a href="monitoring.php" class="nav-item <?php echo $currentPage === 'monitoring' ? 'active' : ''; ?>">
            <i class="fas fa-chart-line"></i> <span>Monitoring</span>
        </a>

        <div class="nav-divider"></div>
        
        <a href="logout.php" class="nav-item">
            <i class="fas fa-sign-out-alt"></i> <span>Logout</span>
        </a>
    </nav>
</div>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/queue.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Media Queue</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <div class="queue-container">
       <div class="media-list">
           <h2>Available Media</h2>
           <div id="mediaList" class="drag-area"></div>
       </div>
       
       <div class="queue-list">
           <h2>Current Queue</h2>
           <select id="deviceSelect" onchange="loadQueue()"></select>
           <div id="queueList" class="drag-area"></div>
       </div>
   </div>

   <script>
   async function loadMedia() {
       const response = await fetch("/api/media");
       const data = await response.json();
       document.getElementById("mediaList").innerHTML = data.media.map(m => `
           <div class="media-item" draggable="true" ondragstart="drag(event)" data-id="${m.id}">
               <img src="${m.path}" alt="${m.name}">
               <span>${m.name}</span>
           </div>
       `).join("");
   }

   async function loadQueue() {
       const deviceId = document.getElementById("deviceSelect").value;
       const response = await fetch(`/api/queue?device_id=${deviceId}`);
       const data = await response.json();
       document.getElementById("queueList").innerHTML = data.queue.map((item, index) => `
           <div class="queue-item" draggable="true" ondragstart="drag(event)" data-id="${item.id}">
               <span class="order">${index + 1}</span>
               <span>${item.name}</span>
               <input type="number" value="${item.priority}" onchange="updatePriority(${item.id}, this.value)">
           </div>
       `).join("");
   }

   loadMedia();
   loadQueue();
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/media.php ===

<?php
session_start();
if (!isset($_SESSION['user'])) {
    header('Location: index.php');
    exit;
}
$pageTitle = 'Media Management';
$currentPage = 'media';
require_once 'template/header.php';
require_once 'template/sidebar.php';
?>

<div class="main-content">
    <div class="content-header">
        <h1>Media Management</h1>
        <div class="header-actions">
            <button class="btn btn-primary" onclick="showUploadModal()">
                <i class="icon-upload"></i> Upload Media
            </button>
        </div>
    </div>

    <div class="media-tools">
        <div class="search-filters">
            <input type="text" id="mediaSearch" placeholder="Search media...">
            <select id="typeFilter">
                <option value="">All Types</option>
                <option value="image">Images</option>
                <option value="video">Videos</option>
            </select>
            <select id="sortBy">
                <option value="date">Upload Date</option>
                <option value="name">Name</option>
                <option value="size">Size</option>
                <option value="type">Type</option>
            </select>
        </div>
        <div class="view-options">
            <button class="btn-icon" onclick="toggleView('grid')" id="gridViewBtn">
                <i class="icon-grid"></i>
            </button>
            <button class="btn-icon" onclick="toggleView('list')" id="listViewBtn">
                <i class="icon-list"></i>
            </button>
        </div>
    </div>

    <div id="mediaContainer" class="media-grid">
        <!-- Media items will be loaded here -->
    </div>

    <!-- Upload Modal -->
    <div id="uploadModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Upload Media</h2>
                <button class="close-modal" onclick="closeModal('uploadModal')">&times;</button>
            </div>
            <div class="upload-container">
                <div class="upload-dropzone" id="dropZone">
                    <i class="icon-upload"></i>
                    <p>Drag & drop files here or click to select</p>
                    <input type="file" id="fileInput" multiple accept="image/*,video/*" style="display: none">
                </div>
                <div id="uploadPreview" class="upload-preview">
                    <!-- Upload previews will appear here -->
                </div>
                <div class="upload-progress" id="uploadProgress" style="display: none">
                    <div class="progress-bar">
                        <div class="progress-fill"></div>
                    </div>
                    <div class="progress-text">Uploading... <span id="progressPercent">0%</span></div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('uploadModal')">Cancel</button>
                <button class="btn btn-primary" onclick="startUpload()">Upload Files</button>
            </div>
        </div>
    </div>

    <!-- Media Preview Modal -->
    <div id="previewModal" class="modal">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <h2>Media Preview</h2>
                <button class="close-modal" onclick="closeModal('previewModal')">&times;</button>
            </div>
            <div class="preview-container">
                <div id="mediaPreview" class="media-preview">
                    <!-- Preview content will be loaded here -->
                </div>
                <div class="media-details">
                    <h3 id="previewName"></h3>
                    <div class="details-grid">
                        <div class="detail-item">
                            <label>Type</label>
                            <span id="previewType"></span>
                        </div>
                        <div class="detail-item">
                            <label>Size</label>
                            <span id="previewSize"></span>
                        </div>
                        <div class="detail-item">
                            <label>Dimensions</label>
                            <span id="previewDimensions"></span>
                        </div>
                        <div class="detail-item">
                            <label>Uploaded</label>
                            <span id="previewDate"></span>
                        </div>
                    </div>
                    <div class="preview-actions">
                        <button class="btn btn-secondary" onclick="downloadMedia()">
                            <i class="icon-download"></i> Download
                        </button>
                        <button class="btn btn-danger" onclick="deleteMedia()">
                            <i class="icon-trash"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/digiplayer/public/assets/js/media.js"></script>
<?php require_once 'template/footer.php'; ?>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/monitoring.php ===

<?php
session_start();
if (!isset($_SESSION['user'])) {
    header('Location: index.php');
    exit;
}
$pageTitle = 'System Monitoring';
$currentPage = 'monitoring';
require_once 'template/header.php';
require_once 'template/sidebar.php';
?>

<div class="main-content">
    <div class="content-header">
        <h1>System Monitoring</h1>
    </div>

    <div class="monitor-grid">
        <div class="status-card">
            <h3>Overview</h3>
            <div id="statusOverview"></div>
        </div>
        
        <div class="monitor-table">
            <table>
                <thead>
                    <tr>
                        <th>Device</th>
                        <th>Status</th>
                        <th>Network</th>
                        <th>CPU</th>
                        <th>Memory</th>
                        <th>Last Update</th>
                    </tr>
                </thead>
                <tbody id="monitorData"></tbody>
            </table>
        </div>
    </div>
</div>

<script src="/digiplayer/public/assets/js/monitoring.js"></script>
<?php require_once 'template/footer.php'; ?>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/alerts.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Alerts</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <nav>
       <a href="/dashboard.php">Dashboard</a>
       <a href="/alerts.php">Alerts</a>
   </nav>

   <div class="alerts-container">
       <div class="alerts-header">
           <h1>System Alerts</h1>
           <div class="alert-filters">
               <select id="severityFilter">
                   <option value="">All Severities</option>
                   <option value="1">Low</option>
                   <option value="2">Medium</option>
                   <option value="3">High</option>
               </select>
           </div>
       </div>

       <div id="activeAlerts"></div>

       <script>
       function updateAlerts() {
           fetch("/api/notifications")
               .then(r => r.json())
               .then(data => {
                   document.getElementById("activeAlerts").innerHTML = data.notifications
                       .map(n => `
                           <div class="alert-card severity-${n.severity}">
                               <div class="alert-header">
                                   <span class="device-name">${n.device_name}</span>
                                   <span class="alert-time">${n.created_at}</span>
                               </div>
                               <div class="alert-message">${n.message}</div>
                               <button onclick="acknowledgeAlert(${n.id})" class="ack-button">
                                   Acknowledge
                               </button>
                           </div>
                       `).join("");
               });
       }

       function acknowledgeAlert(id) {
           fetch("/api/notifications", {
               method: "PUT",
               headers: {"Content-Type": "application/json"},
               body: JSON.stringify({
                   action: "acknowledge",
                   notification_id: id
               })
           }).then(() => updateAlerts());
       }

       updateAlerts();
       setInterval(updateAlerts, 30000);
       </script>
   </div>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/remote.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
    <title>DigiPlayer - Remote Control</title>
    <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
    <div class="remote-container">
        <div id="deviceList" class="device-grid"></div>
        
        <div class="command-panel" id="commandPanel">
            <h3>Device Control</h3>
            <div class="command-buttons">
                <button onclick="sendCommand('restart')">Restart</button>
                <button onclick="sendCommand('refresh')">Refresh Content</button>
                <button onclick="sendCommand('clear-cache')">Clear Cache</button>
                <button onclick="sendCommand('screenshot')">Take Screenshot</button>
            </div>
            
           <div class="volume-control">
               <label>Volume</label>
               <input type="range" min="0" max="100" onchange="setVolume(this.value)">
           </div>
           
           <div class="playlist-control">
               <button onclick="sendCommand('prev')">Previous</button>
               <button onclick="sendCommand('play-pause')">Play/Pause</button>
               <button onclick="sendCommand('next')">Next</button>
           </div>
       </div>
   </div>

   <script>
   async function loadDevices() {
       const response = await fetch("/api/devices");
       const data = await response.json();
       document.getElementById("deviceList").innerHTML = data.devices.map(d => `
           <div class="device-card ${d.status}" onclick="selectDevice(${d.id})">
               <h3>${d.name}</h3>
               <div class="status-info">Status: ${d.status}</div>
           </div>
       `).join("");
   }

   let selectedDevice = null;

   function selectDevice(id) {
       selectedDevice = id;
       document.querySelectorAll(".device-card").forEach(card => {
           card.classList.remove("selected");
       });
       document.querySelector(`[onclick="selectDevice(${id})"]`).classList.add("selected");
   }

   async function sendCommand(command, params = {}) {
       if (!selectedDevice) {
           alert("Please select a device first");
           return;
       }
       
       await fetch("/api/remote", {
           method: "POST",
           headers: {"Content-Type": "application/json"},
           body: JSON.stringify({
               command,
               device_id: selectedDevice,
               params
           })
       });
   }

   function setVolume(value) {
       sendCommand("set-volume", { level: value });
   }

   loadDevices();
   setInterval(loadDevices, 10000);
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/users.php ===

<?php
session_start();
if (!isset($_SESSION["user"]) || $_SESSION["user"]["role_name"] !== "admin") { 
   header("Location: /"); exit; 
}
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - User Management</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <div class="users-container">
       <div class="users-list">
           <h2>Users</h2>
           <div id="usersList"></div>
       </div>

       <div class="user-form">
           <h3>Add New User</h3>
           <form id="userForm">
               <input type="text" name="name" placeholder="Full Name" required>
               <input type="email" name="email" placeholder="Email" required>
               <input type="password" name="password" placeholder="Password" required>
               <select name="role" required>
                   <option value="">Select Role</option>
                   <option value="2">Manager</option>
                   <option value="3">Operator</option>
               </select>
               <button type="submit">Add User</button>
           </form>
       </div>
   </div>

   <script>
   async function loadUsers() {
       const response = await fetch("/api/users");
       const data = await response.json();
       document.getElementById("usersList").innerHTML = data.users.map(user => `
           <div class="user-card">
               <div class="user-info">
                   <h4>${user.name}</h4>
                   <div>${user.email}</div>
                   <div class="role-badge ${user.role_name}">${user.role_name}</div>
               </div>
               <div class="user-actions">
                   <button onclick="resetPassword(${user.id})">Reset Password</button>
                   <button onclick="toggleStatus(${user.id})">Disable</button>
               </div>
           </div>
       `).join("");
   }

   document.getElementById("userForm").onsubmit = async (e) => {
       e.preventDefault();
       const formData = new FormData(e.target);
       await fetch("/api/users", {
           method: "POST",
           headers: {"Content-Type": "application/json"},
           body: JSON.stringify(Object.fromEntries(formData))
       });
       loadUsers();
       e.target.reset();
   };

   loadUsers();
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/.htaccess ===

RewriteEngine On
RewriteBase /digiplayer/public/

# Handle requests to api/
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^api/(.*)$ api/$1 [QSA,L]

# Handle all other requests
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^ index.php [QSA,L]

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/logout.php ===

<?php
session_start();
session_destroy();
header('Location: index.php');

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/groups.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
$pageTitle = 'Group Management';
$currentPage = 'groups';
require_once 'template/header.php';
require_once 'template/sidebar.php';
?>

<div class="main-content">
    <div class="content-header">
        <h1>Group Management</h1>
        <div class="header-actions">
            <button class="btn btn-primary" onclick="showCreateGroupModal()">Create Group</button>
        </div>
    </div>

    <div class="groups-container">
        <div class="groups-panel">
            <div id="groupList" class="groups-list">
                <!-- Groups will be loaded here -->
            </div>
        </div>
        
        <div class="devices-panel">
            <h2>Available Devices</h2>
            <div id="availableDevices" class="devices-list">
                <!-- Available devices will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Group Modal -->
<div id="groupModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Create Group</h2>
            <button class="close-modal" onclick="closeModal('groupModal')">&times;</button>
        </div>
        <form id="groupForm">
            <input type="hidden" id="groupId" name="id">
            <div class="form-group">
                <label>Group Name</label>
                <input type="text" id="groupName" name="name" required>
            </div>
            <div class="form-group">
                <label>Description</label>
                <textarea id="groupDescription" name="description"></textarea>
            </div>
            <div class="form-actions">
                <button type="button" class="btn btn-secondary" onclick="closeModal('groupModal')">Cancel</button>
                <button type="submit" class="btn btn-primary">Save Group</button>
            </div>
        </form>
    </div>
</div>

<!-- Permissions Modal -->
<div id="permissionsModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Group Permissions</h2>
            <button class="close-modal" onclick="closeModal('permissionsModal')">&times;</button>
        </div>
        <form id="permissionsForm">
            <input type="hidden" id="permissionsGroupId" name="group_id">
            <div class="permissions-grid">
                <div class="permission-item">
                    <label>
                        <input type="checkbox" name="permissions[]" value="manage_content">
                        Content Management
                    </label>
                </div>
                <div class="permission-item">
                    <label>
                        <input type="checkbox" name="permissions[]" value="manage_playlists">
                        Playlist Management
                    </label>
                </div>
                <div class="permission-item">
                    <label>
                        <input type="checkbox" name="permissions[]" value="manage_schedule">
                        Schedule Management
                    </label>
                </div>
            </div>
            <div class="form-actions">
                <button type="button" class="btn btn-secondary" onclick="closeModal('permissionsModal')">Cancel</button>
                <button type="submit" class="btn btn-primary">Save Permissions</button>
            </div>
        </form>
    </div>
</div>

<script src="/assets/js/groups.js"></script>
<?php require_once 'template/footer.php'; ?>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/index.php ===

<?php
session_start();
if (isset($_SESSION['user'])) {
    header('Location: dashboard.php');
    exit;
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>DigiPlayer Login</title>
    <link rel="stylesheet" href="/digiplayer/public/assets/css/login.css">
</head>
<body class="login-page">
    <div class="login-container">
        <div class="login-box">
            <div class="login-header">
                <h2>DigiPlayer</h2>
                <p>Digital Signage Management</p>
            </div>
            <form id="loginForm">
                <div class="form-group">
                    <input type="text" name="username" placeholder="Username" required>
                </div>
                <div class="form-group">
                    <input type="password" name="password" placeholder="Password" required>
                </div>
                <button type="submit" class="btn-login">Login</button>
            </form>
            <div id="loginMessage" class="login-message"></div>
        </div>
    </div>
    <script>
    document.getElementById('loginForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        
        try {
            const response = await fetch('/digiplayer/public/api/auth/login.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username: formData.get('username'),
                    password: formData.get('password')
                })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                window.location.href = '/digiplayer/public/dashboard.php';
            } else {
                document.getElementById('loginMessage').textContent = data.error || 'Login failed';
            }
        } catch (error) {
            document.getElementById('loginMessage').textContent = 'Connection error occurred';
        }
    });
    </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/sync.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Sync Status</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <nav>
       <a href="/dashboard.php">Dashboard</a>
       <a href="/devices.php">Devices</a>
       <a href="/sync.php">Sync Status</a>
   </nav>
   
   <div class="sync-container">
       <h1>Synchronization Status</h1>
       <div id="syncQueue"></div>
       <button onclick="syncAll()" class="sync-button">Sync All Devices</button>
   </div>

   <script>
   function loadSyncStatus() {
       fetch("/api/sync")
           .then(r => r.json())
           .then(data => {
               document.getElementById("syncQueue").innerHTML = `
                   <div class="sync-grid">
                       ${data.queue.map(q => `
                           <div class="sync-item ${q.status}">
                               <div class="sync-header">
                                   <span>Device: ${q.device_id}</span>
                                   <span>Status: ${q.status}</span>
                               </div>
                               <div class="sync-details">
                                   <div>Action: ${q.action}</div>
                                   <div>Created: ${q.created_at}</div>
                               </div>
                           </div>
                       `).join("")}
                   </div>
               `;
           });
   }

   function syncAll() {
       fetch("/api/sync", {
           method: "POST",
           headers: {"Content-Type": "application/json"},
           body: JSON.stringify({
               action: "update_all",
               data: {}
           })
       }).then(() => loadSyncStatus());
   }

   setInterval(loadSyncStatus, 10000);
   loadSyncStatus();
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/group_management.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Group Management</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <div class="management-container">
       <div class="groups-panel">
           <h2>Device Groups</h2>
           <div id="groupList"></div>
           <button onclick="showCreateGroupModal()" class="add-button">Create New Group</button>
       </div>
       
       <div class="devices-panel">
           <h2>Available Devices</h2>
           <div id="deviceList" class="drag-container"></div>
       </div>
   </div>

   <div id="createGroupModal" class="modal">
       <div class="modal-content">
           <h3>Create New Group</h3>
           <input type="text" id="groupName" placeholder="Group Name">
           <textarea id="groupDescription" placeholder="Description"></textarea>
           <button onclick="createGroup()">Create</button>
           <button onclick="closeModal()">Cancel</button>
       </div>
   </div>

   <script>
   let draggedItem = null;

   function loadGroups() {
       fetch("/api/groups")
           .then(r => r.json())
           .then(data => {
               document.getElementById("groupList").innerHTML = data.groups.map(g => `
                   <div class="group-card" ondrop="drop(event)" ondragover="allowDrop(event)" data-group-id="${g.id}">
                       <h3>${g.name}</h3>
                       <div class="device-list">
                           ${g.devices.map(d => deviceElement(d)).join("")}
                       </div>
                   </div>
               `).join("");
           });
   }

   function deviceElement(device) {
       return `
           <div class="device-item" draggable="true" ondragstart="drag(event)" data-device-id="${device.id}">
               ${device.name}
           </div>
       `;
   }

   function drag(ev) {
       draggedItem = ev.target;
       ev.dataTransfer.setData("text", ev.target.dataset.deviceId);
   }

   function allowDrop(ev) {
       ev.preventDefault();
   }

   async function drop(ev) {
       ev.preventDefault();
       const deviceId = ev.dataTransfer.getData("text");
       const groupId = ev.target.closest(".group-card").dataset.groupId;
       
       await fetch("/api/group-management", {
           method: "POST",
           headers: {"Content-Type": "application/json"},
           body: JSON.stringify({
               action: "add_devices",
               group_id: groupId,
               device_ids: [deviceId]
           })
       });
       
       loadGroups();
   }

   loadGroups();
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/schedules.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Scheduled Commands</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <div class="schedule-container">
       <div class="schedule-list">
           <h2>Scheduled Commands</h2>
           <div id="scheduleList"></div>
           <button onclick="showAddScheduleModal()" class="add-button">Add Schedule</button>
       </div>
       
       <div id="scheduleModal" class="modal">
           <div class="modal-content">
               <h3>Add Scheduled Command</h3>
               <select id="deviceSelect"></select>
               <select id="commandSelect">
                   <option value="restart">Restart</option>
                   <option value="update">Update</option>
                   <option value="sync">Sync Content</option>
               </select>
               <select id="scheduleType">
                   <option value="once">Once</option>
                   <option value="daily">Daily</option>
                   <option value="weekly">Weekly</option>
                   <option value="monthly">Monthly</option>
               </select>
               <input type="time" id="scheduleTime">
               <input type="date" id="scheduleDate">
               <button onclick="createSchedule()">Create</button>
           </div>
       </div>
   </div>

   <script>
   async function loadSchedules() {
       const response = await fetch("/api/schedules");
       const data = await response.json();
       document.getElementById("scheduleList").innerHTML = data.commands.map(c => `
           <div class="schedule-item">
               <div class="schedule-header">
                   <span>${c.device_name}</span>
                   <span>${c.command}</span>
               </div>
               <div class="schedule-details">
                   <div>Type: ${c.schedule_type}</div>
                   <div>Time: ${c.schedule_time}</div>
                   <div>Next Run: ${c.next_run}</div>
               </div>
           </div>
       `).join("");
   }

   async function createSchedule() {
       const data = {
           device_id: document.getElementById("deviceSelect").value,
           command: document.getElementById("commandSelect").value,
           schedule_type: document.getElementById("scheduleType").value,
           schedule_time: document.getElementById("scheduleTime").value,
           schedule_day: document.getElementById("scheduleDate").value
       };

       await fetch("/api/schedules", {
           method: "POST",
           headers: {"Content-Type": "application/json"},
           body: JSON.stringify(data)
       });
       
       loadSchedules();
       closeModal();
   }

   loadSchedules();
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/mass-update.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Mass Content Update</title>
   <link rel="stylesheet" href="/assets/css/style.css">
</head>
<body>
   <div class="mass-update-container">
       <div class="selection-panel">
           <div class="groups-select">
               <h3>Select Groups</h3>
               <div id="groupList"></div>
           </div>
           
           <div class="devices-select">
               <h3>Or Select Individual Devices</h3>
               <div id="deviceList"></div>
           </div>
       </div>
       
       <div class="content-panel">
           <h3>Content to Update</h3>
           <form id="contentForm">
               <div class="upload-section">
                   <input type="file" id="contentFiles" multiple>
                   <div class="drag-hint">or drag files here</div>
               </div>
               
               <div class="schedule-section">
                   <label>Schedule Update</label>
                   <select id="scheduleType">
                       <option value="now">Update Now</option>
                       <option value="scheduled">Schedule for Later</option>
                   </select>
                   <input type="datetime-local" id="scheduleTime" style="display:none;">
               </div>
               
               <button type="submit" class="update-button">Start Update</button>
           </form>
       </div>
   </div>

   <script>
   let selectedGroups = new Set();
   let selectedDevices = new Set();

   async function loadGroups() {
       const response = await fetch("/api/groups");
       const data = await response.json();
       document.getElementById("groupList").innerHTML = data.groups.map(g => `
           <div class="group-item" onclick="toggleGroup(${g.id})">
               <input type="checkbox" ${selectedGroups.has(g.id) ? "checked" : ""}>
               <span>${g.name}</span>
           </div>
       `).join("");
   }

   async function loadDevices() {
       const response = await fetch("/api/devices");
       const data = await response.json();
       document.getElementById("deviceList").innerHTML = data.devices.map(d => `
           <div class="device-item" onclick="toggleDevice(${d.id})">
               <input type="checkbox" ${selectedDevices.has(d.id) ? "checked" : ""}>
               <span>${d.name}</span>
           </div>
       `).join("");
   }

   document.getElementById("contentForm").onsubmit = async (e) => {
       e.preventDefault();
       const formData = new FormData();
       formData.append("groups", Array.from(selectedGroups));
       formData.append("devices", Array.from(selectedDevices));
       
       const files = document.getElementById("contentFiles").files;
       for (let file of files) {
           formData.append("files[]", file);
       }
       
       await fetch("/api/mass-update", {
           method: "POST",
           body: formData
       });
       
       alert("Update started!");
   };

   loadGroups();
   loadDevices();
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/network.php ===

<?php
session_start();
if (!isset($_SESSION["user"])) { header("Location: /"); exit; }
?>
<!DOCTYPE html>
<html>
<head>
   <title>DigiPlayer - Network Statistics</title>
   <link rel="stylesheet" href="/assets/css/style.css">
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
   <div class="network-container">
       <div class="device-selector">
           <select id="deviceSelect" onchange="loadStats()"></select>
       </div>
       
       <div class="stats-grid">
           <div class="stat-card">
               <canvas id="bandwidthChart"></canvas>
           </div>
           <div class="stat-card">
               <canvas id="latencyChart"></canvas>
           </div>
       </div>
       
       <div class="stats-table">
           <table>
               <thead>
                   <tr>
                       <th>Time</th>
                       <th>Upload (Mbps)</th>
                       <th>Download (Mbps)</th>
                       <th>Latency (ms)</th>
                       <th>Packet Loss (%)</th>
                   </tr>
               </thead>
               <tbody id="statsBody"></tbody>
           </table>
       </div>
   </div>

   <script>
   async function loadStats() {
       const deviceId = document.getElementById("deviceSelect").value;
       const response = await fetch(`/api/network-stats?device_id=${deviceId}`);
       const data = await response.json();
       
       updateCharts(data.stats);
       updateTable(data.stats);
   }

   function updateCharts(stats) {
       const ctx = document.getElementById("bandwidthChart").getContext("2d");
       new Chart(ctx, {
           type: "line",
           data: {
               labels: stats.map(s => new Date(s.recorded_at).toLocaleTimeString()),
               datasets: [{
                   label: "Upload",
                   data: stats.map(s => s.bandwidth_up),
                   borderColor: "#007bff"
               }, {
                   label: "Download",
                   data: stats.map(s => s.bandwidth_down),
                   borderColor: "#28a745"
               }]
           }
       });

       const latencyCtx = document.getElementById("latencyChart").getContext("2d");
       new Chart(latencyCtx, {
           type: "line",
           data: {
               labels: stats.map(s => new Date(s.recorded_at).toLocaleTimeString()),
               datasets: [{
                   label: "Latency",
                   data: stats.map(s => s.latency),
                   borderColor: "#dc3545"
               }]
           }
       });
   }

   function updateTable(stats) {
       document.getElementById("statsBody").innerHTML = stats.map(s => `
           <tr>
               <td>${new Date(s.recorded_at).toLocaleString()}</td>
               <td>${s.bandwidth_up.toFixed(2)}</td>
               <td>${s.bandwidth_down.toFixed(2)}</td>
               <td>${s.latency}</td>
               <td>${s.packet_loss.toFixed(2)}</td>
           </tr>
       `).join("");
   }

   loadStats();
   setInterval(loadStats, 30000);
   </script>
</body>
</html>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/settings.php ===

<?php
session_start();
if (!isset($_SESSION['user'])) {
    header('Location: index.php');
    exit;
}
$pageTitle = 'System Settings';
$currentPage = 'settings';
require_once 'template/header.php';
require_once 'template/sidebar.php';
?>

<div class="main-content">
    <div class="content-header">
        <h1>System Settings</h1>
    </div>

    <div class="settings-container">
        <div id="settingsContainer">
            <!-- Settings content will be loaded here by system-settings.js -->
        </div>
    </div>
</div>

<script src="/digiplayer/public/assets/js/system-settings.js"></script>
<?php require_once 'template/footer.php'; ?>

=== File: /home/vhost15998ssh/htdocs/digiplayer/public/playlists.php ===

<?php
session_start();
if (!isset($_SESSION['user'])) {
    header('Location: index.php');
    exit;
}
$pageTitle = 'Playlist Management';
$currentPage = 'playlists';
require_once 'template/header.php';
require_once 'template/sidebar.php';
?>

<div class="main-content">
    <div class="content-header">
        <h1>Playlist Management</h1>
        <div class="header-actions">
            <button class="btn btn-primary" onclick="showAddPlaylistModal()">
                <i class="icon-plus"></i> Create Playlist
            </button>
        </div>
    </div>

    <div class="playlist-container">
        <div class="playlists-panel">
            <div class="panel-header">
                <h3>Playlists</h3>
                <div class="search-box">
                    <input type="text" id="playlistSearch" placeholder="Search playlists...">
                </div>
            </div>
            <div id="playlistsList" class="playlists-list">
                <!-- Playlists will be loaded here -->
            </div>
        </div>

        <div class="content-panel" id="playlistContentPanel">
            <div class="panel-header">
                <h3>Playlist Content</h3>
                <button class="btn btn-secondary" onclick="showAddContentModal()">
                    <i class="icon-plus"></i> Add Content
                </button>
            </div>
            <div id="playlistContent" class="content-list sortable">
                <!-- Playlist content will be loaded here -->
            </div>
            <div class="panel-footer">
                <div class="playlist-info">
                    <span id="totalDuration">Total Duration: 0:00</span>
                    <span id="itemCount">Items: 0</span>
                </div>
                <button class="btn btn-primary" onclick="savePlaylistChanges()">
                    Save Changes
                </button>
            </div>
        </div>
    </div>

    <!-- Add Playlist Modal -->
    <div id="addPlaylistModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Create New Playlist</h2>
                <button class="close-modal" onclick="closeModal('addPlaylistModal')">&times;</button>
            </div>
            <form id="addPlaylistForm">
                <div class="form-group">
                    <label for="playlistName">Playlist Name</label>
                    <input type="text" id="playlistName" name="name" required>
                </div>
                <div class="form-group">
                    <label for="playlistDescription">Description</label>
                    <textarea id="playlistDescription" name="description" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label for="scheduleType">Schedule Type</label>
                    <select id="scheduleType" name="schedule_type">
                        <option value="always">Always</option>
                        <option value="scheduled">Scheduled</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('addPlaylistModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Playlist</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Add Content Modal -->
    <div id="addContentModal" class="modal">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <h2>Add Content to Playlist</h2>
                <button class="close-modal" onclick="closeModal('addContentModal')">&times;</button>
            </div>
            <div class="content-browser">
                <div class="filter-bar">
                    <select id="contentTypeFilter">
                        <option value="">All Types</option>
                        <option value="image">Images</option>
                        <option value="video">Videos</option>
                    </select>
                    <input type="text" id="contentSearch" placeholder="Search content...">
                </div>
                <div id="mediaGrid" class="media-grid">
                    <!-- Available media items will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeModal('addContentModal')">Cancel</button>
                <button class="btn btn-primary" onclick="addSelectedContent()">Add Selected</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
<script src="/digiplayer/public/assets/js/playlists.js"></script>
<?php require_once 'template/footer.php'; ?>
